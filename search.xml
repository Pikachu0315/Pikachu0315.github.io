<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>uniapp</title>
      <link href="/2022/09/25/uniapp/uniapp/"/>
      <url>/2022/09/25/uniapp/uniapp/</url>
      
        <content type="html"><![CDATA[<p>待更新~</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/08/21/TypeScript/TypeScript/"/>
      <url>/2022/08/21/TypeScript/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈-JavaScript"><a href="#浅谈-JavaScript" class="headerlink" title="浅谈 JavaScript"></a>浅谈 JavaScript</h1><h3 id="JavaScript-是一门优秀的编程语言吗？"><a href="#JavaScript-是一门优秀的编程语言吗？" class="headerlink" title="JavaScript 是一门优秀的编程语言吗？"></a>JavaScript 是一门优秀的编程语言吗？</h3><p>每个人可能观点并不完全一致，但是从很多角度来看，JavaScript 是一门非常优秀的编程语言；<br>而且，可以说在很长一段时间内这个语言不会被代替，并且会在更多的领域被大家广泛使用；</p><h3 id="著名的-Atwood-定律："><a href="#著名的-Atwood-定律：" class="headerlink" title="著名的 Atwood 定律："></a>著名的 Atwood 定律：</h3><p>Stack Overflow 的创立者之一的 Jeff Atwood 在 2007 年提出了著名的 Atwood 定律。</p><p>any application that can be written in JavaScript, will eventually be written in JavaScript.</p><p>任何可以使用 JavaScript 来实现的应用都最终都会使用 JavaScript 实现。</p><p>其实我们已经看到了，这句话正在一步步被应验：</p><ul><li>Web 端的开发我们一直都是使用 JavaScript；</li><li>移动端开发可以借助于 ReactNative、Weex、Uniapp 等框架实现跨平台开发；</li><li>小程序端的开发也是离不开 JavaScript；</li><li>桌面端应用程序我们可以借助于 Electron 来开发；</li><li>服务器端开发可以借助于 Node 环境使用 JavaScript 来开发。</li></ul><h3 id="JavaScript-的痛点"><a href="#JavaScript-的痛点" class="headerlink" title="JavaScript 的痛点"></a>JavaScript 的痛点</h3><p>并且随着近几年前端领域的快速发展，让 JavaScript 迅速被普及和受广大开发者的喜爱，借助于 JavaScript 本身的 强大，也让使用 JavaScript 开发的人员越来越多。</p><h3 id="优秀的-JavaScript-没有缺点吗？"><a href="#优秀的-JavaScript-没有缺点吗？" class="headerlink" title="优秀的 JavaScript 没有缺点吗？"></a>优秀的 JavaScript 没有缺点吗？</h3><p>其实上由于各种历史因素，JavaScript 语言本身存在很多的缺点；</p><p>比如 ES5 以及之前的使用的 var 关键字关于作用域的问题；</p><p>比如最初 JavaScript 设计的数组类型并不是连续的内存空间；</p><p>比如直到今天 JavaScript 也没有加入类型检测这一机制；</p><h3 id="JavaScript-正在慢慢变好"><a href="#JavaScript-正在慢慢变好" class="headerlink" title="JavaScript 正在慢慢变好"></a>JavaScript 正在慢慢变好</h3><p>不可否认的是，JavaScript 正在慢慢变得越来越好，无论是从底层设计还是应用层面。</p><p>ES6、7、8 等的推出，每次都会让这门语言更加现代、更加安全、更加方便。</p><p>但是知道今天，JavaScript 在类型检测上依然是毫无进展（为什么类型检测如此重要，我后面会聊到）。</p><h3 id="类型带来的问题"><a href="#类型带来的问题" class="headerlink" title="类型带来的问题"></a>类型带来的问题</h3><p>首先你需要知道，编程开发中我们有一个共识：<strong>错误出现的越早越好</strong></p><p>能在<strong>写代码的时候</strong>发现错误，就不要在<strong>代码编译时</strong>再发现（IDE 的优势就是在代码编写过程中帮助我们发现错 误）。</p><p>能在<strong>代码编译期间</strong>发现错误，就不要在<strong>代码运行期间</strong>再发现（类型检测就可以很好的帮助我们做到这一点）。</p><p>能在开发阶段发现错误，就不要在测试期间发现错误，能在测试期间发现错误，就不要在上线后发现错误。</p><p>现在我们想探究的就是如何在 <strong>代码编译期间</strong> 发现代码的错误：</p><p>JavaScript 可以做到吗？不可以，我们来看下面这段经常可能出现的代码问题。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getLength</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="title function_">getLength</span>()</span><br><span class="line"><span class="comment">// 报错: Uncaught TypeError: Cannot read properties of undefined (reading &#x27;length&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="这是我们一个非常常见的错误："><a href="#这是我们一个非常常见的错误：" class="headerlink" title="这是我们一个非常常见的错误："></a>这是我们一个非常常见的错误：</h3><p>这个错误很大的原因就是因为 JavaScript 没有对我们传入的参数进行任何的限制，只能等到运行期间才发现这个 错误；<br>并且当这个错误产生时，会影响后续代码的继续执行，也就是整个项目都因为一个小小的错误而深入崩溃；</p><h3 id="当然，你可能会想：我怎么可能犯这样低级的错误呢？"><a href="#当然，你可能会想：我怎么可能犯这样低级的错误呢？" class="headerlink" title="当然，你可能会想：我怎么可能犯这样低级的错误呢？"></a>当然，你可能会想：我怎么可能犯这样低级的错误呢？</h3><p>当我们写像我们上面这样的简单的 demo 时，这样的错误很容易避免，并且当出现错误时，也很容易检查出来；</p><p>但是当我们开发一个大型项目时呢？你能保证自己一定不会出现这样的问题吗？而且如果我们是调用别人的类</p><p>库，又如何知道让我们传入的到底是什么样的参数呢？</p><p>但是，如果我们可以给 JavaScript 加上很多限制，在开发中就可以很好的避免这样的问题了：</p><p>比如我们的 getLength 函数中 str 是一个必传的类型，没有调用者没有传编译期间就会报错；</p><p>比如我们要求它的必须是一个 String 类型，传入其他类型就直接报错；</p><p>那么就可以知道很多的错误问题在编译期间就被发现，而不是等到运行时再去发现和修改；</p><h3 id="类型思维的缺失"><a href="#类型思维的缺失" class="headerlink" title="类型思维的缺失"></a>类型思维的缺失</h3><p>我们已经简单体会到没有类型检查带来的一些问题，JavaScript 因为从设计之初就没有考虑类型的约束问题，所以</p><p>造成了前端开发人员关于<strong>类型思维的缺失：</strong></p><p><strong>前端开发人员</strong>通常不关心变量或者参数是什么类型的，如果在必须确定类型时，我们往往需要使用各种判断验 证；</p><p>从其他方向转到前端的人员，也会因为没有类型约束，而总是担心自己的代码不安全，不够健壮；</p><p>所以我们经常会说 JavaScript<strong>不适合开发大型项目</strong>，因为当项目一旦庞大起来，这种宽松的类型约束会带来非常多 的安全隐患，多人员开发它们之间也没有<strong>良好的类型契约</strong>。</p><p>比如当我们去实现一个核心类库时，如果没有类型约束，那么需要对别人传入的参数进行各种验证来保证我们 代码的健壮性；</p><p>比如我们去调用别人的函数，对方没有对函数进行任何的注释，我们只能去看里面的逻辑来理解这个函数需要 传入什么参数，返回值是什么类型；</p><h3 id="为-JavaScript-添加类型约束的好处"><a href="#为-JavaScript-添加类型约束的好处" class="headerlink" title="为 JavaScript 添加类型约束的好处"></a>为 JavaScript 添加类型约束的好处</h3><p>背景：JS 的类型系统存在“先天缺陷“，代码中绝大部分错误都是类型错误(Uncaught TypeError )。<br>问题 ∶ 增加了找 Bug、改 Bug 的时间，严重影响开发效率。</p><p>从编程语言的动静来区分</p><p>TypeScript 属于静态类型的编程语言，JS 属于动态类型的编程语言</p><p>静态类型︰编译期做类型检查；动态类型 ∶ 执行期做类型检查。</p><p>代码编译和代码执行的顺序 ∶1 编译，2 执行。</p><p>对于 JS 来说 ∶ 需要等到代码真正去执行的时候才能发现错误（晚）。</p><p>对于 TS 来说 ∶ 在代码编译的时候（代码执行前）就可以发现错误（早）。</p><p>并且，配合 VSCode 等开发工具，TS 可以提前到在编写代码的同时就发现代码中的错误，减少找 bug、改 bug 时间</p><h2 id="Ts-相比-Js-的优势"><a href="#Ts-相比-Js-的优势" class="headerlink" title="Ts 相比 Js 的优势"></a>Ts 相比 Js 的优势</h2><ul><li>更早（写代码的同时）发现错误，减少找 Bug、改 Bug 时间，提升开发效率。</li><li>程序中任何位置的代码都有代码提示，随时随地的安全感，增强了开发体验。</li><li>强大的类型系统提升了代码的可维护性，使得重构代码更加容易。</li><li>支持最新的 ECMAScript 语法，优先体验最新的语法，让你走在前端技术的最前沿。</li><li>TS 类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了成本。</li><li>除此之外，Vue 3 源码使用 TS 重写、Angular 默认支持 TS、React 与 TS 完美配合，TypeScript 已成为大中型前端项目的首选编程语言</li></ul><h3 id="为了弥补-JavaScript-类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案："><a href="#为了弥补-JavaScript-类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案：" class="headerlink" title="为了弥补 JavaScript 类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案："></a>为了弥补 JavaScript 类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案：</h3><p>2014 年，Facebook 推出了 flow 来对 JavaScript 进行类型检查；</p><p>同年，Microsoft 微软也推出了 TypeScript1.0 版本；</p><p>他们都致力于为 JavaScript 提供类型检查；</p><p>而现在，<strong>无疑 TypeScript 已经完全胜出</strong>：</p><p>Vue2.x 的时候采用的就是 flow 来做类型检查；</p><p>Vue3.x 已经全线转向 TypeScript，98.3%使用 TypeScript 进行了重构；</p><p>而 Angular 在很早期就使用 TypeScript 进行了项目重构并且需要使用 TypeScript 来进行开发；</p><p>而甚至 Facebook 公司一些自己的产品也在使用 TypeScript；</p><p>学习 TypeScript 不仅仅可以为我们的代码增加类型约束，而且可以培养我们前端程序员具备类型思维。</p><h1 id="TypeScript-介绍"><a href="#TypeScript-介绍" class="headerlink" title="TypeScript 介绍"></a>TypeScript 介绍</h1><p><img src="/img/md/tsjieshao.png" alt="👇👇👇高质量精短介绍"><br>虽然我们已经知道 TypeScript 是干什么的了，也知道它解决了什么样的问题，但是我们还是需要全面的来认识一下 TypeScript 到底是什么？</p><h2 id="我们来看一下-TypeScript-在-GitHub-和官方上对自己的定义："><a href="#我们来看一下-TypeScript-在-GitHub-和官方上对自己的定义：" class="headerlink" title="我们来看一下 TypeScript 在 GitHub 和官方上对自己的定义："></a>我们来看一下 TypeScript 在 GitHub 和官方上对自己的定义：</h2><p>GitHub 说法：TypeScript is a superset of JavaScript that compiles to clean JavaScript output.</p><p>TypeScript 官网：TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p><p>翻译一下：TypeScript 是拥有类型的 JavaScript 超集，它可以编译成普通、干净、完整的 JavaScript 代码。</p><p>怎么理解上面的话呢？</p><p>我们可以将 TypeScript 理解成加强版的 JavaScript。</p><p>JavaScript 所拥有的特性，TypeScript 全部都是支持的，并且它紧随 ECMAScript 的标准，所以 ES6、ES7、ES8 等新语法标准，它都是 支持的；</p><p>并且在语言层面上，不仅仅增加了类型约束，而且包括一些语法的扩展，比如枚举类型（Enum）、元组类型（Tuple）等；</p><p>TypeScript 在实现新特性的同时，总是保持和 ES 标准的同步甚至是领先；</p><p>并且 TypeScript 最终会被编译成 JavaScript 代码，所以你并不需要担心它的兼容性问题，在编译时也不需要借助于 Babel 这样的工具；</p><p>所以，我们可以把 TypeScript 理解成更加强大的 JavaScript，不仅让 JavaScript 更加安全，而且给它带来了诸多好用的好用特性；</p><h1 id="TS-初体验"><a href="#TS-初体验" class="headerlink" title="TS 初体验"></a>TS 初体验</h1><h2 id="Ts-的编译环境"><a href="#Ts-的编译环境" class="headerlink" title="Ts 的编译环境"></a>Ts 的编译环境</h2><p>在前面我们提到过，TypeScript 最终会被编译成 JavaScript 来运行，所以我们需要搭建对应的环境：</p><p>我们需要在电脑上安装 TypeScript，这样就可以通过 TypeScript 的 Compiler 将其编译成 JavaScript；</p><p><img src="/img/md/ts2.png" alt="👇👇👇高质量精短介绍"><br>所以，我们需要全局安装</p><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><p>npm install typescript -g</p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p>tsc –version</p><h2 id="TS-的运行环境"><a href="#TS-的运行环境" class="headerlink" title="TS 的运行环境"></a>TS 的运行环境</h2><p>如果我们每次为了查看 TypeScript 代码的运行效果，都通过经过两个步骤的话就太繁琐了：</p><p>第一步：通过 tsc 编译 TypeScript 到 JavaScript 代码；</p><p>第二步：在浏览器或者 Node 环境下运行 JavaScript 代码；</p><p>是否可以简化这样的步骤呢？</p><p>比如编写了 TypeScript 之后可以直接运行在浏览器上？</p><p>比如编写了 TypeScript 之后，直接通过 node 的命令来执行？</p><p>上面我提到的两种方式，可以通过两个解决方案来完成：</p><h3 id="方式一：通过-webpack，配置本地的-TypeScript-编译环境和开启一个本地服务，可以直接运行在浏览器上；"><a href="#方式一：通过-webpack，配置本地的-TypeScript-编译环境和开启一个本地服务，可以直接运行在浏览器上；" class="headerlink" title="方式一：通过 webpack，配置本地的 TypeScript 编译环境和开启一个本地服务，可以直接运行在浏览器上；"></a>方式一：通过 webpack，配置本地的 TypeScript 编译环境和开启一个本地服务，可以直接运行在浏览器上；</h3><ul><li>npm init –y</li><li>npm i webpack webpack-cli –D</li><li>npm i ts-loader typescript –D</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.tsx&#x27;</span>,<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/.ts$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其它配置项参考webpack章节 ~</span><br></pre></td></tr></table></figure><h3 id="方式二：通过-ts-node-库，为-TypeScript-的运行提供执行环境；"><a href="#方式二：通过-ts-node-库，为-TypeScript-的运行提供执行环境；" class="headerlink" title="方式二：通过 ts-node 库，为 TypeScript 的运行提供执行环境；"></a>方式二：通过 ts-node 库，为 TypeScript 的运行提供执行环境；</h3><p>安装 npm install -g ts-node</p><p>另外 ts-node 需要依赖 tslib 和 @types&#x2F;node 两个包：</p><p>npm install tslib @types&#x2F;node -g</p><p>现在，我们可以直接通过 ts-node 来运行 TypeScript 的代码：</p><p>ts-node index.ts</p><p>注意：ts-node 7.0.0 以上就不自动识别 tsconfig.json 了，得加上 –files 才能识别</p><p>ts-node index.ts –files</p>]]></content>
      
      
      <categories>
          
          <category> ts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2022/08/07/React/React/"/>
      <url>/2022/08/07/React/React/</url>
      
        <content type="html"><![CDATA[<h1 id="学习-React"><a href="#学习-React" class="headerlink" title="学习 React"></a>学习 React</h1><ul><li>什么是 React?<br>用于构建用户界面的 JS 库<br>react 只关注视图（也就是页面）<br>AIA：是一个将数据渲染为 HTML 视图的开源 JS 库,感觉像是程序员和 DOM 之间的代理</li><li>步骤</li></ul><ol><li>发送请求获取数据</li><li>处理数据(过滤、整理格式)</li><li>操作 DOM 呈现页面</li></ol><ul><li>谁开发的？<br>由 Facebook 开发，且开源<br>软件工程师 Jorda Walke 创建</li><li>为什么用 react</li></ul><ol><li>原生 js 操作 DOM 繁琐、效率低</li><li>使用 JS 直接操作 DOM， 浏览器会进行大量的重绘重排</li><li>原生没有组件化编码方案，代码复用率低</li></ol><ul><li>React 特点</li></ul><ol><li>采用组件化模式、声明式编码，提高开发效率及组件复用率</li><li>在 React Native 中可以使用 React 语法进行移动端开发</li><li>使用虚拟 DOM+Diffing 算法，减少与真实 DOM 交互</li></ol><ul><li>依赖包</li></ul><ol><li>babel.min.js (es6-&gt;es5 jsx-&gt;js)</li><li>react.development.js(react 核心库)</li><li>react-dom.development(react 扩展库)</li></ol><h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><h3 id="虚拟-DOM-的两种创建方式"><a href="#虚拟-DOM-的两种创建方式" class="headerlink" title="虚拟 DOM 的两种创建方式"></a>虚拟 DOM 的两种创建方式</h3><ol><li>使用 jsx 创建虚拟虚拟 DOM</li></ol><ul><li>格式<br>引入 react 核心库<br>引入 react-dom,用于支持 react 操作 DOM<br>引入 babel</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 表示里面写jsx</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>; <span class="comment">// 此处不要写引号 因为不是字符串</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 js 创建虚拟 DOM</li></ol><ul><li>格式<br>引入 react 核心库<br>引入 react-dom,用于支持 react 操作 DOM</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 表示里面写jsx</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createlement</span>(标签名, 标签属性, 标签内容);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createlement</span>(<span class="string">&quot;h1&quot;</span>, &#123; <span class="attr">id</span>: <span class="string">&quot;title&quot;</span> &#125;, <span class="string">&quot;Hello React&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关于虚拟-DOM"><a href="#关于虚拟-DOM" class="headerlink" title="关于虚拟 DOM"></a>关于虚拟 DOM</h3><ol><li>console.log(VDOM instanceof Object) 本质是 Object 类型的对象</li><li>虚拟 DOM 比较”轻”，属性少。因为虚拟 DOM 是 react 内部在用，无需真实 DOM 那么多的属性</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;虚拟DOM&quot;</span>, <span class="variable constant_">VDOM</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;真实DOM&quot;</span>, <span class="variable constant_">TDOM</span>); <span class="comment">// 输出&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;，没法看属性</span></span><br><span class="line"><span class="keyword">debugger</span>; <span class="comment">// 借助断点来看有多少属性</span></span><br></pre></td></tr></table></figure><ol start="3"><li>虚拟 DOM 最终会被 React 转化为真实 DOM，呈现在页面上</li></ol><h2 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h2><p>全称:javascript XML<br>是一个 JavaScript 的语法扩展。在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。</p><h3 id="为什么使用-JSX？"><a href="#为什么使用-JSX？" class="headerlink" title="为什么使用 JSX？"></a>为什么使用 JSX？</h3><p>React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合，比如<br>上述例子若是在 h1 标签中再加一个 span 标签：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jsx:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createlement</span>(</span><br><span class="line">  <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&quot;title&quot;</span> &#125;,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;Hello React&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="BTW——XML"><a href="#BTW——XML" class="headerlink" title="BTW——XML"></a>BTW——XML</h4><p>早期用于存储和传输数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用json存储  json&#123;&#125;存储对象 js对象存储为json字符串--&gt;</span></span><br><span class="line">&#123;&quot;name&quot;:&#x27;Tom&#x27;,&quot;age&quot;:19&#125;</span><br></pre></td></tr></table></figure><h4 id="BTW——json"><a href="#BTW——json" class="headerlink" title="BTW——json"></a>BTW——json</h4><ol><li>parse 方法</li><li>stringify 方法</li></ol><h3 id="jsx-语法规则"><a href="#jsx-语法规则" class="headerlink" title="jsx 语法规则"></a>jsx 语法规则</h3><ol><li>定义虚拟 DOM 时不要写引号</li><li>标签中混入 js 表达式时用{}，myId，myData<br>[注意]区分 js 表达式 和 js 语句（代码）</li></ol><ul><li>表达式一定会产生一个值，可以放在任何一个需要值的地方<br>下面这些都是表达式 :<br>.a,<br>.a+b<br>.demo(1)<br>arr.map(() &#x3D;&gt; {return})<br>function test() {}</li><li>语句(代码)<br>下面这些都是语句(代码)<br>.if()<br>.for()<br>.switch() {case:xxx}</li></ul><ol start="3"><li>样式的类名指定不要用 class，要用 className</li><li>内联样式要用,style&#x3D;两个大括号，里面写 key:value 的形式 去写<br>比如两个大括号，中间写 color:’white’</li><li>虚拟 DOM，只有一个根标签 在这个例子中所有东西都放 h2 里</li><li>标签必须闭合</li><li>标签首字母<br>（1）若小写字母开头，则将该标签转为 html 同名元素，若 html 中无该标签对应同名元素，则报错<br>（2）若大写字母开头，react 就去渲染对应组件，若组件没有定义，则报错</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> myId = <span class="string">&quot;ALin&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> myData = <span class="string">&quot;suibian&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&#123;myId.toLowerCase()&#125;</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子：渲染数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> data = [<span class="string">&quot;Angular&quot;</span>, <span class="string">&quot;React&quot;</span>, <span class="string">&quot;Vue&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        &#123;data.map((item, index) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          // 这样写少了key值，可以暂时用index来代替，但最好还是用id，因为index会变化</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        &#125;)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模块与组件、模块化与组件化的理解"><a href="#模块与组件、模块化与组件化的理解" class="headerlink" title="模块与组件、模块化与组件化的理解"></a>模块与组件、模块化与组件化的理解</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>向外提供特定的 js 程序，一般就是一个 js 文件</li><li>为什么要拆成模块？<br>随着业务逻辑增加，代码越来越多越来越复杂</li><li>作用：复用 js，提高 js 运行效率</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li>用来实现局部功能效果的代码和资源集合(html&#x2F;css&#x2F;image&#x2F;js)</li><li>为什么要拆成组件？<br>一个界面功能更复杂</li><li>作用：复用代码，简化项目编码，提高运行效率</li></ul><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>当应用的 js 都以模块来编写的，这个应用就是一个模块化应用</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p><h2 id="react-面向组件编程"><a href="#react-面向组件编程" class="headerlink" title="react 面向组件编程"></a>react 面向组件编程</h2><h3 id="两种定义组件方式"><a href="#两种定义组件方式" class="headerlink" title="两种定义组件方式"></a>两种定义组件方式</h3><ol><li>函数式组件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建组函数式件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 结果为undefined 因为函数要经过babel翻译，翻译后开启严格模式，禁止自定义函数里的this指向window</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ReactDOM.render(demo,document.getElementById(&#x27;test&#x27;)) 这样写会报错，不能直接写demo</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>)) 这样写会报错，不能直接写demo</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// D 大写因为是组件，闭合标签，以标签形式写出</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  执行了ReactDOM.render(&lt;Demo/&gt;）......之后发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1. react 解析组件标签，找到Demo组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2. 发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实的DOM，随后呈现在页面中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>类式组件</li></ol><h4 id="回顾一下-es6"><a href="#回顾一下-es6" class="headerlink" title="回顾一下 es6"></a>回顾一下 es6</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 接收new 传递过来的参数，用构造器方法</span></span><br><span class="line">    <span class="title function_">constructotr</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">        <span class="comment">// 构造器中的this指什么？类的实例对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 除了构造器方法，还有一般方法</span></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        speak方法放在哪里了？ 类的原型对象上</span><br><span class="line">        speak方法给谁用的？给实例用</span><br><span class="line">        speak中<span class="variable language_">this</span>是谁？p1/p2 通过<span class="title class_">Person</span>实例调用speak时，speak中的<span class="variable language_">this</span>就是<span class="title class_">Person</span>实例</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用类创建一个Person实例对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">19</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jerry&#x27;</span>,<span class="number">17</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br><span class="line">p1.<span class="title function_">spaek</span>()</span><br><span class="line">p2.<span class="title function_">speak</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Student类，继承于Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,grade</span>) &#123; <span class="comment">// 自己写构造器，有想添加的东西在这儿写</span></span><br><span class="line">        <span class="comment">// 必须使用super,且在最前面</span></span><br><span class="line">        <span class="variable language_">super</span>(name,age)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">grade</span> = grade</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写从父类继承过来的方法</span></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>,我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>,我是<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>年级`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// study方法放在哪儿？ 类的原型上，供实例使用</span></span><br><span class="line">        <span class="comment">// 通过Student实例调用study时候,study中的this就是Student的实例</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我很努力的学习&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小张&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;高一&#x27;</span>) <span class="comment">// 若想再添加一个年级，但是继承的Person中没有</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span><br><span class="line"><span class="comment">// 静态方法就是构造函数本身属性，不在类的原型对象上，所以实例无法调用</span></span><br></pre></td></tr></table></figure><p>【AIA】</p><ol><li>类中的构造器不是必须写，要对实例进行一些初始化操作，如指定添加属性时才写（比如 grade）</li><li>如果 A 类继承 B 类，且 A 类中写了构造器，那么 A 类构造器中的 super 是必须要调用的</li><li>类中所定义的方法，都是放在类的原型对象上，供实例使用</li></ol><h3 id="创建类式组件"><a href="#创建类式组件" class="headerlink" title="创建类式组件"></a>创建类式组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// render是放在哪里的？ 类（MyComponent）的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// render中的this是谁？MyComponent的组件实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        执行了ReactDOM.render(&lt;MyComponent/&gt;）......之后发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. react 解析组件标签，找到MyComponent组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件三大属性"><a href="#组件三大属性" class="headerlink" title="组件三大属性"></a>组件三大属性</h2><h3 id="第一————组件的状态"><a href="#第一————组件的状态" class="headerlink" title="第一————组件的状态"></a>第一————组件的状态</h3><ul><li><p>像 es6 一样，我需要用到实例中的 state，但默认是空值,就是空对象。需要自己添加，所以用到 constructor 和 super</p></li><li><p>state 定义：state 上包含了可能变化的数据。state 由用户自定义。它是一个普通 javascript 对象</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>(props);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;; <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1&gt;今天天气&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;  有const声明就不需要写的那么麻烦了</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        执行了ReactDOM.render(&lt;MyComponent/&gt;）......之后发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. react 解析组件标签，找到MyComponent组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>事件绑定</li></ol><h4 id="回顾一下原生事件绑定"><a href="#回顾一下原生事件绑定" class="headerlink" title="回顾一下原生事件绑定"></a>回顾一下原生事件绑定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法一</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法二</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn2.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法三</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;按钮3被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>react 事件绑定</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> that;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>(props);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;; <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">      that = <span class="variable language_">this</span>; <span class="comment">// 声明一个that，让下面的也可以用这个this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 解决this指向undefined问题</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>); <span class="comment">// bind返回一个新函数，手动执行；新函数里的this变为Weather的实例对象，然后把函数放在实例自身，给函数起了个名字叫changeWeather，因此实例对象自身Weather，就多了一个方法叫changeWeather</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1&gt;今天天气&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;  有const声明就不需要写的那么麻烦了</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1 id=&quot;title&quot;&gt;今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return &lt;h1 onClick=&#123;demo()&#125; &gt;今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt; //直接在里面写onclick,demo不能用字符串形式，demo用函数的形式写出</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          今天天气&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;！</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      ); <span class="comment">// 但是加了括号表示立即执行，所以要去掉</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// changeWeather放在哪儿？放在weather的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过weather实例调用changeWeather时，changeWeather中的this就是Weather的实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以不需要that</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发现this，undefined，为什么this会丢失? 举一个原生例子 看下一个js</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以这里相当于直接调用，changeWeather是作为onClick的回调，不是通过实例调用又因为类中方法默认开启局部的严格模式</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">render</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 第一种 不建议要先document.getElementById(&#x27;title&#x27;)*/</span></span></span><br><span class="line"><span class="language-javascript">  title.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;标题被点击&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*第二种 不建议要先document.getElementById(&#x27;title&#x27;)*/</span></span></span><br><span class="line"><span class="language-javascript">  title.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;标题被点击&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*第三种 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 又需要将这个定义在类中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处修改isHot的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(isHot); <span class="comment">// 这样会报错，因为state undefined，demo函数不在weather类中，根本没有关系的两个东西</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">state</span>.<span class="property">isHot</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// study方法放在原型对象上，供实例对象使用</span></span><br><span class="line">    <span class="comment">// 通过Person实例调用study时，study中的this就是Person实例</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">19</span>);</span><br><span class="line">p1.<span class="title function_">study</span>(); <span class="comment">// 通过实例调用study对象</span></span><br><span class="line"><span class="keyword">const</span> x = p1.<span class="property">study</span>;</span><br><span class="line"><span class="title function_">x</span>(); <span class="comment">/* 这个时候study中的this打印为undefined，因为这个属于直接调用，上面p1.study() 是实例调用；</span></span><br><span class="line"><span class="comment">        类中的定义的方法，全部局部自动开启严格模式</span></span><br><span class="line"><span class="comment">        比如:</span></span><br><span class="line"><span class="comment">        function demo() &#123;</span></span><br><span class="line"><span class="comment">            console.log(this) // window</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        demo()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        function demo() &#123;</span></span><br><span class="line"><span class="comment">            &#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">            console.log(this) // undefined</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        demo</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><ol start="3"><li>setState 应用</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 构造器调用几次————1 次</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(constructor)</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">state</span>=&#123;<span class="attr">isHot</span>:<span class="literal">true</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 解决this指向undefined问题</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>) <span class="comment">// bind返回一个新函数，手动执行；新函数里的this变为Weather的实例对象，然后把函数放在实例自身，给函数起了个名字叫changeWeather，因此实例对象自身Weather，就多了一个方法叫changeWeather</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// render 调用几次———— 1+n次 1是初始化那次，n是状态更新的次数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(render)</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span> &gt;</span>今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！,&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">// 但是加了括号表示立即执行，所以要去掉</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// changeWeather 调用几次———— 点几次调用几次</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(render)</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 获取原来的isHot值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 严重注意状态必须通过setState进行更新,且合并（更改isHot,后面的wind不会变）</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 严重注意，状态不可直接更改，要借助内置API直接更改</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// this.state.isHot = !isHot</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>) <span class="comment">// 这样两行改了，控制台点击true，false进行切换，但是react不认可，是单向数据流</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>setState 函数<ul><li>无返回值</li><li>参数 1:<ul><li>是一个 Object,修改后 state 的值是 setState 传入 Object 和原 state 的值浅合并的值</li><li>或一个 updater 函数<code>(state,props) =&gt; nextState</code>,updater 函数有助于多次对同一个 state 的值累加修改</li></ul></li><li>参数 2:回调函数，在 setState 生效后调用（时机同 componentDidUpdate）</li><li>setState 生效是异步的</li></ul></li></ul><ol start="4"><li>上述代码精简方式<br>类中可以直接写赋值语句不需要 let 什么的声明，直接 a&#x3D;1<br>所以</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以不写构造器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 想给Weather实例对象身上都添加一个state属性，那就拿出来直接赋值</span></span></span><br><span class="line"><span class="language-javascript">    state = &#123; <span class="attr">isHot</span>: <span class="literal">true</span>, <span class="attr">wind</span>: <span class="string">&quot;微风&quot;</span> &#125;; <span class="comment">// 初始化状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 读取状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          今天天气&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;！,&#123;wind&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      ); <span class="comment">// 但是加了括号表示立即执行，所以要去掉</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 自定义方法（赋值语句+箭头函数）</span></span></span><br><span class="line"><span class="language-javascript">    changeWeather = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 箭头函数没有自己的this，找外层函数的this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isHot</span>: !isHot &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Weather的实例对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【AIA】</p><ul><li>state 是组件对象最重要的属性，值是对象（可以包含多个 key-value 的组合）</li><li>组件被称为“状态机”，像生活中的红绿灯，通过更新组件的 state 来更新对应的页面显示（重新渲染组件）<br>[注意]</li></ul><ol><li>组件中 render 方法中的 this 为组件的实例对象</li><li>组件自定义方法中的 this 都是 undefined，如何解决？<br>a. 强制绑定 this:通过函数对象的 bind()<br>b. 箭头函数</li><li>状态数据不能直接修改或更新，必须通过 setState 方法修改，不能直接赋值，setState 后会引发 render</li><li>this.state 是一个 Object 类型&#x2F;null，不能是简单类型</li><li>state 在构造方法内部初始化或在类的成员变量声明处初始化</li></ol><h3 id="组件的第二个属性————props"><a href="#组件的第二个属性————props" class="headerlink" title="组件的第二个属性————props"></a>组件的第二个属性————props</h3><ul><li>函数组件的第一个参数是 props（它接收的属性，是一个 object）</li><li>类组件的 props 用 this.props 接收</li><li>父传子：用属性传递数据</li><li>子传父：用回调函数传递数据</li><li>children 属性指 react 元素之间的子元素，可以是一个元素，字符串或者数组<br>类里面的 this 指向组件的实例对象，里面有一个 props 空对象</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// &lt;ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//     &lt;li&gt;姓名:&#123;this.props.name&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//     &lt;li&gt;性别:&#123;this.props.sex&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//     &lt;li&gt;年龄:&#123;this.props.age&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// &lt;/ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 上面声明后可不需要写this.props</span></span></span><br><span class="line"><span class="language-javascript">              <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                  <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">          )</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>)) <span class="comment">// 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 但是上述写法太麻烦了，所以</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p = &#123;name=<span class="string">&quot;tom&quot;</span> sex=<span class="string">&quot;男&quot;</span> age=<span class="string">&quot;18&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#123;p.name&#125;</span> <span class="attr">sex</span>=<span class="string">&#123;p.sex&#125;</span> <span class="attr">age</span>=<span class="string">&#123;p.age&#125;</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 这样还是太麻烦</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...p) <span class="comment">// 报错，仅仅适用于标签属性的传递，别的地方都不行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="回顾一下扩展运算符"><a href="#回顾一下扩展运算符" class="headerlink" title="回顾一下扩展运算符"></a>回顾一下扩展运算符</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr1) <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"><span class="comment">// 连接数组</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3) <span class="comment">// [1,2,3,4,5,2,4,6,8,10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a+b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">// 若有很多数字或者数字不固定</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(numbers) <span class="comment">// [1,2] 是个数组，...可以批量都接收到</span></span><br><span class="line">    <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preValue,currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 函数体</span></span><br><span class="line">        <span class="keyword">return</span> preValue + currentValue <span class="comment">// 结果为3，1+2</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 原生中与react不同，react中babel和引入的react，可以直接用根本没有触发什么赋值对象</span></span><br><span class="line"> <span class="comment">// 构造字面量对象时使用展开语法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...person) <span class="comment">// Found non-callable @@iterator at 展开运算符 意思是 对象类型没有接口 就是说展开运算符不能展开一个对象</span></span><br><span class="line"><span class="comment">// 但如果</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;...person&#125; <span class="comment">// 表示赋值一个对象</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;jerry&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2) <span class="comment">// &#123;name:&#x27;tom&#x27;,age:&#x27;18&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person) <span class="comment">// &#123;name:&#x27;jerry&#x27;,age:&#x27;18&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 合并</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;...person,<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">address</span>:<span class="string">&#x27;地球&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person3) <span class="comment">// &#123;name:&#x27;jack&#x27;,age:&#x27;18&#x27;,address:&#x27;地球&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="props-有一些限制"><a href="#props-有一些限制" class="headerlink" title="props 有一些限制"></a>props 有一些限制</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">propsTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// props属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// name:&#x27;必传，字符串&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// name:React.propTypes.string // React.propTypes 这是react内置对象，react15用，但react16被弃用了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所以引入依赖包prop-types .js ,引入后多了一个对象PropType</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">// 加了isRequired表示名字必须传</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">// 限制性别为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>, <span class="comment">// 限制年龄为数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">speak</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>, <span class="comment">// 不能写function，会报错必须是一个function但得到了undefined，所以写func,function是个关键字</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 需求希望年龄+1, 又不改真实年龄结果变成年龄：191，需要改变基本数据类型，把字符串变成number</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  ReactDOM.render(&lt;Person name=&quot;tom&quot; sex=&quot;男&quot; age=&quot;18&quot; /&gt;,document.getELementById(&#x27;test&#x27;)) // 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变为</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> /&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我在讲话&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>姓名必须指定，且为字符串类型</li><li>性别为字符串类型，如果性别没有指定，默认为男</li><li>年龄为字符串类型，且为数字类型，默认值为 18</li></ul><h4 id="props-的简写方式"><a href="#props-的简写方式" class="headerlink" title="props 的简写方式"></a>props 的简写方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">static</span> propsTypes = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">speak</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">static</span> defaultProps = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; name, age, sex &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 需求希望年龄+1, 又不改真实年龄结果变成年龄：191，需要改变基本数据类型，把字符串变成number</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  ReactDOM.render(&lt;Person name=&quot;tom&quot; sex=&quot;男&quot; age=&quot;18&quot; /&gt;,document.getELementById(&#x27;test&#x27;)) // 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变为</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;</span> /&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我在讲话&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">super</span>(props) <span class="comment">// 这个不用super接props也可以获取到，加了super与不加的区别在于this.props</span></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>) <span class="comment">// 打印实例自身的props，可以拿到；若没有super，undefined</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 总结：若不省略构造器，构造器是否接受props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">static</span> propsTypes = &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">speak</span>:<span class="title class_">PropTypes</span>.<span class="property">func</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">static</span> defaultProps = &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">age</span>:<span class="number">18</span> <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">               <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">               <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">           )</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="函数组件使用-props"><a href="#函数组件使用-props" class="headerlink" title="函数组件使用 props"></a>函数组件使用 props</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; name, age, sex &#125; = props;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄:&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 限制写在外面，它不像类式组件有static属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">propsTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// props属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">// 加了isRequired表示名字必须传</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">// 限制性别为字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>, <span class="comment">// 限制年龄为数值</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 指定默认标签属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>, <span class="comment">// sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 年龄默认值为18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 渲染到组件页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> /&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>和 props 的区别：state 是内部的状态，由自身维护（没必要让父元素管理属性），可以修改；props 是组件外部传入进来的，组件不可以修改 props 上的值</li><li>react 不会自动引入 prop-types 要 yarn add prop-types<br>import PropTypes from ‘props-types’</li></ul><h3 id="组件的第三个属性————ref"><a href="#组件的第三个属性————ref" class="headerlink" title="组件的第三个属性————ref"></a>组件的第三个属性————ref</h3><ul><li>ref 字符串形式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示左侧输入框数据——字符串方法</span></span></span><br><span class="line"><span class="language-javascript">    showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 不需要写的这么麻烦</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const input = document.getElementById(&#x27;input1&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(input.value)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">input1</span>); <span class="comment">// 这个是真实DOM了，所以可以</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span>.<span class="property">refs</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input1.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input2 &#125; = <span class="variable language_">this</span>.<span class="property">refs</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input2.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ref回调方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示左侧输入框数据</span></span></span><br><span class="line"><span class="language-javascript">    showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 不需要写的这么麻烦</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const input = document.getElementById(&#x27;input1&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(input.value)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">input1</span>); <span class="comment">// 这个是真实DOM了，所以可以</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input1.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input2 &#125; = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input2.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符串类型的ref不太推荐，存在效率问题，写多了效率不高</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#123;/* &lt;input type=&quot;text&quot; id=&quot;input1&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt; 可以不用写id，换成ref */&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;input type=&quot;text&quot; ref=&quot;input1&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧数据&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &lt;input type=&quot;text&quot; onBlur=&#123;this.showData2&#125; ref=&quot;input2&quot; placeholder=&quot;诗句焦点提示数据&quot;/&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#123;/* 只要写ref,就会放到Demo实例对象refs中 */&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;(a)</span>=&gt;</span> &#123;console.log(a)&#125; &#125;placeholder=&quot;点击按钮提示数据&quot;/&gt; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* 这个a,打印出来后是 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            ref属性当前所在的节点 */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;(a)</span>=&gt;</span> &#123;this.input1 = a&#125; &#125;placeholder=&quot;点击按钮提示数据&quot;/&gt; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* 把a这个节点放在组件实例自身上 */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">ref</span>=<span class="string">&#123;(currentNode)</span> =&gt;</span> (this.input1 = currentNode)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            placeholder=&quot;点击按钮提示数据&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (this.input2 = c)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            placeholder=&quot;失去焦点提示数据&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>回调 ref 中执行次数问题，回调函数形式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    showInfo = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; input1 &#125; = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(input1.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    changeWeather = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取原来的状态</span></span></span><br><span class="line"><span class="language-javascript">      state = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 更新状态</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isHot</span>: !isHot &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    saveInput = <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">input1</span> = c;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@&quot;</span>, c);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; isHot &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;isHot ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input1 = c;console.log(&#x27;@&#x27;,c)&#125;/&gt; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* 解决第一次传入参数null，第二次会传入参数DOM元素 通过ref回调函数定义成class的绑定函数方式*/&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showInfo&#125;</span>&gt;</span>点我提示输入的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>点我切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            如果ref回调函数是以内联函数的方式定义的，在更新的过程中会被执行两次，第一次传入参数null，第二次会传入参数DOM元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            这是因为在每次渲染时会创建一个新的函数实例，所以react清空旧的ref并且设置新的</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            通过ref回调函数定义成class的绑定函数的方式可以避免上述问题</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>createRef 形式</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点，但是该容器是专人专用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">    myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span></span><br><span class="line"><span class="language-javascript">    myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示左侧输入框数据</span></span></span><br><span class="line"><span class="language-javascript">    showData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>); <span class="comment">// &#123;currrent:input&#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>); <span class="comment">// 拿的是这个input节点 &lt;input type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>); <span class="comment">// input框输入什么，这里显示什么</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 展示右侧输入框数据</span></span></span><br><span class="line"><span class="language-javascript">    showData2 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>); <span class="comment">// input框输入什么，这里显示什么</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* input被存在this.myRef中 */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">ref</span>=<span class="string">&#123;this.myRef2&#125;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">          /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="react-中的事件处理"><a href="#react-中的事件处理" class="headerlink" title="react 中的事件处理"></a>react 中的事件处理</h2><ol><li>通过 onXXX 属性指定事件处理函数（注意大小写）</li></ol><ul><li>react 使用的是自定义（合成）事件，而不是使用的原生 DOM 事件————为了更好的兼容</li><li>react 中事件是通过事件委托方式处理的（委托给组件最外层元素）————为了高效</li></ul><ol start="2"><li>通过 event.target 得到发生事件的 DOM 元素（不要过度使用 Refs,可以用这个代替）</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">showData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">&#125;;</span><br><span class="line">showData = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 但像myref,在上述代码input中无法省略，因为这个</span></span><br></pre></td></tr></table></figure><h3 id="受控组件，非受控组件"><a href="#受控组件，非受控组件" class="headerlink" title="受控组件，非受控组件"></a>受控组件，非受控组件</h3><ul><li>非受控组件<br>通过手动操作 dom 方式获取文本框的值，文本框状态不受 react 组件的 state 中状态控制，直接通过原生 dom 获取输入框的值</li></ul><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li>导入 createRef 函数</li><li>调用 createRef 函数，创建一个 ref 对象，存储到名为 msgRef 的实例属性中</li><li>为 input 添加 ref 属性，只为 msgRef</li><li>在按钮的事件处理程序中，通过 msgRef.current 即可拿到 input 对应的 dom 元素，而其中 msg.current.value 拿到的就是文本框的值</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 这个实例属性可以自定义</span></span><br><span class="line">  msgRef = <span class="title function_">createyRef</span>();</span><br><span class="line">  getValue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过msgRef获取input value值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msgRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.msgRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getValue&#125;</span>&gt;</span>点击获取输入框的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这并不是 react 特有的行为，这其实与 javascript 函数工作原理有关。通常情况下，如果你没有在方法后面添加(),例如 onClick&#x3D;{this.handleClick},你应为这个方法绑定 this</p><ul><li>受控组件<br>input 框自己的状态被 react 组件控制<br>受控组件就是说可以被 react 动态控制的组件</li></ul><h4 id="实现步骤：-1"><a href="#实现步骤：-1" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li>在组件的 state 中声明一个组件的状态数据</li><li>将状态数据设置为 input 标签元素的 value 属性的值</li><li>为 input 添加 onchange 事件</li><li>在事件处理程序中，通过事件对象 e 获取到当前文本框的值（即用户当前输入的值）</li><li>调用 setState 方法，将文本框的值作为 state 状态的最新值</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 声明一个用来控制input value属性的react组件自己的状态</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;this is a message&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 回调函数</span></span><br><span class="line">  inputChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;change事件触发了&quot;</span>, e);</span><br><span class="line">    <span class="comment">// 4. 需要在这里拿到输入框最新的值 交给state中的message</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// 2. 给input框的value属性绑定 react state</span></span><br><span class="line">      <span class="comment">// 3. 给input框绑定一个change事件 为了拿到当前输入框中的数据 （onchange指定事件回调）</span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;this.state.message&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化上述代码"><a href="#优化上述代码" class="headerlink" title="优化上述代码"></a>优化上述代码</h4><p>若有很多个 input，比如用户名，密码等等，总不能绑定一个又一个 onchange 事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 声明一个用来控制input value属性的react组件自己的状态</span></span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数</span></span><br><span class="line">    saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(dataType)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">// 把saveFormData返回值返回的函数交给onchange作为回调</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="comment">// dataType:e.target.value // 这样写是往state中放了一个新的Key,在用户名输入的内容，会出现在dataType这个key后面；压根就没有读取</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 需要读取变量,变量用[]</span></span><br><span class="line">                [dataType]:e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表单提交的回调</span></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>() <span class="comment">// 阻止表单默认提交</span></span><br><span class="line">        <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">`用户名是<span class="subst">$&#123;username&#125;</span>`</span>,密码是$&#123;password&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span></span><br><span class="line"><span class="language-xml">            密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高阶函数和函数柯里化"><a href="#高阶函数和函数柯里化" class="headerlink" title="高阶函数和函数柯里化"></a>高阶函数和函数柯里化</h4><ol><li>上述 saveFormData 这就是高阶函数<br>高阶函数：<br>如果一个函数符合下面两个规范中的任何一个，那该函数就是高阶函数 1. 若 A 函数接收的参数是一个函数，那么 A 就可以称之为高阶函数 2. 若 A 函数调用的返回值依然是一个函数，那么 A 就可以称之为高阶函数<br>常见的高阶函数：<br>promise、setTimeout、arr.map()等等</li><li>函数柯里化<br>通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure><h4 id="不用柯里化实现"><a href="#不用柯里化实现" class="headerlink" title="不用柯里化实现"></a>不用柯里化实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  saveFormData = (dataType,value) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     this.setState(&#123;[dataType]:value&#125;)</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// 精简代码</span></span><br><span class="line"> saveFormData = <span class="function">(<span class="params">dataType,e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">//    &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span></span><br><span class="line">    <span class="comment">//         用户名&lt;input type=&quot;text&quot;  onChange=&#123;(e) =&gt; &#123;this.saveFormData(&#x27;username&#x27;,e.target.value)&#125;&#125;/&gt;</span></span><br><span class="line">    <span class="comment">//         &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span></span><br><span class="line">    <span class="comment">//         密码&lt;input type=&quot;text&quot;  onChange=&#123;(e) =&gt; &#123;this.saveFormData(&#x27;password&#x27;,e.target.value)&#125;&#125;/&gt;</span></span><br><span class="line">    <span class="comment">//     &lt;/form&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;this.saveFormData(&#x27;username&#x27;,e)&#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span></span><br><span class="line"><span class="language-xml">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;this.saveFormData(&#x27;password&#x27;,e)&#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数组件与类组件区别"><a href="#函数组件与类组件区别" class="headerlink" title="函数组件与类组件区别"></a>函数组件与类组件区别</h2><ul><li>类组件有状态，函数组件没有</li><li>类组件有生命周期，函数组件没有</li><li>构造方法<code>constructor(props)</code></li><li>如果类组件有构造方法，必须在构造方法中写<code>super(props)</code></li><li>this.props 访问属性，this.state 访问状态</li></ul><h2 id="react-生命周期"><a href="#react-生命周期" class="headerlink" title="react 生命周期"></a>react 生命周期</h2><p>生命周期回调函数 又叫 生命周期钩子函数 生命周期钩子 生命周期函数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 要求2秒完全可见到消失</span></span></span><br><span class="line"><span class="language-javascript">    state = &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">    death = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 卸载组件前要先清除定时器，拿到定时器的id</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 卸载组件回调</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// ReactDOM.unmountComponent() // 若有很多个容器不能用这个</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件挂载完毕 后调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这个不需要像death一样，写一个箭头函数，因为它与render是兄弟，后期是通过Life的实例对象 .调用的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取原状态,这里不能用const，const声明变量不可修改</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> &#123; opacity &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 减小0.1</span></span></span><br><span class="line"><span class="language-javascript">        opacity -= <span class="number">0.1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (opacity &lt;= <span class="number">0</span>) opacity = <span class="number">1</span>; <span class="comment">// 为什么是&lt;=0因为在js中0.1+0.2不一定等于0.3</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置新的透明度</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; opacity &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组件将要卸载</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// componentWillUnmount() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     这样清楚定时器也可以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     clearInterval(this.timer)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// render调用的时机：初始化渲染，状态更新之后</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这样写代码直接卡死了，cpu一路飙升；因为设置更新状态，一更新状态就调render， 引发无限递归，多次调用render</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// setInterval(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     // 1. 获取原状态,这里不能用const，const声明变量不可修改</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     let &#123;opacity&#125; = this.state</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     // 减小0.1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     opacity -= 0.1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     if(opacity &lt;=0) opacity = 1 // 为什么是&lt;=0因为在js中0.1+0.2不一定等于0.3</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     // 设置新的透明度</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     this.setState (&#123;opacity&#125;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;,200)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &#123;/* h2中写style=&#123;&#123;opacity:this.state.opacity&#125;&#125; */&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>只要学不死，就往死里学<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>不活了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Life</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>组件是否应该被更新 shouldComponentUpdate<br>true 可以更新<br>false 不可以更新<br>不写这个钩子，默认 true</li><li>forceUpdate 强制更新<br>可以绕过 shouldComponentUpdate，直接进行更新</li></ul><h3 id="父组件-render"><a href="#父组件-render" class="headerlink" title="父组件 render"></a>父组件 render</h3><p>componentWillReceiveProps 这个第一次传的不算，以后传的才算</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">carName</span>: <span class="string">&quot;宝马&quot;</span> &#125;;</span><br><span class="line">  changeCar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">carName</span>: <span class="string">&quot;奔驰&quot;</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;this.state.carName&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentWillReceiveProps</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B---componentWillReceiveProps&quot;</span>, props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是B组件，接收的车是:&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[AIA]<br>旧版本</p><ol><li>初始化阶段: 由 ReactDoM.render()触发—初次渲染<br>constructor()<br>componentWillMount()<br>render()</li><li>componentDidMount()更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发<br>shouldComponentUpdate()componentwillUpdate()<br>render()<br>componentDidUpdate()</li><li>卸载组件:由 ReactDOM.unmountComponentAtNode()触发 componentwillUnmount()<br>新生命周期<br>去掉三个钩子，加了两个钩子<br>componentWillMount() componentwillUpdate() componentwillUnmount()</li></ol><ul><li>getDerivedStateFromProps:若 state 的值任何时候都取决于 props，可以使用</li><li>getSnapShotBeforeUpdate(preProps,preState,snapValue) 在更新前获取快照<br>在页面调完时拿到数据在处理时使用，此生命周期的任何返回值将作为参数传递给 componentDidUpdate</li></ul><p>[AIA]</p><ol><li>初始化阶段: 由 ReactDom.render()触发—初次渲染<br>constructor() 创建组件时最先执行，初始化的时候只执行一次<br>getDerivedStateFromProps<br>render() 每次组件渲染都会触发，渲染 UI,不能在里面调用 setState<br>componentDidMount()&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 常用 组件挂载完成后执行，初始化的时候执行一次<br>一般在这个钩子中做一些初始化的事，例如: 开启定时器、发送网络请求、订阅消息</li><li>更新阶段:由组件内部 this.setState()或父组件重新 render 触发<br>getDerivedStateFromProps<br>shouldComponentUpdate()<br>render()<br>getSnapshotBeforeUpdate()<br>componentDidUpdate()</li><li>卸载组件:由 ReactDoM.unmountComponentAtNode()触发<br>componentWillUnmount() &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 常用<br>一般在这个钩子中做一些收尾的事，例如: 关闭定时器、取消订阅消息<br><a href="jsx%E4%B8%AD%E7%9A%84this%EF%BC%8C%E5%9C%A8javascript%E4%B8%AD%EF%BC%8Cclass%E6%96%B9%E6%B3%95%E9%BB%98%E8%AE%A4%E4%B8%8D%E4%BC%9A%E7%BB%91%E5%AE%9Athis%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%BF%98%E8%AE%B0%E7%BB%91%E5%AE%9Athis.handleClick%E5%B9%B6%E6%8A%8A%E5%AE%83%E4%BC%A0%E5%85%A5%E4%BA%86onClick%EF%BC%8C%E5%BD%93%E4%BD%A0%E8%B0%83%E7%94%A8%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8Cthis%E7%9A%84%E5%80%BC%E4%B8%BAundefined">Tip</a></li><li>只有类组件才有生命周期</li><li>state 中尽量保持精简</li><li>我们需要的数据状态 不和视图绑定 定义成一个普通的实例属性就可以了</li><li>如果数据是组件的状态需要去影响视图 定义到 state</li></ol><h2 id="Diff-算法"><a href="#Diff-算法" class="headerlink" title="Diff 算法"></a>Diff 算法</h2><ul><li>最小粒度是标签或者节点</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">persons</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;小张&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;小李&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; persons &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> p = &#123; <span class="attr">id</span>: persons.<span class="property">length</span> + <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;小王&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">persons</span>: [p, ...persons] &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.persons.map((personObj) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;personObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;personObj.name&#125;---&#123;personObj.age&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getELementById</span>(<span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="创建-react-项目"><a href="#创建-react-项目" class="headerlink" title="创建 react 项目"></a>创建 react 项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npx create-react-app 项目名</span><br><span class="line">$ cd 项目名</span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><h2 id="react-脚手架"><a href="#react-脚手架" class="headerlink" title="react 脚手架"></a>react 脚手架</h2><ul><li>借助 webpack 搭建</li></ul><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><ul><li>index.html</li></ul><ol><li><meta name="viewport" content="width=device-width,initial-scale=1"/> 开启理想视口，用于做移动端适配</li><li><link rel="apple-touch-icon" href=""/> 用于指定网页添加到手机主屏幕后的图标，只支持苹果手机</li></ol><ul><li>robots.txt 爬虫文件，爬虫协议，什么可以爬什么不可以爬</li></ul><h2 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h2><p>ReactDOM 库的作用：把 React 元素挂载到一个 dom 元素上</p><p>函数形式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>) <span class="comment">// 挂载点</span></span><br><span class="line">);</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ul><li>JSX 是 React.createElement 的语法糖</li><li>React.createElement 用法</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    string|element</span><br><span class="line">    [propsObject]</span><br><span class="line">    [children...]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>渲染结果应该返回单个元素（element,或数组，或 null）</li><li><code>&lt;React.Fragment&gt;</code>是 react 代码片段对象，用它作为节点不会产生多余的 html 代码输出，简写<code>&lt;&gt;...&lt;/&gt;</code></li></ul><p>JSX 中的表达式</p><ul><li>使用<code>&#123;...&#125;</code>插入</li><li>表达式只能是单个语句，不能执行多个语句</li><li>JSX 放在 children 部分的表达式不能是 Object 类型</li><li>条件渲染用三目运算符表达式或<code>条件 &amp;&amp; 表达式</code>方式</li><li>注释用<code>&#123;/**/&#125;</code></li><li>组件名称必须首字母大写(不是首字母大写会被认为是一般 html tag)</li><li>组件元素标签书写必须闭合（符合 XML 标准）</li><li>html 元素中的属性如果有两个单词组成应该用驼峰</li><li>特殊属性 class 变为 className，for 变为 htmlFor,style 的属性不能是字符串而必须是 object</li><li>表达式中的特殊字符如果在内容位置不希望被转义，可以用<code>dangerouslySetInnerHTML=两个大括号包着__html:&#39;...&#39;</code>方式直接设置 innerHTML</li><li>渲染数组：用 map 方法，注意转换的 JSX 元素要有 key，用唯一值标识元素，目的优化渲染效率</li></ul><h2 id="样式模块化"><a href="#样式模块化" class="headerlink" title="样式模块化"></a>样式模块化</h2><p>把.css 变为.module.css</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.jsx中引入</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&quot;./index.module.css&quot;</span>;</span><br><span class="line"><span class="comment">// hello是随便起的名字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;hello.title&#125;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      <span class="comment">// title是在index.module.css设置的属性</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h4><p>键盘事件 onKeyUp<br>keyCode &#x3D;&#x3D; 13 已经被弃用可以用 event.key &#x3D;&#x3D; ‘Enter’</p><h2 id="父传子，子传父"><a href="#父传子，子传父" class="headerlink" title="父传子，子传父"></a>父传子，子传父</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>用属性传递数据，props</p><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>用回调函数传递数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">    addTodo = <span class="function">(<span class="params">todoObj</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取原todos</span></span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="comment">// 追加一个todo</span></span><br><span class="line">        <span class="keyword">const</span> newTodos = [todoObj,...todos]</span><br><span class="line">        <span class="comment">// 更新状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">setState</span> = (&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Header</span> <span class="attr">addTodo</span>=<span class="string">&#123;this.addTodo&#125;/</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子组件</span></span><br><span class="line">    <span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line">    handleKeyUp = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 解构赋值获取KeyCode,target</span></span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="title class_">KeyCode</span>,target&#125; = event</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否是回车按键</span></span><br><span class="line">        <span class="comment">// if(KeyCode !==13) return</span></span><br><span class="line">        event.<span class="property">key</span> !== <span class="string">&#x27;Enter&#x27;</span> <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加todo的名字不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(target.<span class="property">value</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;输入不能为空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备一个todo对象</span></span><br><span class="line">        <span class="keyword">const</span> todoObj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),<span class="attr">name</span>:target.<span class="property">value</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        <span class="comment">// id要设置唯一值，可以用UUID</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            安装 yarn add nanoid</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 将todoObj传递给App</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addTodo</span>(todoObj)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空输入</span></span><br><span class="line">        target.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs</title>
      <link href="/2022/07/27/nodeJS/nodejs/"/>
      <url>/2022/07/27/nodeJS/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="正式学习-node-之前，先铺垫一些基础概念"><a href="#正式学习-node-之前，先铺垫一些基础概念" class="headerlink" title="正式学习 node 之前，先铺垫一些基础概念 ~"></a><strong>正式学习 node 之前，先铺垫一些基础概念 ~</strong></h1><h2 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h2><h3 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h3><ul><li>人机交互部分（UI 界面）</li><li>网络请求部分（Socket）</li><li>JavaScript 引擎部分（解析执行 JavaScript）</li><li>渲染引擎部分（渲染 HTML、CSS 等）</li><li>数据存储部分（cookie、HTML5 中的本地存储 LocalStorage、SessionStorage）</li></ul><h3 id="主流渲染引擎"><a href="#主流渲染引擎" class="headerlink" title="主流渲染引擎"></a>主流渲染引擎</h3><p><strong>介绍</strong></p><ol><li>渲染引擎 又叫 排版引擎 或 浏览器内核。</li><li>主流的 渲染引擎 有</li></ol><ul><li>Chrome 浏览器: Blink 引擎（WebKit 的一个分支）。</li><li>Safari 浏览器: WebKit 引擎，windows 版本 2008 年 3 月 18 日推出正式版，但苹果已于 2012 年 7 月 25 日停止开发 Windows 版的 Safari。</li><li>FireFox 浏览器: Gecko 引擎。</li><li>Opera 浏览器: Blink 引擎(早期版使用 Presto 引擎）。</li><li>Internet Explorer 浏览器: Trident 引擎。</li><li>Microsoft Edge 浏览器: EdgeHTML 引擎（Trident 的一个分支）。</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>解析 HTML 构建 Dom 树（Document Object Model，文档对象模型），DOM 是 W3C 组织推荐的处理可扩展置标语言的标准编程接口。</li><li>解析 CSS 构建 CSS 规则树</li><li>构建渲染树，渲染树并不等同于 Dom 树，因为像 head、body、meta、html 标签 或 display: none 这样的元素就没有必要放到渲染树中了，但是它们在 Dom 树中。</li><li>对渲染树进行布局，定位坐标和大小、确定是否换行、确定 position、overflow、z-index 等等，这个过程叫”layout” 或 “reflow”。</li><li>绘制渲染树，调用操作系统底层 API 进行绘图操作。</li></ol><p><strong>渲染引擎工作原理示意图</strong></p><p><img src="/img/md/nodejs1.png"></p><p><strong>WebKit 工作原理（Chrome、Safari、Opera）</strong></p><p><img src="/img/md/nodejs2.png"></p><p><strong>Gecko 工作原理（FireFox）</strong></p><p><img src="/img/md/nodejs3.jpg"></p><h3 id="浏览器的-reflow-或-layout-过程"><a href="#浏览器的-reflow-或-layout-过程" class="headerlink" title="浏览器的 reflow 或 layout 过程"></a>浏览器的 reflow 或 layout 过程</h3><p><a href="https://www.youtube.com/watch?v=ZTnIxIA5KGw">https://www.youtube.com/watch?v=ZTnIxIA5KGw</a></p><h3 id="打开-Chrome-的-Rendering-功能"><a href="#打开-Chrome-的-Rendering-功能" class="headerlink" title="打开 Chrome 的 Rendering 功能"></a>打开 Chrome 的 Rendering 功能</h3><p>第一步：</p><p><img src="/img/md/nodejs4.png"></p><p>第二步：</p><p><img src="/img/md/nodejs5.png"></p><h3 id="浏览器访问网站过程"><a href="#浏览器访问网站过程" class="headerlink" title="浏览器访问网站过程"></a>浏览器访问网站过程</h3><ol><li>在浏览器地址栏中输入网址。</li><li>浏览器通过用户在地址栏中输入的 URL 构建 HTTP 请求报文。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> / <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: www.<span class="property">taobao</span>.<span class="property">com</span>  <span class="number">134.123</span><span class="number">.132</span><span class="number">.23</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">Upgrade</span>-<span class="title class_">Insecure</span>-<span class="title class_">Requests</span>: <span class="number">1</span></span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Mozilla</span>/<span class="number">5.0</span> (<span class="title class_">Windows</span> <span class="variable constant_">NT</span> <span class="number">10.0</span>; <span class="title class_">Win64</span>; x64) <span class="title class_">AppleWebKit</span>/<span class="number">537.36</span> (<span class="variable constant_">KHTML</span>, like <span class="title class_">Gecko</span>) <span class="title class_">Chrome</span>/<span class="number">57.0</span><span class="number">.2987</span><span class="number">.133</span> <span class="title class_">Safari</span>/<span class="number">537.36</span></span><br><span class="line"><span class="title class_">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, sdch, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</span></span><br><span class="line"><span class="comment">Cookie: l=Ag0NWp9E8X4hgaGEtIBhOmKxnSOH6kG8; isg=AkZGLTL-Yr9tHDZbgd5bsn4Rlzwg5IphaK-1BzBvMmlEM-ZNmDfacSyDfdgF; thw=cn</span></span><br></pre></td></tr></table></figure><ol start="3"><li>浏览器发起 DNS（寻址）解析请求，将域名转换为 IP 地址。</li></ol><p><img src="/img/md/nodejs6.png"></p><ol start="4"><li>浏览器将请求报文发送给服务器。</li><li>服务器接收请求报文（request），并解析。</li><li>服务器处理用户请求，并将处理结果封装成 HTTP 响应报文（response）。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="variable constant_">OK</span></span><br><span class="line"><span class="title class_">Server</span>: <span class="title class_">Tengine</span></span><br><span class="line"><span class="title class_">Date</span>: <span class="title class_">Thu</span>, <span class="number">13</span> <span class="title class_">Apr</span> <span class="number">2017</span> <span class="number">02</span>:<span class="number">24</span>:<span class="number">25</span> <span class="variable constant_">GMT</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/html; charset=utf-<span class="number">8</span></span><br><span class="line"><span class="title class_">Transfer</span>-<span class="title class_">Encoding</span>: chunked</span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">Vary</span>: <span class="title class_">Accept</span>-<span class="title class_">Encoding</span></span><br><span class="line"><span class="title class_">Vary</span>: <span class="title class_">Ali</span>-<span class="title class_">Detector</span>-<span class="title class_">Type</span>, X-<span class="variable constant_">CIP</span>-<span class="variable constant_">PT</span></span><br><span class="line"><span class="title class_">Cache</span>-<span class="title class_">Control</span>: max-age=<span class="number">0</span>, s-maxage=<span class="number">300</span></span><br><span class="line"><span class="title class_">Via</span>: cache8.<span class="property">l2cm10</span>-<span class="number">1</span>[<span class="number">172</span>,<span class="number">200</span>-<span class="number">0</span>,C], cache13.<span class="property">l2cm10</span>-<span class="number">1</span>[<span class="number">122</span>,<span class="number">0</span>], cache3.<span class="property">cn206</span>[<span class="number">0</span>,<span class="number">200</span>-<span class="number">0</span>,H], cache6.<span class="property">cn206</span>[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="title class_">Age</span>: <span class="number">293</span></span><br><span class="line">X-<span class="title class_">Cache</span>: <span class="variable constant_">HIT</span> <span class="variable constant_">TCP_MEM_HIT</span> <span class="attr">dirn</span>:-<span class="number">2</span>:-<span class="number">2</span></span><br><span class="line">X-<span class="title class_">Swift</span>-<span class="title class_">SaveTime</span>: <span class="title class_">Thu</span>, <span class="number">13</span> <span class="title class_">Apr</span> <span class="number">2017</span> <span class="number">02</span>:<span class="number">19</span>:<span class="number">32</span> <span class="variable constant_">GMT</span></span><br><span class="line">X-<span class="title class_">Swift</span>-<span class="title class_">CacheTime</span>: <span class="number">300</span></span><br><span class="line"><span class="title class_">Timing</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: *</span><br><span class="line"><span class="title class_">EagleId</span>: 9903e7e514920502659594264e</span><br><span class="line"><span class="title class_">Strict</span>-<span class="title class_">Transport</span>-<span class="title class_">Security</span>: max-age=<span class="number">31536000</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Encoding</span>: gzip</span><br><span class="line"></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>淘宝网 - 淘！我喜欢<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;spm-id&quot;</span> <span class="attr">content</span>=<span class="string">&quot;a21bo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;aplus-xplug&quot;</span> <span class="attr">content</span>=<span class="string">&quot;NONE&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">content</span>=<span class="string">&quot;淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">......</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="7"><li>服务器将 HTTP 响应报文发送给浏览器。</li><li>浏览器接收服务器响应的 HTTP 响应报文，并解析。</li><li>浏览器解析 HTML 页面并展示，在解析 HTML 页面时遇到新的资源需要再次发起请求。</li><li>最终浏览器展示出了页面</li></ol><h3 id="HTTP-请求报文和响应报文格式"><a href="#HTTP-请求报文和响应报文格式" class="headerlink" title="HTTP 请求报文和响应报文格式"></a>HTTP 请求报文和响应报文格式</h3><p><img src="/img/md/nodejs7.png"></p><h3 id="DNS-解析过程"><a href="#DNS-解析过程" class="headerlink" title="DNS 解析过程"></a>DNS 解析过程</h3><p><img src="/img/md/nodejs_DNS.gif"></p><h2 id="web-开发本质"><a href="#web-开发本质" class="headerlink" title="web 开发本质"></a>web 开发本质</h2><h3 id="牢记以下三点"><a href="#牢记以下三点" class="headerlink" title="牢记以下三点"></a>牢记以下三点</h3><ol><li>请求，客户端发起请求。</li><li>处理，服务器处理请求。</li><li>响应，服务器将处理结果发送给客户端</li></ol><p>对比一个单机版计算器和 Web 版计算器</p><h3 id="客户端处理响应"><a href="#客户端处理响应" class="headerlink" title="客户端处理响应"></a>客户端处理响应</h3><ul><li>服务器响应完毕后，客户端继续处理：</li><li>浏览器：解析服务器返回的数据</li><li>iOS、Android 客户端，解析服务器返回的数据，并且通过 iOS 或 Android 的 UI 技术实现界面的展示功能</li></ul><h3 id="关于-C-x2F-S（Client-x2F-Server）和-B-x2F-S（Browser-x2F-Server）"><a href="#关于-C-x2F-S（Client-x2F-Server）和-B-x2F-S（Browser-x2F-Server）" class="headerlink" title="关于 C&#x2F;S（Client&#x2F;Server）和 B&#x2F;S（Browser&#x2F;Server）"></a>关于 C&#x2F;S（Client&#x2F;Server）和 B&#x2F;S（Browser&#x2F;Server）</h3><p>C&#x2F;S: 客户端服务器</p><p>B&#x2F;S: 浏览器服务器</p><p><img src="/img/md/nodejs8.png"></p><h1 id="node-js-介绍"><a href="#node-js-介绍" class="headerlink" title="node.js 介绍"></a>node.js 介绍</h1><h2 id="node-js-是什么？"><a href="#node-js-是什么？" class="headerlink" title="node.js 是什么？"></a>node.js 是什么？</h2><ul><li>node.js 是一个开发平台，就像 Java 开发平台、.Net 开发平台、PHP 开发平台、Apple 开发平台一样。<ul><li>何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的 API（SDK：Software Development Kit）</li></ul></li><li>nodejs 平台使用的编程语言是 JavaScript 语言。<ul><li>不支持 window、document、bom 对象。</li></ul></li><li>node.js 平台是基于 Chrome V8 JavaScript 引擎构建。</li><li>基于 node.js 可以开发控制台程序（命令行程序、CLI 程序）、桌面应用程序（GUI）（借助 node-webkit、electron 等框架实现）、Web 应用程序（网站）。</li></ul><p>PHP 开发技术栈: LAMP - Linux Apache MySQL PHP</p><p>node.js 全栈开发技术栈: MEAN - MongoDB Express Angular Node.js</p><h2 id="node-js-有哪些特点？"><a href="#node-js-有哪些特点？" class="headerlink" title="node.js 有哪些特点？"></a>node.js 有哪些特点？</h2><ol><li>事件驱动(当事件被触发时，执行传递过去的回调函数)</li><li>非阻塞 I&#x2F;O 模型（当执行 I&#x2F;O 操作时，不会阻塞线程）<ul><li>Input &#x2F; Output</li></ul></li><li>单线程</li><li>拥有世界最大的开源库生态系统 —— npm。</li></ol><h2 id="node-js-网站"><a href="#node-js-网站" class="headerlink" title="node.js 网站"></a>node.js 网站</h2><ol><li><img src="https://nodejs.org/en" alt="node.js官方网站"></li><li><img src="https://nodejs.cn/" alt="node.js中文网"></li><li><img src="https://cnodejs.org/" alt="node.js 中文社区"></li></ol><h2 id="为什么要学习-Node-js"><a href="#为什么要学习-Node-js" class="headerlink" title="为什么要学习 Node.js?"></a>为什么要学习 Node.js?</h2><ol><li>通过学习 Node.js 开发深入理解<strong>服务器开发、Web 请求和响应过程、 了解服务器端如何与客户端配合</strong></li><li>学习服务器端渲染：art-template、ejs、underscore</li><li>学习服务器端为客户端编写接口</li><li>现在前端工程师面试，对 Node.js 开发有要求</li><li>补充提问：<ul><li>在 Node.js 平台开发时，能使用 Dom API 吗？比如：document.getElementById(‘id’); window.location 等?</li></ul></li><li>复习 浏览器端 JavaScript 组成：ECMAscript、Dom、Bom</li></ol><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ol><li>了解服务器开发过程</li><li>会使用 node.js 开发基本的 http 服务程序（Web 应用程序）</li></ol><h2 id="Node-js-可以用来做什么？"><a href="#Node-js-可以用来做什么？" class="headerlink" title="Node.js 可以用来做什么？"></a>Node.js 可以用来做什么？</h2><ul><li>具有复杂逻辑的动态网站</li><li>WebSocket 服务器</li><li>命令行工具</li><li>带有图形界面的本地应用程序</li><li>…</li></ul><h2 id="终端基本使用"><a href="#终端基本使用" class="headerlink" title="终端基本使用"></a>终端基本使用</h2><h3 id="打开应用"><a href="#打开应用" class="headerlink" title="打开应用"></a>打开应用</h3><ul><li>notepad 打开记事本</li><li>mspaint 打开画图</li><li>calc 打开计算机</li><li>write 写字板</li><li>sysdm.cpl 打开环境变量设置窗口</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>md 创建目录</li><li>rmdir(rd) 删除目录，目录内没有文档</li><li>echo on a.txt 创建空文件</li><li>del 删除文件</li><li>rm 文件名 删除文件</li></ul><h2 id="Node-js-开发环境准备"><a href="#Node-js-开发环境准备" class="headerlink" title="Node.js 开发环境准备"></a>Node.js 开发环境准备</h2><ol><li>普通安装方式官方网站</li><li>多版本安装方式<ul><li>卸载已有的 Node.js</li><li>下载 nvm</li><li>在 C 盘创建目录 dev</li><li>在 dev 目中中创建两个子目录 nvm 和 nodejs</li><li>并且把 nvm 包解压进去 nvm 目录中</li><li>在 install.cmd 文件上面右键选择【以管理员身份运行】</li><li>打开的 cmd 窗口直接回车会生成一个 settings.txt 文件，修改文件中配置信息</li><li>配置 nvm 和 Node.js 环境变量<ul><li>NVM_HOME:C:\dev\nvm</li><li>NVM_SYMLINK:C:\dev\nodejs</li></ul></li><li>把配置好的两个环境变量加到 Path 中</li></ul></li></ol><h2 id="nvm-常用的命令"><a href="#nvm-常用的命令" class="headerlink" title="nvm 常用的命令"></a>nvm 常用的命令</h2><ul><li>nvm list 查看当前安装的 Node.js 所有版本</li><li>nvm install 版本号 安装指定版本的 Node.js</li><li>nvm uninstall 版本号 卸载指定版本的 Node.js</li><li>nvm use 版本号 选择指定版本的 Node.js</li></ul><h2 id="Node-js-之-HelloWorld"><a href="#Node-js-之-HelloWorld" class="headerlink" title="Node.js 之 HelloWorld"></a>Node.js 之 HelloWorld</h2><ul><li>命令行方式 REPL</li><li>运行文件方式</li><li>全局对象概览</li></ul><h2 id="Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net-等传统模式开发-Web-应用程序区别"><a href="#Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net-等传统模式开发-Web-应用程序区别" class="headerlink" title="Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net 等传统模式开发 Web 应用程序区别"></a>Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net 等传统模式开发 Web 应用程序区别</h2><ol><li><p><strong>传统模式</strong></p><ul><li>有 Web 容器</li></ul><p><img src="/img/md/nodejs9.png"></p></li><li><p><strong>Node.js 开发 Web 应用程序</strong></p><ul><li>没有 Web 容器</li></ul><p><img src="/img/md/nodejs10.png"></p></li></ol><h1 id="在-node-js-上编写程序"><a href="#在-node-js-上编写程序" class="headerlink" title="在 node.js 上编写程序"></a>在 node.js 上编写程序</h1><h2 id="REPL-介绍"><a href="#REPL-介绍" class="headerlink" title="REPL 介绍"></a>REPL 介绍</h2><ol><li><p>REPL 全称: Read-Eval-Print-Loop（交互式解释器）</p><ul><li>R 读取 - 读取用户输入，解析输入了 Javascript 数据结构并存储在内存中。</li><li>E 执行 - 执行输入的数据结构</li><li>P 打印 - 输出结果</li><li>L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。</li></ul></li><li><p>在 REPL 中编写程序 （类似于浏览器开发人员工具中的控制台功能）</p><ul><li>直接在控制台输入 node 命令进入 REPL 环境</li></ul></li><li><p>按两次 Control + C 退出 REPL 界面 或者 输入 .exit 退出 REPL 界面</p><ul><li>按住 control 键不要放开, 然后按两下 c 键</li></ul></li></ol><h2 id="创建-JavaScript-文件编写程序"><a href="#创建-JavaScript-文件编写程序" class="headerlink" title="创建 JavaScript 文件编写程序"></a>创建 JavaScript 文件编写程序</h2><p><strong>JavaScript 文件名命名规则</strong></p><ul><li>不要用中文</li><li>不要包含空格</li><li>不要出现 node 关键字，比如：node.js</li><li>建议以 ‘-’ 分割单词</li></ul><h2 id="案例-1：编写一个简单的函数-实现数字相加"><a href="#案例-1：编写一个简单的函数-实现数字相加" class="headerlink" title="案例 1：编写一个简单的函数, 实现数字相加"></a>案例 1：编写一个简单的函数, 实现数字相加</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">add</span>(m, n);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;计算结果是：&quot;</span> + result);</span><br></pre></td></tr></table></figure><h2 id="案例-2：文件读写案例"><a href="#案例-2：文件读写案例" class="headerlink" title="案例 2：文件读写案例"></a>案例 2：文件读写案例</h2><ul><li><p><strong>使用到的模块 var fs &#x3D; require(‘fs’);</strong></p></li><li><p><strong>1、写文件：fs.writeFile(file, data[, options], callback);</strong></p><ul><li>参数 1：要写入的文件路径，必填。</li><li>参数 2：要写入的数据，必填。</li><li>参数 3：写入文件时的选项，比如：文件编码，选填。</li><li>参数 4：文件写入完毕后的回调函数，必填。</li><li>写文件注意：<ul><li>该操作采用异步执行</li><li>如果文件已经存在则替换掉</li><li>默认写入的文件编码为 utf8</li><li>回调函数有 1 个参数：err，表示在写入文件的操作过程中是否出错了。<ul><li>如果出错了 err !&#x3D; null，否则 err &#x3D;&#x3D;&#x3D; null</li></ul></li></ul></li></ul></li><li><p><strong>2、读文件：fs.readFile(file[, options], callback)</strong></p><ul><li>参数 1：要读取的文件路径，必填。</li><li>参数 2：读取文件时的选项，比如：文件编码。选填。</li><li>参数 3：文件读取完毕后的回调函数，必填。</li><li>读文件注意：<ul><li>该操作采用异步执行</li><li>回调函数有两个参数，分别是 err 和 data</li><li>如果读取文件时没有指定编码，那么返回的将是原生的二进制数据；如果指定了编码，那么会根据指定的编码返回对应的字符串数据。</li></ul></li></ul></li><li><p><strong>注意</strong></p><ul><li>文件操作中的.&#x2F;表示当前路径，相对的是执行 node 命令的路径，而不是当前被执行的*.js 文件的实际路径。</li><li>__dirname 才永远表示当前被执行的*.js 文件的实际路径</li><li>&#x2F;表示根目录, 读取文件或写入文件的时候写&#x2F;目录，在 Windows 下相当于当前磁盘根目录（比如：c:\ 或 d:\ 或 e:\ 等，在 Mac 下相当于硬盘根目录 &#x2F;）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --------------------------------- 写文件 -----------------------------</span></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建要写入的文件的字符串</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;你好，世界！你好 Node.js.&quot;</span>;</span><br><span class="line"><span class="comment">// 执行文件写入操作</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;./data.txt&quot;</span>, msg, <span class="string">&quot;utf8&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;---&quot;</span> + err + <span class="string">&quot;----&quot;</span>);</span><br><span class="line">  <span class="comment">// /判断是否写入文件出错了</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入出错了，详细错误信息：&quot;</span> + err);</span><br><span class="line">    <span class="comment">// 把错误继续向上抛出</span></span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入成功！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------- 读文件 -----------------------------</span></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行文件读取操作</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./data.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="comment">// 输出err  和 data</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;error: &#x27; + err);</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;data: &#x27; + data);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件读取出错啦！详细信息: &quot;</span> + err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件读取成功，以下是文件内容：&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="案例-3：创建目录案例"><a href="#案例-3：创建目录案例" class="headerlink" title="案例 3：创建目录案例"></a>案例 3：创建目录案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./test-mkdir&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建目录出错了，详细信息如下：&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;目录创建成功！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建 &#x27;01-资料&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-资料&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.1 创建 &#x27;01-大纲&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-资料/01-大纲&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.2 创建 &#x27;02-任务&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-资料/02-任务&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.3 创建 &#x27;03-素材&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-资料/03-素材&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.4 创建 &#x27;04-笔记&#x27; 目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./01-资料/04-笔记&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建 &#x27;02-源代码&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./02-源代码&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.1 创建 &#x27;预习代码&#x27;目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./02-源代码/预习代码&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 创建 &#x27;复习代码&#x27;目录</span></span><br><span class="line">  fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./02-源代码/复习代码&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 &#x27;03-视频&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./03-视频&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建 &#x27;04-其他资料&#x27; 目录</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./04-其他资料&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>异步操作无法通过 try-catch 来捕获异常，要通过判断 error 来判断是否出错。</li><li>同步操作可以通过 try-catch 来捕获异常。</li><li>不要使用 fs.exists(path, callback) 来判断文件是否存在，直接判断 error 即可</li><li>文件操作时的路径问题<ul><li>在读写文件的时候 ‘.&#x2F;’ 表示的是当前执行 node 命令的那个路径，不是被执行的 js 文件的路径</li><li>__dirname, 表示的永远是”当前被执行的 js 的目录”</li><li>__filename, 表示的是”被执行的 js 的文件名（含路径)”</li></ul></li><li>error-first 介绍( 错误优先 )</li></ul><h2 id="案例-4：通过-node-js-编写-http-服务程序-极简版本"><a href="#案例-4：通过-node-js-编写-http-服务程序-极简版本" class="headerlink" title="案例 4：通过 node.js 编写 http 服务程序 - 极简版本"></a>案例 4：通过 node.js 编写 http 服务程序 - 极简版本</h2><p><strong>步骤：</strong></p><ol><li>加载 http 模块</li><li>创建 http 服务</li><li>为 http 服务对象添加 request 事件处理程序</li><li>开启 http 服务监听，准备接收客户端请求</li></ol><p><strong>注意：</strong></p><ol><li>浏览器显示可能是乱码，所以可以通过 res.setHeader(‘Content-Type’, ‘text&#x2F;plain; charset&#x3D;utf-8’);设置浏览器显示时所使用的编码。</li><li>Chrome 浏览器默认无法手动设置编码，需要安装”Set Character Encoding”扩展。</li><li>演示一下设置 Content-Type&#x3D;text&#x2F;html 和 Content-Type&#x3D;text&#x2F;plain 的区别。</li></ol><p>例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 开始监听&#x27;request&#x27;事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人请求了~~&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务，开始监听</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，请访问： http://localhost:9000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="案例-5：通过-node-js-编写-http-服务程序-根据不同请求作出不同响应"><a href="#案例-5：通过-node-js-编写-http-服务程序-根据不同请求作出不同响应" class="headerlink" title="案例 5：通过 node.js 编写 http 服务程序 - 根据不同请求作出不同响应"></a>案例 5：通过 node.js 编写 http 服务程序 - 根据不同请求作出不同响应</h2><ul><li>根据不同请求，显示 index 页面、login 页面、register 页面、list 页面、404 页面。</li><li>请求 &#x2F; 或 &#x2F;index</li><li>请求 &#x2F;login</li><li>请求 &#x2F;register</li><li>请求 &#x2F;list</li><li>请求除了以上路径之外的路径</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/&quot;</span> || req.<span class="property">url</span> === <span class="string">&quot;/index&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求网站首页</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 index.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求登录页面</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 login.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/register&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求注册页面</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 register.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/list&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示请求列表页面</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;这是 list.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 表示请求的页面不存在</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;Sorry, page not found.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口的网络请求</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://localhost:9000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="案例-6：通过-node-js-编写-http-服务程序-通过读取静态-HTML-文件来响应用户请求"><a href="#案例-6：通过-node-js-编写-http-服务程序-通过读取静态-HTML-文件来响应用户请求" class="headerlink" title="案例 6：通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求"></a>案例 6：通过 node.js 编写 http 服务程序 - 通过读取静态 HTML 文件来响应用户请求</h2><ol><li>创建 index.html、login.html、register.html、list.html、404.html 文件。</li><li>演示通过读取最简单的 HTML 文件来响应用户。</li><li>演示通过读取”具有引入外部 CSS 样式表”的 HTML 文件来响应用户。</li><li>演示通过读取”具有 img 标签”的 HTML 文件来响应用户。</li></ol><p><strong>注意：</strong></p><ul><li>1、注意在发送不同类型的文件时，要设置好对应的 Content-Type<ul><li><a href="https://tool.oschina.net/commons">Content-Type 参考 OSChina</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">Content-Type 参考 MDN</a></li></ul></li><li>2、HTTP 状态码参考<ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">w3org 参考</a></li><li><a href="https://www.w3schools.com/tags/ref_httpmessages.asp">w3schools 参考</a></li></ul></li><li>3、在 html 页面中写相对路径’.&#x2F;’ 和 绝对路径 ‘&#x2F;‘的含义 。<ul><li>网页中的这个路径主要是告诉浏览器向哪个地址发起请求用的</li><li>‘.&#x2F;’ 表示本次请求从相对于当前页面的请求路径（即服务器返回当前页面时的请求路径）开始</li><li>‘&#x2F;’ 表示请求从根目录开始</li></ul></li><li>4、path 模块的 join() 方法</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 加载文件操作模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 加载path模块，这个模块主要用来处理各种路径。</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 获取用户请求的URL</span></span><br><span class="line">  <span class="keyword">var</span> url = req.<span class="property">url</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 根据用户的不同请求，做出不同响应</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&quot;/&quot;</span> || url === <span class="string">&quot;/index&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取index.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;index.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取login.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;login.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/register&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取register.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;register.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/404&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 读取register.html文件，把该文件响应给用户</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;404.html&quot;</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html; charset=utf-8&#x27;);</span></span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9090</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;please visit: http://localhost:9090&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="案例-7：模拟-Apache-实现静态资源服务器"><a href="#案例-7：模拟-Apache-实现静态资源服务器" class="headerlink" title="案例 7：模拟 Apache 实现静态资源服务器"></a>案例 7：模拟 Apache 实现静态资源服务器</h2><ul><li>单独创建一个目录来实现，比如：创建一个”07-Apache”的目录。</li><li>在该目录下新建 public 目录，假设该目录为静态资源目录。</li><li>根据用户请求的路径在 public 目录下寻找对应路径下的资源。</li><li>如果找到了，那么将该资源返回给用户，如果没找到则返回 404 错误。</li><li>通过 mime 模块设置不同类型资源的 Content-Type</li><li>实现完毕后把素材中的’An Ocean of Sky’ 和 ‘Hacker News’分别拷贝到静态资源目录下, 测试是否成功</li></ul><p>补充：</p><ul><li>介绍 NPM</li><li>介绍 mime 第三方模块<ul><li>npm install mime</li><li>在代码中直接 var mime &#x3D; require(‘mime’)</li></ul></li></ul><p>例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 加载对应模块</span></span><br><span class="line"><span class="comment">// 1.1 加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 1.2 加载path模块，方便路径拼接</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 1.3 加载文件读取模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 1.4 加载判断文件MIME类型的模块</span></span><br><span class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">&quot;mime&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 监听用户request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 获取用户的请求路径, 并转换为小写</span></span><br><span class="line">  <span class="keyword">var</span> url = req.<span class="property">url</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断如果请求的路径是 &#x27;/&#x27; 那么等价于 &#x27;/index.html&#x27;</span></span><br><span class="line">  url = url === <span class="string">&quot;/&quot;</span> ? <span class="string">&quot;/index.html&quot;</span> : url;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 根据用户请求的url路径, 去public目录下查找对应的静态资源文件。找到后读取该文件，并将结果返回给用户</span></span><br><span class="line">  <span class="comment">// 2.1 根据用户请求的url拼接本地资源文件的路径</span></span><br><span class="line">  <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>, url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 根据请求的文件路径设置Content-Type</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, mime.<span class="title function_">lookup</span>(url));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 根据路径去读取对应的文件</span></span><br><span class="line">  <span class="comment">// 【注意】读取文件前无需判断文件是否已经存在，而是在读取文件的回调函数中根据error的错误信息来判断读取文件是否成功以及发生的错误</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否有错误</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&quot;ENOENT&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否是请求的文件是否不存在</span></span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=utf8&quot;</span>);</span><br><span class="line">        res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">        res.<span class="property">statusMessage</span> = <span class="string">&quot;Not Found&quot;</span>;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;请求的资源不存在！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&quot;EACCES&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断文件是否有访问权限</span></span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=utf8&quot;</span>);</span><br><span class="line">        res.<span class="property">statusCode</span> = <span class="number">403</span>;</span><br><span class="line">        res.<span class="property">statusMessage</span> = <span class="string">&quot;Forbidden&quot;</span>;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;Permission denied！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果没有错误则将读取到的文件返回给用户</span></span><br><span class="line">      res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">      res.<span class="property">statusMessage</span> = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running, please visit: http://localhost:9000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Common-System-Errors-常见错误号"><a href="#Common-System-Errors-常见错误号" class="headerlink" title="Common System Errors - 常见错误号"></a>Common System Errors - 常见错误号</h2><ul><li>EACCES (Permission denied)<ul><li>An attempt was made to access a file in a way forbidden by its file access permissions.</li><li>访问被拒绝</li></ul></li><li>EADDRINUSE (Address already in use)<ul><li>An attempt to bind a server (net, http, or https) to a local address failed due to another server on the local system already occupying that address.</li><li>地址正在被使用（比如：端口号被占用）</li></ul></li><li>EEXIST (File exists)<ul><li>An existing file was the target of an operation that required that the target not exist.</li><li>文件已经存在</li></ul></li><li>EISDIR (Is a directory)<ul><li>An operation expected a file, but the given pathname was a directory.</li><li>给定的路径是目录</li></ul></li><li>ENOENT (No such file or directory)<ul><li>Commonly raised by fs operations to indicate that a component of the specified pathname does not exist – no entity (file or directory) could be found by the given path.</li><li>文件 或 目录不存在</li></ul></li><li>ENOTDIR (Not a directory)<ul><li>A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.</li><li>给定的路径不是目录</li></ul></li></ul><h2 id="同步文件操作-和-异步文件操作"><a href="#同步文件操作-和-异步文件操作" class="headerlink" title="同步文件操作 和 异步文件操作"></a>同步文件操作 和 异步文件操作</h2><ul><li>fs.readFile(file[, options], callback)</li><li>fs.readFileSync(file[, options])</li></ul><h2 id="通过设置-http-响应报文头实现弹框下载功能"><a href="#通过设置-http-响应报文头实现弹框下载功能" class="headerlink" title="通过设置 http 响应报文头实现弹框下载功能"></a>通过设置 http 响应报文头实现弹框下载功能</h2><ol><li>设置 Content-Type: application&#x2F;octet-stream || application&#x2F;force-download</li><li>设置 Content-Disposition: attachment; filename&#x3D;demo.txt</li></ol><p>当浏览器在请求资源时，会通过 http 返回头中的 content-type 决定如何显示&#x2F;处理将要加载的数据，如果这个类型浏览器能够支持阅览，浏览器就会直接展示该资源，比如 png、jpeg、video 等格式。在某些下载文件的场景中，服务端可能会返回文件流，并在返回头中带上 Content-Type:application&#x2F;octet-stream，告知浏览器这是一个字节流，浏览器处理字节流的默认方式就是下载。<br>Application&#x2F;octet-stream 是应用程序文件的默认值。意思是未知的应用程序文件，浏览器一般不会自动执行或询问执行。浏览器会像对待，设置了 HTTP 头 Content-Disposition 值为 attachment 的文件一样来对待这类文件，即浏览器会触发下载行为。<br>说人话就是，浏览器并不认得这是什么类型，也不知道应该如何展示，只知道这是一种二进制文件，因此遇到 content-type 为 application&#x2F;octet-stream 的文件时，浏览器会直接把它下载下来。这个类型一般会配合另一个响应头 Content-Disposition,该响应头指示回复的内容该以何种形式展示，是以内联的形式（即网页或者网页的一部分），还是以附件的形式下载并保存到本地。</p><h1 id="request-对象-和-response-对象"><a href="#request-对象-和-response-对象" class="headerlink" title="request 对象 和 response 对象"></a>request 对象 和 response 对象</h1><h2 id="request-对象"><a href="#request-对象" class="headerlink" title="request 对象"></a>request 对象</h2><ul><li>request 对象类型 &lt;http.IncomingMessage&gt;, 继承自 stream.Readable</li><li>request 对象常用成员<ul><li>request.headers</li><li>request.rawHeaders</li><li>request.httpVersion</li><li>request.method</li><li>request.url</li></ul></li></ul><h2 id="response-对象"><a href="#response-对象" class="headerlink" title="response 对象"></a>response 对象</h2><ul><li><p>response 对象类型 &lt;http.ServerResponse&gt;</p></li><li><p>response 对象常用成员</p><ul><li><p>response.writeHead(statusCode[, statusMessage][, headers])</p><ol><li>This method must only be called once on a message and it must be called before response.end() is called.</li></ol><ul><li>这个方法在每次请求响应前都必须被调用（只能调用一次）。并且必须在 end()方法调用前调用</li></ul><ol start="2"><li>If you call response.write() or response.end() before calling this, the implicit&#x2F;mutable headers will be calculated and call this function for you.</li></ol><ul><li>如果在调用 writeHead()方法之前调用了 write() 或 end()方法，系统会自动帮你调用 writeHead()方法，并且会生成默认的响应头</li></ul><ol start="3"><li>When headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.</li></ol><ul><li>如果通过 res.setHeader() 也设置了响应头，那么系统会将 serHeader()设置的响应头和 writeHead()设置的响应头合并。 并且 writeHead()的设置优先</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例代码：</span></span><br><span class="line">res.<span class="title function_">writeHead</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Length&quot;</span>: <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(msg),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>response.write(chunk[, encoding][, callback])</p><ul><li>参数 1：要写入的数据，可以是字符串或二进制数据，必填。</li><li>参数 2：编码，默认是 utf8，选填。</li><li>参数 3：回调函数，选填。</li></ul></li><li><p>response.end([data][, encoding][, callback])</p><ul><li>结束响应。</li><li>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. <strong>The method, response.end(), MUST be called on each response.</strong></li><li>res.end()这个方法告诉服务器所有要发送的响应头和响应体都发送完毕了。可以人为这次响应结束了。</li><li>同时每次响应都必须调用该方法，用来结束响应</li><li>参数 1：结束响应前要发送的数据，选填。</li><li>参数 2：编码，选填。</li><li>参数 3：回调函数，选填。</li></ul></li><li><p>response.setHeader(name, value)</p><ul><li>设置响应报文头</li></ul></li><li><p>response.statusCode</p><ul><li>设置或读取 http 响应码</li></ul></li><li><p>response.statusMessage</p><ul><li>设置或读取 http 响应状态消息</li></ul></li></ul><h1 id="npm-Node-Package-Manager-Node-包管理器"><a href="#npm-Node-Package-Manager-Node-包管理器" class="headerlink" title="npm - Node Package Manager - Node 包管理器"></a>npm - Node Package Manager - Node 包管理器</h1><h2 id="npm-是什么？"><a href="#npm-是什么？" class="headerlink" title="npm 是什么？"></a>npm 是什么？</h2><ul><li>npm（全称 Node Package Manager，即 node 包管理器）是 Node.js 默认的、以 JavaScript 编写的软件包管理系统。</li><li><a href="https://www.npmjs.com/">npm 官方网站</a></li><li><a href="https://docs.npmjs.com/">npm 官方文档</a></li></ul><h3 id="一般当我们说-npm-的时候可能指-3-件事"><a href="#一般当我们说-npm-的时候可能指-3-件事" class="headerlink" title="一般当我们说 npm 的时候可能指 3 件事"></a>一般当我们说 npm 的时候可能指 3 件事</h3><ol><li>NPM 网站：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li><li>NPM 包管理库，存储了大量的 JavaScript 代码库</li><li>NPM 客户端，我们所使用的 npm 命令行工具。使用 JavaScript 开发的基于 node.js 的命令行工具，本身也是 Node 的一个包。</li></ol><p>参考图片：</p><p><img src="/img/md/nodejs11.png"></p><p><img src="/img/md/nodejs12.png"></p><h2 id="npm-官方解释："><a href="#npm-官方解释：" class="headerlink" title="npm 官方解释："></a>npm 官方解释：</h2><ul><li>npm is the package manager for JavaScript and the world’s largest software registry.<ul><li>npm 是一个 JavaScript 包管理器，并且是世界上最大的软件登记处</li></ul></li><li>discover packages of reusable code — and assemble them in powerful new ways.<ul><li>发现可重用代码，并集成代码包到项目中的全新的、强大方式</li></ul></li><li>npm makes it easy for JavaScript developers to share and reuse code, and it makes it easy to update the code that you’re sharing.<ul><li>npm 让 JavaScript 开发者共享和重用代码变的更容易，同时也让我们更容易地更新正在被共享的代码</li></ul></li></ul><h2 id="npm-与-node-js"><a href="#npm-与-node-js" class="headerlink" title="npm 与 node.js"></a>npm 与 node.js</h2><ul><li>npm 是 Node.js 默认的软件包管理系统。安装完毕 node 后，会默认安装好 npm</li><li>npm 本身也是基于 Node.js 开发的包（软件）</li></ul><h2 id="如何安装-NPM"><a href="#如何安装-NPM" class="headerlink" title="如何安装 NPM?"></a>如何安装 NPM?</h2><ul><li>npm 会随着 Node.js 自动安装，安装完毕 node.js 后会自动安装 npm</li><li>查看当前 npm 版本：npm -v</li><li>更新 npm：npm install npm@latest -g</li></ul><h2 id="npm-使用"><a href="#npm-使用" class="headerlink" title="npm 使用"></a>npm 使用</h2><ol><li>在 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站找到需要的包</li><li>在项目的根目录下，执行 npm install 包名称安装</li><li>在 node.js 代码中通过 require(‘包名’); 加载该模块</li><li>注意：通过 npm install 包名安装的包，会自动下载到当前目录下的 node_modules 目录下，如果该目录不存在，则创建，如果已存在则直接下载进去。</li><li>在代码中通过 require(‘包名’); 加载该模块</li></ol><p>—– 上面说的这种方式叫做 本地安装。</p><h2 id="npm-全局安装介绍"><a href="#npm-全局安装介绍" class="headerlink" title="npm 全局安装介绍"></a>npm 全局安装介绍</h2><ol><li><p>什么是 npm 全局安装？</p><ul><li>npm install 包名 -g npm 全局安装指的是把包安装成了一个命令行工具。</li><li>全局安装只是为了可以当做命令行使用而已</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过npm全局安装mime</span></span><br><span class="line">npm install mime -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装完毕后可以在命令行中直接使用</span></span><br><span class="line">mime a.<span class="property">txt</span> 命令来查看对应的结果</span><br></pre></td></tr></table></figure></li><li><p>npm 全局安装实际做了 2 件事：</p><ul><li>下载包到一个指定的目录 C:\Users\username\AppData\Roaming\npm\node_modules</li><li>创建一段命令行执行的代码。 C:\Users\username\AppData\Roaming\npm\mime -&gt; C:\Users\steve xiaohu zhao\AppData\Roaming\npm\node_modules\mime\cli.js</li></ul></li></ol><h2 id="npm-常用命令介绍"><a href="#npm-常用命令介绍" class="headerlink" title="npm 常用命令介绍"></a>npm 常用命令介绍</h2><ol><li>install，安装包。npm install 包名</li><li>uninstall，卸载包。npm uninstall 包名&#96;</li><li>version，查看当前 npm 版本。npm version 或 npm -v</li><li>init，创建一个 package.json 文件。npm init</li><li>注意：当使用 npm init -y 的时候，如果当前文件夹（目录）的名字比较怪（有大写、有中文等等）就会影响 npm init -y 的一步生成操作，此时需要 npm init 根据向导来生成</li></ol><h2 id="模块（Modules）和包（Packages）的区别"><a href="#模块（Modules）和包（Packages）的区别" class="headerlink" title="模块（Modules）和包（Packages）的区别"></a>模块（Modules）和包（Packages）的区别</h2><ol><li>A <strong>module</strong> is any file or directory that can be loaded by Node.js’ require().<ul><li>模块可以是任何一个文件或目录（目录下可以有很多个文件），只要能被 node.js 通过 require()即可。遵循 common.js 规范</li></ul></li><li>A <strong>package</strong> is a file or directory that is described by a package.json. This can happen in a bunch of different ways!<ul><li>包是一个文件或目录（目录下可以有多个文件）必须有一个 package.json 文件来描述，就可以是一个包。</li></ul></li></ol><h2 id="node-js-错误调试："><a href="#node-js-错误调试：" class="headerlink" title="node.js 错误调试："></a>node.js 错误调试：</h2><ol><li><p>当开启服务后，在浏览器中输入地址，如果出现浏览问题，首先要先看 服务器控制台是否报错。如果报错，直接根据服务器报错进行排错。</p></li><li><p>打开浏览器开发者工具中的 “网络” 部分，查看请求是否成功发出去了</p><ul><li>看一下请求报文是不是和我们想的一样</li><li>响应状态码</li></ul></li></ol><h1 id="package-json-文件"><a href="#package-json-文件" class="headerlink" title="package.json 文件"></a>package.json 文件</h1><h2 id="package-json-文件的作用？"><a href="#package-json-文件的作用？" class="headerlink" title="package.json 文件的作用？"></a>package.json 文件的作用？</h2><ol><li>package.json 文件是一个包说明文件（项目描述文件），用来管理组织一个包（一个项目）</li><li>package.json 文件是一个 json 格式的文件</li><li>位于当前项目的根目录下</li></ol><h2 id="package-json-文件中常见的项有哪些？"><a href="#package-json-文件中常见的项有哪些？" class="headerlink" title="package.json 文件中常见的项有哪些？"></a>package.json 文件中常见的项有哪些？</h2><ul><li>name<ul><li>包的名字</li></ul></li><li>version<ul><li>包的版本</li></ul></li><li>description<ul><li>包描述</li></ul></li><li>author<ul><li>包的作者</li></ul></li><li>main<ul><li>包的入口 js 文件，从 main 字段这里指定的那个 js 文件开始执行</li></ul></li><li>dependencies<ul><li>当前包依赖的其他包</li></ul></li></ul><h2 id="如何创建一个-package-json-文件"><a href="#如何创建一个-package-json-文件" class="headerlink" title="如何创建一个 package.json 文件"></a>如何创建一个 package.json 文件</h2><ol><li>通过 npm init 命令 或者 npm init -y 或 npm init -yes 命令</li><li>手动创建一个</li></ol><p>注意</p><ol><li>通过 npm init -y 或 npm init -yes 创建 package.json 文件时，执行命令所在的目录接名称中不能包含大写字母</li><li>package.json 文件中，项目名称本身不能包含大写字母</li><li>npm 更新新版本后，项目所在的文件夹如果包含中文等特殊字符，创建的时候不会提示一步一步的输入，直接报错。</li></ol><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><ol><li><a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json">package.json</a></li><li><a href="https://docs.npmjs.com/creating-a-package-json-file">Using a package.json</a></li></ol><h2 id="发布一个自己的-npm-包"><a href="#发布一个自己的-npm-包" class="headerlink" title="发布一个自己的 npm 包"></a>发布一个自己的 npm 包</h2><ol><li>注册</li><li>终端输入 npm login，再输入账号密码<ul><li>注意一定要将镜像源切换为 npm 官方地址</li></ul></li><li>将终端切换到包的根目录之后，运行 npm publish 命令，即可将包发布到 npm 上<ul><li>注意: 包名不能雷同</li></ul></li><li>运行 npm unpublish 包名 –force 命令，即可从 npm 删除已发布的包。<ul><li>npm unpublish 命令只能删除 72 小时以内发布的包</li><li>npm unpublish 删除的包，在 24 小时内不允许重复发布</li></ul></li></ol><h1 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h1><p>思考：Buffer 类型产生的原因？主要用来解决什么问题？</p><p>看一下什么是 Buffer? 什么是 Stream?</p><h2 id="一、类型介绍"><a href="#一、类型介绍" class="headerlink" title="一、类型介绍"></a>一、类型介绍</h2><ol><li>JavaScript 语言没有读取或操作二进制数据流的机制。</li><li>Node.js 中引入了 Buffer 类型使我们可以操作 TCP 流 或 文件流。</li><li>Buffer 类型的对象类似于整数数组，但 Buffer 的大小是固定的、且在 V8 堆外分配物理内存。 Buffer 的大小在被创建时确定，且无法调整。（ buf.length 是固定的，不允许修改 ）</li><li>Buffer 是全局的，所以使用的时候无需 require() 的方式来加载</li></ol><h2 id="如何创建一个-Buffer-对象"><a href="#如何创建一个-Buffer-对象" class="headerlink" title="如何创建一个 Buffer 对象"></a>如何创建一个 Buffer 对象</h2><p>常见的 API 介绍</p><ol><li>创建一个 Buffer 对象</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 通过 Buffer.from() 创建一个 Buffer 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 通过一个字节数组来创建一个 Buffer 对象</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x20</span>, <span class="number">0xe4</span>, <span class="number">0xb8</span>, <span class="number">0x96</span>, <span class="number">0xe7</span>, <span class="number">0x95</span>, <span class="number">0x8c</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 通过字符串来创建一个 Buffer 对象</span></span><br><span class="line"><span class="comment">// Buffer.from(string[, encoding])</span></span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;你好世界！ Hello World!~&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><ol start="2"><li>拼接多个 Buffer 对象为一个对象</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer.concat(list[, totalLength])</span></span><br><span class="line"><span class="keyword">var</span> bufferList = [];</span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufferList);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取字符串对应的字节个数</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer.byteLength(string[, encoding])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(<span class="string">&quot;你好世界Hello&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len);</span><br></pre></td></tr></table></figure><ol start="4"><li>判断一个对象是否是 Buffer 类型对象</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buffer.isBuffer(obj)</span></span><br><span class="line"><span class="comment">// obj &lt;Object&gt;</span></span><br><span class="line"><span class="comment">// Returns: &lt;boolean&gt;</span></span><br><span class="line"><span class="comment">// Returns true if obj is a Buffer, false otherwise.</span></span><br></pre></td></tr></table></figure><ol start="5"><li>获取 Buffer 中的某个字节</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据索引获取 Buffer 中的某个字节（byte、octet）</span></span><br><span class="line"><span class="comment">// buf[index]</span></span><br></pre></td></tr></table></figure><ol start="6"><li>获取 Buffer 对象中的字节的个数</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// buf.length</span></span><br><span class="line"><span class="comment">// 注意：length 属性不可修改</span></span><br></pre></td></tr></table></figure><h2 id="三、Buffer-对象与编码"><a href="#三、Buffer-对象与编码" class="headerlink" title="三、Buffer 对象与编码"></a>三、Buffer 对象与编码</h2><p>Node.js 目前支持的编码如下：</p><ol><li>ascii</li><li>utf8</li><li>utf16le<ul><li>ucs2 是 utf16le 的别名</li></ul></li><li>base64</li><li>latin1<ul><li>binary 是 latin1 的别名</li></ul></li><li>hex<ul><li>用两位 16 进制来表示每个字节</li></ul></li></ol><p>例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;你好世界，Hello World！&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;hex&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="四、思考：为什么会有-Buffer-类型？"><a href="#四、思考：为什么会有-Buffer-类型？" class="headerlink" title="四、思考：为什么会有 Buffer 类型？"></a>四、思考：为什么会有 Buffer 类型？</h2><ol><li>Buffer 使用来临时存储一些数据（二进制数据）</li><li>当我们要把一大块数据从一个地方传输到另外一个地方的时候可以通过 Buffer 对象进行传输</li><li>通过 Buffer 每次可以传输小部分数据，直到所有数据都传输完毕。</li></ol><h2 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h2><ol><li>Stream</li><li>Writable Stream<ul><li>允许 node.js 写数据到流中</li></ul></li><li>Readable Stream<ul><li>允许 node.js 从流中读取数据</li></ul></li></ol><h1 id="node-js-模块"><a href="#node-js-模块" class="headerlink" title="node.js 模块"></a>node.js 模块</h1><p>在 node.js 开发中一个文件就可以认为是一个模块。</p><p>require 的加载过程是同步的，加载完上一个模块才能加载下一个模块，readFileSync</p><h2 id="node-js-模块分类"><a href="#node-js-模块分类" class="headerlink" title="node.js 模块分类"></a>node.js 模块分类</h2><h3 id="核心模块（内置模块、原生模块）"><a href="#核心模块（内置模块、原生模块）" class="headerlink" title="核心模块（内置模块、原生模块）"></a>核心模块（内置模块、原生模块）</h3><ul><li>fs</li><li>http</li><li>path</li><li>url</li><li>…</li></ul><p>所有内置模块在安装 node.js 的时候就已经编译成 二进制文件，可以直接加载运行（速度较快）<br>部分内置模块，在 node.exe 这个进程启动的时候就已经默认加载了，所以可以直接使用。</p><h3 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h3><p><strong>按文件后缀来分</strong></p><p>如果加载时，没有指定后缀名，那么就按照如下顺序依次加载相应模块</p><ul><li>.js</li><li>.json</li><li>.node（C&#x2F;C++编写的模块）</li><li>main:app.js &#x3D;&gt; index.js &#x3D;&gt; index.json &#x3D;&gt; index.node</li></ul><h3 id="自定义模块（第三方模块）"><a href="#自定义模块（第三方模块）" class="headerlink" title="自定义模块（第三方模块）"></a>自定义模块（第三方模块）</h3><ul><li>mime</li><li>cheerio</li><li>moment</li><li>mongo</li><li>…</li></ul><h2 id="require-加载模块顺序"><a href="#require-加载模块顺序" class="headerlink" title="require 加载模块顺序"></a>require 加载模块顺序</h2><ol><li>看 require() 加载模块时传入的参数是否以 ‘.&#x2F;’ 或 ‘…&#x2F;’ 或 ‘&#x2F;’ 等等这样的路径方式开头（相对路径或绝对路径都可以）</li><li>是，那么会按照传入的路径直接去查询对应的模块。</li></ol><ul><li>传入的是否为具体的文件名<ul><li>require(‘.&#x2F;test.js’) 是具体的文件名<ul><li>直接根据给定的路径去加载模块，找到了加载成功，找不到加载失败</li></ul></li><li>require(‘.&#x2F;test’); 不是具体的文件名、<ul><li>第一步：根据给定的路径，依次添加文件后缀 .js、.json、.node 进行匹配，如果找不到匹配执行第二步</li><li>第二步：查找是否有 test 目录（尝试找 test 包）<ul><li>找不到：加载失败</li><li>找到了：依次在 test 目录下查找 package.json 文件（找到该文件后尝试找 main 字段中的入口文件）、index.js、index.json、index.node，找不到则加载失败</li></ul></li></ul></li></ul></li></ul><ol start="3"><li>不是，那么就认为传入的是 “模块名称”（比如：require(‘http’)、require(‘mime’)）</li></ol><ul><li>是核心模块：直接加载核心模块 lib</li><li>不是核心模块<ul><li>依次递归查找 node_modules 目录中是否有相应的包<ul><li>从当前目录开始，依次递归查找所有父目录下的 node_modules 目录中是否包含相应的包</li><li>如果查找完毕磁盘根目录依然没有则加载失败</li><li>打印输入 module.paths 查看</li></ul></li></ul></li></ul><h2 id="require-加载模块注意点"><a href="#require-加载模块注意点" class="headerlink" title="require 加载模块注意点"></a>require 加载模块注意点</h2><ol><li>所有模块第一次加载完毕后都会有 缓存，二次加载直接读取缓存，避免了二次开销<ul><li>因为有 缓存，所以模块中的代码只在第一次加载的时候执行一次</li></ul></li><li>每次加载模块的时候都优先从缓存中加载，缓存中没有的情况下才会按照 node.js 加载模块的规则去查找</li><li>核心模块在 Node.js 源码编译的时候，都已经编译为二进制执行文件，所以加载速度较快（核心模块加载的优先级仅次于 缓存加载）</li><li>核心模块都保存在 lib 目录下</li><li>试图加载一个和 核心模块 同名的 自定义模块（第三方模块）是不会成功的<ul><li>自定义模块要么名字不要与核心模块同名</li><li>要么使用路径的方式加载 …&#x2F;http</li></ul></li><li>核心模块 只能通过 模块名称 来加载（错误示例：require(‘.&#x2F;http’); 这样是无法加载 核心模块 http 的 ）</li><li>require() 加载模块使用 .&#x2F; 相对路径时，相对路径是相对当前模块，不受执行 node 命令的路径影响</li><li>建议加载文件模块的时候始终添加文件后缀名，不要省略。</li></ol><p><strong>相关源码：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每一个 node.js 中被加载的模块其实最终都是 Module 的一个实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Module</span>(<span class="params">id, parent</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; parent.<span class="property">children</span>) &#123;</span><br><span class="line">    parent.<span class="property">children</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. module.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Loads a module at the given file path. Returns that module&#x27;s</span></span><br><span class="line"><span class="comment">// `exports` property.</span></span><br><span class="line"><span class="comment">// 加载给定的模块，并返回该模块中 module.exports 中的值</span></span><br><span class="line"><span class="comment">// 之所以在每个模块中都能使用 require() 函数是因为 require 函数定义在了每个模块中</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">require</span> = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="title function_">assert</span>(path, <span class="string">&quot;missing path&quot;</span>);</span><br><span class="line">  <span class="title function_">assert</span>(<span class="keyword">typeof</span> path === <span class="string">&quot;string&quot;</span>, <span class="string">&quot;path must be a string&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Module</span>.<span class="title function_">_load</span>(path, <span class="variable language_">this</span>, <span class="comment">/* isMain */</span> <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. module.js</span></span><br><span class="line"><span class="comment">// Check the cache for the requested file.</span></span><br><span class="line"><span class="comment">// 1. If a module already exists in the cache: return its exports object.</span></span><br><span class="line"><span class="comment">// 2. If the module is native: call `NativeModule.require()` with the</span></span><br><span class="line"><span class="comment">//    filename and return the result.</span></span><br><span class="line"><span class="comment">// 3. Otherwise, create a new module for the file and save it to the cache.</span></span><br><span class="line"><span class="comment">//    Then have it load  the file contents before returning its exports</span></span><br><span class="line"><span class="comment">//    object.</span></span><br><span class="line"><span class="comment">// 该方法做了 5 件事：</span></span><br><span class="line"><span class="comment">// 1. 检查 Module._cache 中是否有缓存的模块实例</span></span><br><span class="line"><span class="comment">// 2. 如果缓存中没有，那么创建一个 Moudle 实例</span></span><br><span class="line"><span class="comment">// 3. 将创建的 Module 实例保存到缓存中，供下次使用。</span></span><br><span class="line"><span class="comment">// 4. 调用 module.load() 读取模块内容，然后调用 module.compile() 编译执行（封装成一个沙箱）该模块</span></span><br><span class="line"><span class="comment">//   - 如果加载解析出错，那么从缓存中删除该模块</span></span><br><span class="line"><span class="comment">// 5. 返回 module.exports</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_load</span> = <span class="keyword">function</span> (<span class="params">request, parent, isMain</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&quot;Module._load REQUEST %s parent: %s&quot;</span>, request, parent.<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析文件名</span></span><br><span class="line">  <span class="keyword">var</span> filename = <span class="title class_">Module</span>.<span class="title function_">_resolveFilename</span>(request, parent, isMain);</span><br><span class="line">  <span class="comment">// 根据文件名到Module._cache对象上找有没有值</span></span><br><span class="line">  <span class="keyword">var</span> cachedModule = <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">  <span class="comment">// 如果有则导出</span></span><br><span class="line">  <span class="keyword">if</span> (cachedModule) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断核心模块中有没有该属性 有则加载</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">NativeModule</span>.<span class="title function_">nonInternalExists</span>(filename)) &#123;</span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&quot;load native module %s&quot;</span>, request);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NativeModule</span>.<span class="built_in">require</span>(filename);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个模块（Module对象）</span></span><br><span class="line">  <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="keyword">new</span> <span class="title class_">Module</span>(filename, parent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isMain) &#123;</span><br><span class="line">    process.<span class="property">mainModule</span> = <span class="variable language_">module</span>;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">id</span> = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存</span></span><br><span class="line">  <span class="title class_">Module</span>.<span class="property">_cache</span>[filename] = <span class="variable language_">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尝试加载模块</span></span><br><span class="line">  <span class="title function_">tryModuleLoad</span>(<span class="variable language_">module</span>, filename);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// !!!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. module.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tryModuleLoad</span>(<span class="params"><span class="variable language_">module</span>, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> threw = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 真正加载该模块</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">load</span>(filename);</span><br><span class="line">    threw = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// finally: 不管try报错与否都要执行这里的代码</span></span><br><span class="line">    <span class="keyword">if</span> (threw) &#123;</span><br><span class="line">      <span class="comment">// 从缓存中删除该模块</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="title class_">Module</span>.<span class="property">_cache</span>[filename];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. module.js</span></span><br><span class="line"><span class="comment">// Given a file name, pass it to the proper extension handler.</span></span><br><span class="line"><span class="comment">// 该模块中对要加载的模块进行编译</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">load</span> = <span class="keyword">function</span> (<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="title function_">debug</span>(<span class="string">&quot;load %j for module %j&quot;</span>, filename, <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">assert</span>(!<span class="variable language_">this</span>.<span class="property">loaded</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = filename;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">paths</span> = <span class="title class_">Module</span>.<span class="title function_">_nodeModulePaths</span>(path.<span class="title function_">dirname</span>(filename));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有filename则默认是.js</span></span><br><span class="line">  <span class="keyword">var</span> extension = path.<span class="title function_">extname</span>(filename) || <span class="string">&quot;.js&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Module</span>.<span class="property">_extensions</span>[extension]) extension = <span class="string">&quot;.js&quot;</span>;</span><br><span class="line">  <span class="title class_">Module</span>.<span class="property">_extensions</span>[extension](<span class="variable language_">this</span>, filename); <span class="comment">// 此行代码对被加载的模块实现了编译</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. module.js （编译）</span></span><br><span class="line"><span class="comment">// Native extension for .js</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_extensions</span>[<span class="string">&quot;.js&quot;</span>] = <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, filename</span>) &#123;</span><br><span class="line">  <span class="comment">// 说明 require() 加载模块是同步执行的</span></span><br><span class="line">  <span class="keyword">var</span> content = fs.<span class="title function_">readFileSync</span>(filename, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">_compile</span>(internalModule.<span class="title function_">stripBOM</span>(content), filename);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. module.js</span></span><br><span class="line"><span class="comment">// Run the file contents in the correct scope or sandbox. Expose</span></span><br><span class="line"><span class="comment">// the correct helper variables (require, module, exports) to</span></span><br><span class="line"><span class="comment">// the file.</span></span><br><span class="line"><span class="comment">// Returns exception, if any.</span></span><br><span class="line"><span class="comment">// 编译（用一个沙箱来包装）执行该模块</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_compile</span> = <span class="keyword">function</span> (<span class="params">content, filename</span>) &#123;</span><br><span class="line">  <span class="comment">// Remove shebang</span></span><br><span class="line">  <span class="keyword">var</span> contLen = content.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (contLen &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      content.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) === <span class="number">35</span> <span class="comment">/*#*/</span> &amp;&amp;</span><br><span class="line">      content.<span class="title function_">charCodeAt</span>(<span class="number">1</span>) === <span class="number">33</span> <span class="comment">/*!*/</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (contLen === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// Exact match</span></span><br><span class="line">        content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Find end of shebang line and slice it off</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; contLen; ++i) &#123;</span><br><span class="line">          <span class="keyword">var</span> code = content.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">          <span class="keyword">if</span> (code === <span class="number">10</span> <span class="comment">/*\n*/</span> || code === <span class="number">13</span> <span class="comment">/*\r*/</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i === contLen) content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Note that this actually includes the newline character(s) in the</span></span><br><span class="line">          <span class="comment">// new output. This duplicates the behavior of the regular expression</span></span><br><span class="line">          <span class="comment">// that was previously used to replace the shebang line</span></span><br><span class="line">          content = content.<span class="title function_">slice</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create wrapper function</span></span><br><span class="line">  <span class="keyword">var</span> wrapper = <span class="title class_">Module</span>.<span class="title function_">wrap</span>(content);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行模块</span></span><br><span class="line">  <span class="keyword">var</span> compiledWrapper = vm.<span class="title function_">runInThisContext</span>(wrapper, &#123;</span><br><span class="line">    <span class="attr">filename</span>: filename,</span><br><span class="line">    <span class="attr">lineOffset</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">displayErrors</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">_debugWaitConnect</span> &amp;&amp; process.<span class="property">_eval</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!resolvedArgv) &#123;</span><br><span class="line">      <span class="comment">// we enter the repl if we&#x27;re not given a filename argument.</span></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">argv</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">        resolvedArgv = <span class="title class_">Module</span>.<span class="title function_">_resolveFilename</span>(process.<span class="property">argv</span>[<span class="number">1</span>], <span class="literal">null</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolvedArgv = <span class="string">&quot;repl&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set breakpoint on module start</span></span><br><span class="line">    <span class="keyword">if</span> (filename === resolvedArgv) &#123;</span><br><span class="line">      <span class="keyword">delete</span> process.<span class="property">_debugWaitConnect</span>;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">Debug</span> = vm.<span class="title function_">runInDebugContext</span>(<span class="string">&quot;Debug&quot;</span>);</span><br><span class="line">      <span class="title class_">Debug</span>.<span class="title function_">setBreakPoint</span>(compiledWrapper, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> dirname = path.<span class="title function_">dirname</span>(filename);</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">require</span> = internalModule.<span class="property">makeRequireFunction</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">var</span> args = [<span class="variable language_">this</span>.<span class="property">exports</span>, <span class="built_in">require</span>, <span class="variable language_">this</span>, filename, dirname];</span><br><span class="line">  <span class="keyword">var</span> depth = internalModule.<span class="property">requireDepth</span>;</span><br><span class="line">  <span class="keyword">if</span> (depth === <span class="number">0</span>) stat.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">var</span> result = compiledWrapper.<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">exports</span>, args);</span><br><span class="line">  <span class="keyword">if</span> (depth === <span class="number">0</span>) stat.<span class="property">cache</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="补充-CommonJS-规范"><a href="#补充-CommonJS-规范" class="headerlink" title="补充 CommonJS 规范"></a>补充 CommonJS 规范</h2><ol><li><a href="https://www.commonjs.org/">CommonJS 规范</a></li><li><a href="https://www.commonjs.org/specs/modules/1.0/">模块的定义</a></li><li>总结：CommonJS 是为 JavaScript 语言制定的一种 模块规范、编程 API 规范</li><li>node.js 遵循了 CommonJS 规范</li><li>参考：<a href="https://www.cnblogs.com/littlebirdlbw/p/5670633.html">https://www.cnblogs.com/littlebirdlbw/p/5670633.html</a> <a href="https://blog.csdn.net/u014262793/article/details/114554180">https://blog.csdn.net/u014262793/article/details/114554180</a></li></ol><h2 id="关于-node-js-中-Module-详细介绍"><a href="#关于-node-js-中-Module-详细介绍" class="headerlink" title="关于 node.js 中 Module 详细介绍"></a>关于 node.js 中 Module 详细介绍</h2><p><a href="https://nodejs.org/dist/latest-v6.x/docs/api/modules.html">Module</a></p><h1 id="跨域方式-nodejs-篇"><a href="#跨域方式-nodejs-篇" class="headerlink" title="跨域方式 (nodejs 篇)"></a>跨域方式 (nodejs 篇)</h1><h2 id="跨域：jsonp"><a href="#跨域：jsonp" class="headerlink" title="跨域：jsonp"></a>跨域：jsonp</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (urlObj.<span class="property">pathname</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;/api/user&quot;</span>:</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;urlObj.query.cb&#125;</span>(&#123;&quot;name&quot;: &quot;gp145&quot;&#125;)`</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;404.&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;localhost:8080&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="跨域：CORS"><a href="#跨域：CORS" class="headerlink" title="跨域：CORS"></a>跨域：CORS</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(req.headers.cookie)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line">    <span class="comment">// 访问源: http://127.0.0.1:5500</span></span><br><span class="line">    <span class="keyword">let</span> origin = req.<span class="property">headers</span>.<span class="property">origin</span>;</span><br><span class="line">    <span class="comment">// 白名单</span></span><br><span class="line">    <span class="keyword">let</span> whiteList = [<span class="string">&quot;http://127.0.0.1:5500&quot;</span>, <span class="string">&quot;http://127.0.0.1:3500&quot;</span>];</span><br><span class="line">    <span class="comment">// 能进判断则证明是我白名单中的源</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(origin)) &#123;</span><br><span class="line">      <span class="comment">// 允许所有源访问</span></span><br><span class="line">      <span class="comment">// res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;)</span></span><br><span class="line">      <span class="comment">// 允许指定源访问</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line">      <span class="comment">// 设置允许哪个头(自定义)访问 多个使用 , 隔开</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;myheader&quot;</span>);</span><br><span class="line">      <span class="comment">// 设置允许哪种方式访问</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,DELETE&quot;</span>);</span><br><span class="line">      <span class="comment">// 设置预检的有效期</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="comment">// 允许客户端携带凭证</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">      <span class="comment">// 告诉客户端 设置的header是可以使用的</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="string">&quot;serverHeader&quot;</span>);</span><br><span class="line">      <span class="comment">// 服务器给客户端响应自定义的头</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;serverHeader&quot;</span>, <span class="string">&quot;333333&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3000启动&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置允许访问的源 *表示所有源都能访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">// 设置允许指定的源访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line"><span class="comment">// 设置允许哪个头访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 设置允许哪种方式访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT&quot;</span>);</span><br><span class="line"><span class="comment">// 设置预检的有效期</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 允许客户端携带凭证</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 告诉客户端 设置的header是可以使用的</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="string">&quot;mycookie,mycookie2&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    let xhr = new XMLHttpRequest()</span><br><span class="line">    xhr.open(&#x27;put&#x27;,&#x27;http://127.0.0.1:3000&#x27;, true)</span><br><span class="line">    // 携带自定义的头</span><br><span class="line">    // xhr.setRequestHeader(&#x27;myheader&#x27;, &#x27;11111&#x27;)</span><br><span class="line">    // 设置cookie</span><br><span class="line">    document.cookie = &#x27;stuId=6666666&#x27;</span><br><span class="line">    // xhr.cookie = &#x27;6666666&#x27;</span><br><span class="line">    // 允许携带凭证 =&gt; cookie</span><br><span class="line">    xhr.withCredentials = true</span><br><span class="line">    xhr.send(null)</span><br><span class="line">    xhr.onreadystatechange = function()&#123;</span><br><span class="line">      if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class="line">        console.log(xhr.getResponseHeader(&#x27;serverHeader&#x27;))</span><br><span class="line">        console.log(xhr.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="跨域：middleware（http-proxy-middware）"><a href="#跨域：middleware（http-proxy-middware）" class="headerlink" title="跨域：middleware（http-proxy-middware）"></a>跨域：middleware（http-proxy-middware）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = req.<span class="property">url</span>;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^\/api/</span>.<span class="title function_">test</span>(url)) &#123;</span><br><span class="line">      <span class="keyword">let</span> apiProxy = <span class="title function_">createProxyMiddleware</span>(<span class="string">&quot;/api&quot;</span>, &#123;</span><br><span class="line">        <span class="comment">// https://api.it120.cc/fyy/shop/goods/list</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://api.it120.cc&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// http-proy-middleware 在Node.js中使用的方法</span></span><br><span class="line">      <span class="title function_">apiProxy</span>(req, res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (url) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/index.html&quot;</span>:</span><br><span class="line">          res.<span class="title function_">end</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/search.html&quot;</span>:</span><br><span class="line">          res.<span class="title function_">end</span>(<span class="string">&quot;search.html&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          res.<span class="title function_">end</span>(<span class="string">&quot;[404]page not found.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    let xhr = new XMLHttpRequest()</span><br><span class="line">    // https://api.it120.cc/fyy/shop/goods/list</span><br><span class="line">    xhr.open(&#x27;get&#x27;,&#x27;http://localhost:3000/api/fyy/shop/goods/list&#x27;, true)</span><br><span class="line">    xhr.send(null)</span><br><span class="line">    xhr.onreadystatechange = function()&#123;</span><br><span class="line">      if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class="line">        console.log(xhr.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><p>待更新 ~</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3.0</title>
      <link href="/2022/07/07/vue/Vue3/"/>
      <url>/2022/07/07/vue/Vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3-简介"><a href="#vue3-简介" class="headerlink" title="vue3 简介"></a>vue3 简介</h1><p><img src="/img/md/v3_1.png"></p><ul><li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）</li><li>耗时 2 年多、<a href="https://github.com/vuejs/core/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个 RFC</a>、<a href="https://github.com/vuejs/core/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次 PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">99 位贡献者</a></li><li>github 上的 tags 地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h1 id="Vue3-带来了什么"><a href="#Vue3-带来了什么" class="headerlink" title="Vue3 带来了什么"></a>Vue3 带来了什么</h1><ol><li><p>性能的提升</p><ul><li>打包大小减少 41%</li><li>初次渲染快 55%, 更新渲染快 133%</li><li>内存减少 54%</li></ul></li><li><p>源码的升级</p></li></ol><ul><li>使用 Proxy 代替 defineProperty 实现响应式</li><li>重写虚拟 DOM 的实现和 Tree-Shaking</li></ul><ol start="3"><li><p>拥抱 TypeScript</p><ul><li>Vue3 可以更好的支持 TypeScript</li></ul></li><li><p>新的特性</p><ol><li><p>Composition API（组合 API）</p><ul><li>setup 配置</li><li>ref 与 reactive</li><li>watch 与 watchEffect</li><li>provide 与 inject</li><li>…</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除 keyCode 支持作为 v-on 的修饰符</li><li>…</li></ul></li></ol></li></ol><h1 id="创建-vue3-项目"><a href="#创建-vue3-项目" class="headerlink" title="创建 vue3 项目"></a>创建 vue3 项目</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">## 查看@vue/cli版本，确保@vue/cli版本在<span class="number">4.5</span><span class="number">.0</span>以上</span><br><span class="line">vue --version</span><br><span class="line">## 安装或者升级你的@vue/cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">## 创建</span><br><span class="line">vue create vue3_study</span><br><span class="line">## 启动</span><br><span class="line">cd vue3_study</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h1 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h1><p>在 Vue2 中，我们编写组件的方式是 <strong>OptionsAPI</strong>：</p><p>Options API 的一大特点就是在对应的属性中编写对应的功能模块；</p><p>比如 data 定义数据、methods 中定义方法、computed 中定义计算属性、watch 中监听属性改变，也包括生命 周期钩子；</p><p><strong>但是这种代码有一个很大的弊端</strong>：</p><p>当我们实现某一个功能时，这个功能对应的代码逻辑会被拆分到各个属性中；</p><p>当我们组件变得更大、更复杂时，逻辑关注点的列表就会增长，那么同一个功能的逻辑就会被拆分的很分散；</p><p>尤其对于那些一开始没有编写这些组件的人来说，这个组件的代码是难以阅读和理解的（阅读组件的其他人）；</p><p><strong>下面我们来看一个非常大的组件，其中的逻辑功能按照颜色进行了划分</strong>：</p><p>这种碎片化的代码使用理解和维护这个复杂的组件变得异常困难，并且隐藏了潜在的逻辑问题；</p><p>并且当我们处理单个逻辑关注点时，需要不断的跳到相应的代码块中；</p><table><thead><tr><th align="center">OptionsAPI</th><th align="center">Composition API</th></tr></thead><tbody><tr><td align="center"><img src="/img/md/v3_2.png"></td><td align="center"><img src="/img/md/v3_3.png"></td></tr></tbody></table><p>如果我们能将同一个逻辑关注 点相关的代码收集在一起会更好。</p><p>这就是<strong>Composition API</strong>想要做的事情，以及可以帮助我 们完成的事情。</p><p>也有人把 Vue Composition API 简称为<strong>VCA</strong>。</p><h1 id="认识-Composition-API"><a href="#认识-Composition-API" class="headerlink" title="认识 Composition API"></a>认识 Composition API</h1><p>那么既然知道 Composition API 想要帮助我们做什么事情，接下来看一下<strong>到底是怎么做</strong>呢？</p><p>为了开始使用 Composition API，我们需要有一个可以实际使用它（编写代码）的地方；</p><p>在 Vue 组件中，这个位置就是 setup 函数；</p><p><strong>setup</strong>其实就是组件的另外一个选项：</p><p>只不过这个选项强大到我们可以用它来替代之前所编写的大部分其他选项；</p><p>比如 methods、computed、watch、data、生命周期等等；</p><p><strong>接下来我们一起学习这个函数的使用</strong>：</p><p>函数的参数</p><p>函数的返回值</p><h2 id="setup-函数的参数"><a href="#setup-函数的参数" class="headerlink" title="setup 函数的参数"></a>setup 函数的参数</h2><p>我们先来研究一个 setup 函数的参数，它主要有<strong>两个参数</strong>：</p><p>第一个参数：props</p><p>第二个参数：context</p><p>props 非常好理解，它其实就是<strong>父组件传递过来的属性</strong>会被放到 props 对象中，我们在<strong>setup 中如果需要使用</strong>，那么就可以直接通过 props 参数获取：</p><p>对于定义 props 的类型，我们还是和之前的规则是一样的，在 props 选项中定义；</p><p>并且在 template 中依然是可以正常去使用 props 中的属性，比如 message；</p><p>如果我们在 setup 函数中想要使用 props，那么不可以通过 this 去获取（后面我会讲到为什么）；</p><p>因为 props 有直接作为参数传递到 setup 函数中，所以我们可以直接通过参数来使用即可；</p><p>另外一个参数是<strong>context</strong>，我们也称之为是一个<strong>SetupContext</strong>，它里面包含<strong>三个属性</strong>：</p><ul><li><strong>attrs</strong>：所有的非 prop 的 attribute；</li><li><strong>slots</strong>：父组件传递过来的插槽（这个在以渲染函数返回时会有作用，后面会讲到）；</li><li><strong>emit</strong>：当我们组件内部需要发出事件时会用到 emit（因为我们不能访问 this，所以不可以通过 this.$emit 发出事件）；</li></ul><h2 id="setup-函数的返回值"><a href="#setup-函数的返回值" class="headerlink" title="setup 函数的返回值"></a>setup 函数的返回值</h2><ol><li><strong>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</strong></li><li>若返回一个渲染函数：则可以自定义渲染内容。（了解）</li></ol><p><strong>注意点：</strong></p><ol><li><p>尽量不要与 Vue2.x 配置混用</p><ul><li>Vue2.x 配置（data、methos、computed…）中可以访问到 setup 中的属性、方法。</li><li>但在 setup 中不能访问到 Vue2.x 配置（data、methos、computed…）。</li><li>如果有重名, setup 优先。</li></ul></li><li><p>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</p></li></ol><h2 id="另外注意：setup-不可以使用-this"><a href="#另外注意：setup-不可以使用-this" class="headerlink" title="另外注意：setup 不可以使用 this"></a>另外注意：setup 不可以使用 this</h2><p><strong>官方关于 this 有这样一段描述</strong></p><p>表达的含义是 this 并没有指向当前组件实例；</p><p>并且在 setup 被调用之前，data、computed、methods 等都没有被解析；</p><p>所以无法在 setup 中获取 this；</p><p><img src="/img/md/v3_4.png"></p><p><strong>其实在之前的这段描述是和源码有出入的：</strong></p><p>之前的描述大概含义是不可以使用 this 是因为组件实例还没有被创建出来；</p><p>通过阅读源码发现，代码是按照如下顺序执行的：</p><p>调用 createComponentInstance 创建组件实 例；</p><p>调用 setupComponent 初始化 component 内 部的操作；</p><p>调用 setupStatefulComponent 初始化有状态的组件；</p><p>在 setupStatefulComponent 取出了 setup 函 数；</p><p>通过 callWithErrorHandling 的函数执行 setup；</p><p>从上面的代码我们可以看出， <strong>组件的 instance 肯定是在执行 setup 函数之前就创建出来了。</strong></p><p><img src="/img/md/v3_5.png"></p><h1 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h1><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x 双向数据绑定原理是通过Objcet.defineProperty来实现的</span></span><br><span class="line"><span class="comment">// 这种方式有缺点: 数组的长度 数组的内容发生变化检测不到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">phone</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// let obj = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// 视图更新的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视图更新了 ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = [<span class="string">&quot;push&quot;</span>, <span class="string">&quot;pop&quot;</span>, <span class="string">&quot;shift&quot;</span>, <span class="string">&quot;unshift&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;reverse&quot;</span>, <span class="string">&quot;splice&quot;</span>];</span><br><span class="line"><span class="comment">// 将数组的原型保存一份</span></span><br><span class="line"><span class="keyword">let</span> arrProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">// 创建原型 将数组原型拷贝一份</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrProto);</span><br><span class="line"><span class="comment">// 重写数组的方法</span></span><br><span class="line">methods.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line">  proto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// AOP 面向切面编程</span></span><br><span class="line">    <span class="comment">// 改变了数组的数据</span></span><br><span class="line">    arrProto[method].<span class="title function_">call</span>(<span class="variable language_">this</span>, ...<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// 重新渲染视图</span></span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断一个对象是不是数组</span></span><br><span class="line">  <span class="comment">// if(Object.prototype.toString.call(obj) === &#x27;[object Array]&#x27;)&#123;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="comment">// 让观测的对象的原型和我们自己重写的原型建立关系</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = proto;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果观察的是一个对象的话 对其属性进行响应式监听(set、get)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&quot;[object Object]&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 取出对象中的每一个键和值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 调用响应式处理函数</span></span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, key, obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 观察obj对象</span></span><br><span class="line"><span class="title function_">observe</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式处理</span></span><br><span class="line"><span class="comment">// Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 检测对象的属性值是否还是对象</span></span><br><span class="line">  <span class="title function_">observe</span>(val);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测设置的值是不是对象</span></span><br><span class="line">      <span class="title function_">observe</span>(newVal);</span><br><span class="line">      <span class="comment">// 新值和旧值不相等的时候</span></span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="comment">// 覆盖掉原来的val值</span></span><br><span class="line">        val = newVal;</span><br><span class="line">        <span class="comment">// 通知render函数重新渲染视图</span></span><br><span class="line">        <span class="title function_">render</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// obj.age = 20</span></span><br><span class="line"><span class="comment">// console.log(obj.name, obj.age);</span></span><br><span class="line"><span class="comment">// 至此 基本可以实现数据发生变化 视图更新的效果</span></span><br><span class="line"><span class="comment">// 但是 如果数据有多层呢 也就是属性对应的值也是对象?</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;huawei&#x27;</span></span><br><span class="line"><span class="comment">// console.log(obj.phone.name);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改的值和原来的值一样 不需要重新渲染视图</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;iphone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果重新为对象obj的phone赋值一个新的对象呢? 视图要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone = &#123;name: &#x27;huawei&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并且当修改新的对象的属性值时 视图也要重新渲染</span></span><br><span class="line"><span class="comment">// obj.phone.name = &#x27;zs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为对象新增属性值呢? 也是没有办法监测到的</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;man&#x27;</span></span><br><span class="line"><span class="comment">// $set来解决这个</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$myset</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">splice</span>(key, val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">defineReactive</span>(obj, key, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $myset(obj, &#x27;sex&#x27;, &#x27;man&#x27;)</span></span><br><span class="line"><span class="comment">// 修改新增的属性值 视图也能更新</span></span><br><span class="line"><span class="comment">// obj.sex = &#x27;woman&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = Object.assign(obj.phone, &#123;price: &#x27;666&#x27;&#125;)</span></span><br><span class="line"><span class="comment">// obj.phone.price = 888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.phone = &#123;...obj.phone, ...&#123;price: &#x27;666&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">// obj.phone.price = &#x27;888&#x27;</span></span><br><span class="line"><span class="comment">// 以后vue涉及到给data中的对象新增属性时 有三种方式</span></span><br><span class="line"><span class="comment">// 1、this.$set() || Vue.set()</span></span><br><span class="line"><span class="comment">// 2、obj = Object.assign(原对象, 新对象(新增的属性:值))</span></span><br><span class="line"><span class="comment">// 2、obj = &#123;...原对象, ...新对象(新增的属性:值)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================== 数组 ======================</span></span><br><span class="line"><span class="comment">// 数组的响应式数据处理依赖的并不是Object.defineProperty 而是对数组的能够引起数据变化的方法进行重写</span></span><br><span class="line"><span class="comment">// obj.push(6)</span></span><br><span class="line"><span class="comment">// obj.length ++</span></span><br><span class="line"><span class="comment">// obj[0] = 88</span></span><br><span class="line"><span class="comment">// $myset(obj, &#x27;0&#x27;, 66)</span></span><br></pre></td></tr></table></figure><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue3响应式原理利用了es6提供的proxy Api</span></span><br><span class="line"><span class="comment">// 可以直接监听到对象和数组内容及长度的变化</span></span><br><span class="line"><span class="comment">// 缺点: 兼容性差 支持就用proxy 不支持就用Objcet.defineProperty</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="attr">girlFriend</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;刘亦菲&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视图重新渲染 ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="comment">// Reflect.get(target, propertyKey[, receiver])</span></span><br><span class="line">    <span class="comment">// 获取对象身上某个属性的值，类似于 target[name]。</span></span><br><span class="line">    <span class="comment">// 如果属性的值是一个对象的话 则重新进行代理 设置set&amp;get</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target[key] == <span class="string">&quot;object&quot;</span> &amp;&amp; target[key] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target[key], handler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, val</span>) &#123;</span><br><span class="line">    <span class="comment">// if(target[key] == &#x27;length&#x27;) return true</span></span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, val);</span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">    <span class="comment">// return true表示赋值成功 如果不返回true 在严格模式下可能会报TypeError</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler);</span><br><span class="line"><span class="comment">// 使用代理后的对象</span></span><br><span class="line"><span class="comment">// console.log(proxy.name);</span></span><br><span class="line"><span class="comment">// console.log(proxy.grilFriend);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment">// 修改深层次的对象的属性 无法监听到</span></span><br><span class="line"><span class="comment">// proxy.grilFriend.name = &#x27;黄圣依&#x27;</span></span><br><span class="line"><span class="comment">// console.log(proxy.name);</span></span><br><span class="line"><span class="comment">// console.log(proxy.grilFriend);</span></span><br><span class="line"><span class="comment">// console.log(obj.name);</span></span><br><span class="line"><span class="comment">// console.log(obj.grilFriend);</span></span><br><span class="line"></span><br><span class="line">proxy.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">proxy.<span class="property">arr</span>.<span class="property">length</span>++;</span><br><span class="line"><span class="comment">// console.log(proxy.arr.length);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">arr</span>.<span class="property">length</span>);</span><br></pre></td></tr></table></figure><h1 id="reactive-函数"><a href="#reactive-函数" class="headerlink" title="reactive 函数"></a>reactive 函数</h1><ul><li>作用: 定义一个<font color= "#FF0000"><strong>对象类型</strong></font>的响应式数据（基本类型不要用它，控制台会报警告，要用 ref 函数）</li><li>语法：const 代理对象&#x3D; reactive(源对象)<ul><li>接收一个对象（或数组），返回一个<font color= "#FF0000"><strong>代理对象（Proxy 的实例对象，简称 proxy 对象）</strong></font></li></ul></li><li>reactive 定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="为什么就可以变成响应式的呢？"><a href="#为什么就可以变成响应式的呢？" class="headerlink" title="为什么就可以变成响应式的呢？"></a>为什么就可以变成响应式的呢？</h2><p>这是因为当我们使用 reactive 函数处理我们的数据之后，数据再次被使用时就会进行依赖收集；</p><p>当数据发生改变时，所有收集到的依赖都是进行对应的响应式操作（比如更新界面）；</p><p>事实上，我们编写的 data 选项，也是在内部交给了 reactive 函数将其变成响应式对象的；</p><h2 id="reactive-判断的-API"><a href="#reactive-判断的-API" class="headerlink" title="reactive 判断的 API"></a>reactive 判断的 API</h2><h3 id="isProxy"><a href="#isProxy" class="headerlink" title="isProxy"></a>isProxy</h3><p>检查对象是否是由 reactive 或 readonly 创建的 proxy。</p><h3 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive"></a>isReactive</h3><p>检查对象是否是由 reactive 创建的响应式代理：</p><p>如果该代理是 readonly 建的，但包裹了由 reactive 创建的另一个代理，它也会返回 true；</p><h3 id="isReadonly"><a href="#isReadonly" class="headerlink" title="isReadonly"></a>isReadonly</h3><p>检查对象是否是由 readonly 创建的只读代理。</p><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h3><p>返回 reactive 或 readonly 代理的原始对象（不建议保留对原始对象的持久引用。请谨慎使用）。</p><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a>shallowReactive</h3><p>创建一个响应式代理，它跟踪其自身 property 的响应性，但不执行嵌套对象的深层响应式转换 (深层还是原生对象)。</p><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a>shallowReadonly</h3><p>创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换（深层还是可读、可写的）。</p><p>只处理对象最外层属性的响应式（浅响应式）。</p><p>深度监听存在的问题： 如果数据量比较大，非常消耗性能。 有些时候我们并不需要对数据进行深度监听。 这个时候就没有必要使用 ref 和 reactive</p><h1 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a>ref 函数</h1><ul><li>作用: 定义一个响应式的数据</li><li>语法: const xxx &#x3D; ref(initValue)<ul><li>创建一个包含响应式数据的<font color= "#FF0000"> <strong>引用对象（reference 对象，简称 ref 对象）, 其内部的值是在 ref.value 属性中被维护的</strong></font></li><li>JS 中操作数据： xxx.value</li><li>模板中读取数据: vue 自动帮我们进行解包操作，不需要.value，直接：<div></div></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠 Object.defineProperty()的 get 与 set 完成的。</li><li>对象类型的数据：内部 求助 了 Vue3.0 中的一个新函数—— reactive 函数。</li></ul></li></ul><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>如果我们使用 ES6 的解构语法，对 reactive 返回的对象进行解构获取值，那么之后无论是<strong>修改解构后的变量，还是修改 reactive 返回的 state 对象</strong>，数据都不再是响应式的：</p><p><img src="/img/md/v3_6.png"></p><p>那么有没有办法让我们<strong>解构出来的属性是响应式</strong>的呢？</p><p>Vue 为我们提供了一个 toRefs 的函数，可以将 reactive 返回的对象中的属性都转成 ref；</p><p>那么我们再次进行结构出来的 name 和 age 本身都是 ref 的；</p><p><img src="/img/md/v3_7.png"></p><p>这种做法相当于已经在 state.name 和 ref.value 之间建立了 链接，任何一个修改都会引起另外一个变化；</p><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><p>如果我们只希望转换一个 reactive 对象中的属性为 ref, 那么可以使用 toRef 的方法</p><p><img src="/img/md/v3_8.png"></p><p>实际应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p><h2 id="ref-的其它-API"><a href="#ref-的其它-API" class="headerlink" title="ref 的其它 API"></a>ref 的其它 API</h2><h3 id="unref"><a href="#unref" class="headerlink" title="unref"></a>unref</h3><p>如果我们想要<strong>获取一个 ref 引用中的 value</strong>，那么也可以通过<strong>unref</strong>方法：</p><p>如果参数是一个 ref，则返回内部值，否则返回参数本身；</p><p>这是 val &#x3D; isRef(val) ? val.value : val 的语法糖函数；</p><h3 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h3><p>判断值是否是一个 ref 对象。</p><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a>shallowRef</h3><p>创建一个浅层的 ref 对象；</p><h3 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef"></a>triggerRef</h3><p>手动触发和 shallowRef 相关联的副作用</p><p><img src="/img/md/v3_9.png"></p><h3 id="shallowReactive-与-shallowRef-的用法"><a href="#shallowReactive-与-shallowRef-的用法" class="headerlink" title="shallowReactive 与 shallowRef 的用法"></a>shallowReactive 与 shallowRef 的用法</h3><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li><li>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</li><li>使用场景：<ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是产生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li></ul></li></ul><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><p>创建一个<strong>自定义的 ref</strong>，并<strong>对其依赖项跟踪和更新触发</strong>进行<strong>显示控制</strong>：</p><p>它需要一个工厂函数，该函数接受 track 和 trigger 函数作为参数；</p><p>并且应该返回一个带有 get 和 set 的对象；</p><p><strong>案例</strong>：</p><p>对双向绑定的属性进行 debounce(节流)的操作；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;keyword&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;ref,customRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;Demo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//自定义一个myRef</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">myRef</span>(<span class="params">value,delay</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> timer</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//通过customRef去实现自定义</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">track</span>() <span class="comment">//告诉Vue这个value值是需要被“追踪”的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> value</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="built_in">clearTimeout</span>(timer)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">value = newValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">trigger</span>() <span class="comment">//告诉Vue去更新界面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,delay)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> keyword = <span class="title function_">myRef</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">500</span>) <span class="comment">//使用程序员自定义的ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">keyword</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="ref-amp-reactive"><a href="#ref-amp-reactive" class="headerlink" title="ref &amp; reactive"></a>ref &amp; reactive</h1><ul><li><p>从定义数据角度对比：</p><ul><li>ref 用来定义：<font color= "#FF0000"> <strong>基本类型数据</strong></font>。</li><li>reactive 用来定义：<font color= "#FF0000"> <strong>对象（或数组）类型数据</strong></font>。</li><li>备注：ref 也可以用来定义<font color= "#FF0000"> <strong>对象（或数组）类型数据</strong></font>, 它内部会自动通过 reactive 转为<font color= "#FF0000"> <strong>代理对象</strong></font>。</li></ul></li><li><p>从原理角度对比：</p><ul><li>ref 通过 Object.defineProperty()的 get 与 set 来实现响应式（数据劫持）。</li><li>reactive 通过使用<font color= "#FF0000"><strong>Proxy</strong></font>来实现响应式（数据劫持）, 并通过<font color= "#FF0000"><strong>Reflect</strong></font>操作<font color= "#ffa500"><strong>源对象</strong></font>内部的数据。</li></ul></li><li><p>从使用角度对比：</p><ul><li>ref 定义的数据：操作数据<font color= "#FF0000"><strong>需要</strong></font>.value，读取数据时模板中直接读取<font color= "#FF0000"><strong>不需要</strong></font>.value。</li><li>reactive 定义的数据：操作数据与读取数据：<font color= "#FF0000"><strong>均不需要</strong></font>.value。</li></ul></li></ul><h1 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h1><p>我们通过<strong>reactive 或者 ref 可以获取到一个响应式的对象</strong>，但是某些情况下，我们<strong>传入给其他地方（组件）的这个 响应式对象希望在另外一个地方（组件）被使用</strong>，但是<strong>不能被修改</strong>，这个时候<strong>如何防止这种情况</strong>的出现呢？</p><p>Vue3 为我们提供了 readonly 的方法；</p><p>readonly 会返回原生对象的只读代理（也就是它依然是一个 Proxy，这是一个 proxy 的 set 方法被劫持，并且不 能对其进行修改）；</p><h2 id="在开发中常见的-readonly-方法会传入三个类型的参数："><a href="#在开发中常见的-readonly-方法会传入三个类型的参数：" class="headerlink" title="在开发中常见的 readonly 方法会传入三个类型的参数："></a>在开发中常见的 readonly 方法会传入三个类型的参数：</h2><ol><li>类型一：普通对象；</li><li>类型二：reactive 返回的对象；</li><li>类型三：ref 的对象；</li></ol><h2 id="在-readonly-的使用过程中，有如下规则："><a href="#在-readonly-的使用过程中，有如下规则：" class="headerlink" title="在 readonly 的使用过程中，有如下规则："></a>在 readonly 的使用过程中，有如下规则：</h2><p>readonly 返回的对象都是不允许修改的；</p><p>但是经过 readonly 处理的原来的对象是允许被修改的；</p><p>比如 const info &#x3D; readonly(obj)，info 对象是不允许被修改的；</p><p>当 obj 被修改时，readonly 返回的 info 对象也会被修改；</p><p>但是我们不能去修改 readonly 返回的对象 info；</p><p>其实本质上就是 readonly 返回的对象的 setter 方法被劫持了而已；</p><p><strong>应用场景</strong>：在我们传递给其他组件数据时，往往希望其他组件使用我们传递的内容，但是不允许它们修改时，就可以使用 readonly 了；</p><h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="toRaw-amp-markRaw"><a href="#toRaw-amp-markRaw" class="headerlink" title="toRaw &amp; markRaw"></a>toRaw &amp; markRaw</h2><ul><li>toRaw<ul><li>作用：将一个由 reactive 生成的<font color= "#ffa500"><strong>响应式对象</strong></font>转为<font color= "#ffa500"><strong>普通对象</strong></font>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>使用场景：<ul><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; oldObj &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeInfo&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; toRaw, reactive, markRaw &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let obj = reactive(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   name: &#x27;zs&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取 reactive 或 readonly 代理的原始对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let oldObj = toRaw(obj)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(oldObj);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ======= markRaw ========</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 标记一个对象，使其永远不会再成为响应式对象。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> oldObj = <span class="title function_">markRaw</span>(obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oldObj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 设置响应式失效</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    oldObj = <span class="title function_">reactive</span>(oldObj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      oldObj.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 数据发生变化 =&gt; 视图没有更新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(oldObj.<span class="property">name</span> );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      oldObj,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      changeInfo</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h1><p><img src="/img/md/v3_10.png"></p><ul><li>作用：实现<font color= "#FF0000"><strong>祖与后代组件间</strong></font>通信</li><li>小套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据</li></ul><p>例：<br>祖组件中:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后代组件中：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h1><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    姓名: &#123;&#123; fullName &#125;&#125;&lt;br&gt;</span><br><span class="line">    修改姓名: &lt;input type=&quot;text&quot; v-model=&quot;fullName&quot;&gt;&lt;br&gt;</span><br><span class="line">    姓:&lt;input type=&quot;text&quot; v-model=&quot;stu.firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">    名:&lt;input type=&quot;text&quot; v-model=&quot;stu.lastName&quot;&gt;&lt;br&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // vue2的computed简单写法</span><br><span class="line">  // computed: &#123;</span><br><span class="line">  //   fullName() &#123;</span><br><span class="line">  //     return this.stu.firstName + &#x27;-&#x27; + this.stu.lastName</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;,</span><br><span class="line">  // vue2的computed完整写法</span><br><span class="line">  // computed: &#123;</span><br><span class="line">  //   fullName: &#123;</span><br><span class="line">  //     get()&#123;</span><br><span class="line">  //       return this.stu.firstName + &#x27;-&#x27; + this.stu.lastName</span><br><span class="line">  //     &#125;,</span><br><span class="line">  //     set()&#123;</span><br><span class="line">  //       console.log(111);</span><br><span class="line">  //     &#125;</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let stu = reactive(&#123;</span><br><span class="line">      firstName: &#x27;张&#x27;,</span><br><span class="line">      lastName: &#x27;三&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    // vu3 computed 简写 =&gt; 修改报警告需要提供setter</span><br><span class="line">    // let fullName = computed(()=&gt;&#123;</span><br><span class="line">    //   return stu.firstName + &#x27;-&#x27; + stu.lastName</span><br><span class="line">    // &#125;)</span><br><span class="line">    // 挂载到stu上</span><br><span class="line">    // stu.fullName = computed(()=&gt;&#123;</span><br><span class="line">    //   return stu.firstName + &#x27;-&#x27; + stu.lastName</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // vue3 computed 完整写法 =&gt; 可读可写</span><br><span class="line">    let fullName = computed(&#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return stu.firstName + &#x27;-&#x27; + stu.lastName</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val)&#123;</span><br><span class="line">        let arr = val.split(&#x27;-&#x27;)</span><br><span class="line">        stu.firstName = arr[0]</span><br><span class="line">        stu.lastName = arr[1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      stu,</span><br><span class="line">      fullName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><ul><li>与 Vue2.x 中 watch 配置功能一致</li><li>两个小“坑”：<ul><li>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</li><li>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  sum,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum, msg], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum或msg变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">   若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">   若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  person,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">false</span> &#125;</span><br><span class="line">); <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">job</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  [<span class="function">() =&gt;</span> person.<span class="property">job</span>, <span class="function">() =&gt;</span> person.<span class="property">name</span>],</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">job</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">); <span class="comment">//此处由于监视的是reactive定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure><p>在前面的 Options API 中，我们可以通过 watch 选项来侦听 data 或者 props 的数据变化，当数据变化时执行某一些 操作。</p><p>而在 Composition API 中，我们可以使用 watchEffect 和 watch 来完成响应式数据的侦听；</p><p>watchEffect 用于自动收集响应式数据的依赖；</p><p>watch 需要手动指定侦听的数据源；</p><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><ul><li>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</li><li>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。watchEffect 是默认会执行一次。</li><li>watchEffect 有点像 computed：<ul><li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="watchEffect-停止侦听"><a href="#watchEffect-停止侦听" class="headerlink" title="watchEffect 停止侦听"></a>watchEffect 停止侦听</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ref定义的响应式数据</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> stu = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">      <span class="attr">friend</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">addNum</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      ++num.<span class="property">value</span></span><br><span class="line">      <span class="keyword">if</span> (num.<span class="property">value</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="comment">// 停止侦听</span></span><br><span class="line">        <span class="title function_">stop</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 首先，watchEffect传入的函数会被立即执行一次，并且在执行的过程中会收集依赖；</span></span><br><span class="line">    <span class="comment">// 其次，只有收集的依赖发生变化时，watchEffect传入的函数才会再次执行；</span></span><br><span class="line">    <span class="keyword">let</span> stop = <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">onInvalidate</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 没有所谓的深度监视</span></span><br><span class="line">      <span class="comment">// console.log(num.value, stu.friend.name);</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">value</span>);</span><br><span class="line">      <span class="title function_">onInvalidate</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;取消上一次请求~&#x27;</span>);</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> timeId = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发起请求~&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">      addNum,</span><br><span class="line">      ...<span class="title function_">toRefs</span>(stu)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="watchEffect-清除副作用"><a href="#watchEffect-清除副作用" class="headerlink" title="watchEffect 清除副作用"></a>watchEffect 清除副作用</h2><p><font color= "#FF0000"><strong>什么是副作用呢？</strong></font></p><p>比如在开发中我们需要在侦听函数中执行网络请求，但是在网络请求还没有达到的时候，我们停止了侦听器， 或者侦听器侦听函数被再次执行了。</p><p>那么上一次的网络请求应该被取消掉，这个时候我们就可以清除上一次的副作用；</p><p>在我们给 watchEffect 传入的函数被回调时，其实可以获取到一个参数：onInvalidate</p><p>当<font color= "#ffa500"><strong>副作用即将重新执行</strong></font> 或者 <font color= "#ffa500"><strong>侦听器被停止</strong></font> 时会执行该函数传入的回调函数；</p><p>我们可以在传入的回调函数中，执行一些清除工作；</p><p><font color= "#FF0000"><strong>代码参上</strong></font></p><h2 id="setup-中使用-ref"><a href="#setup-中使用-ref" class="headerlink" title="setup 中使用 ref"></a>setup 中使用 ref</h2><p>在学习 watchEffect 执行时机之前，先补充一个知识：在 setup 中如何使用 ref 获取元素或者组件？</p><p>其实非常简单，我们只需要定义一个 ref 对象，绑定到元素或者组件的 ref 属性上即可；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// vue2中的ref是用来获取dom元素或者组件实例的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(this.$refs.title);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// vue3中没有 this 获取不到</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> title = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(title.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      title</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="watchEffect-的执行时机"><a href="#watchEffect-的执行时机" class="headerlink" title="watchEffect 的执行时机"></a>watchEffect 的执行时机</h2><p>默认情况下，组件的更新会在副作用函数执行之前：</p><p>如果我们希望在副作用函数中获取到元素，是否可行呢？</p><p>如上代码我们会发现打印结果打印了两次：</p><p>这是因为 setup 函数在执行时就会立即执行传入的副作用函数，这个时候 DOM 并没有挂载，所以打印为 null；</p><p>而当 DOM 挂载时，会给 title 的 ref 对象赋值新的值，副作用函数会再次执行，打印出来对应的元素；</p><h2 id="调整-watchEffect-的执行时机"><a href="#调整-watchEffect-的执行时机" class="headerlink" title="调整 watchEffect 的执行时机"></a>调整 watchEffect 的执行时机</h2><p>如果我们希望在第一次的时候就打印出来对应的元素呢？</p><p>这个时候我们需要改变副作用函数的执行时机；</p><p>它的默认值是 pre，它会在元素 挂载 或者 更新 之前执行；</p><p>所以我们会先打印出来一个空的，当依赖的 title 发生改变时，就会再次执行一次，打印出元素；</p><p>flush 选项还接受 sync，这将强制效果始终同步触发。然而，这是低效的，应该很少需要。</p><h2 id="watch-函数总结"><a href="#watch-函数总结" class="headerlink" title="watch 函数总结"></a>watch 函数总结</h2><p>与 watchEffect 的比较，watch 允许我们：</p><p>懒执行副作用（第一次不会直接执行）；</p><p>更具体的说明当哪些状态发生变化时，触发侦听器的执行；</p><p>访问侦听状态变化前后的值；</p><h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><ul><li><p>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名：</p><ul><li><font color= "#ffa500"><strong>beforeDestroy</strong></font>改名为 <font color= "#ffa500"><strong>beforeUnmount</strong></font></li><li><font color= "#ffa500"><strong>destroyed</strong></font>改名为 <font color= "#ffa500"><strong>unmounted</strong></font></li></ul></li><li><p>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：</p><ul><li><font color= "#ffa500"><strong>beforeCreate</strong></font>&#x3D;&#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>setup()</strong></font></li><li><font color= "#ffa500"><strong>created</strong></font>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>setup()</strong></font></li><li><font color= "#ffa500"><strong>beforeMount</strong></font> &#x3D;&#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>onBeforeMount</strong></font></li><li><font color= "#ffa500"><strong>mounted</strong></font>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>onMounted</strong></font></li><li><font color= "#ffa500"><strong>beforeUpdate</strong></font>&#x3D;&#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>onBeforeUpdate</strong></font></li><li><font color= "#ffa500"><strong>updated</strong></font>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>onUpdated</strong></font></li><li><font color= "#ffa500"><strong>beforeUnmount</strong></font> &#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>onBeforeUnmount</strong></font></li><li><font color= "#ffa500"><strong>unmounted</strong></font> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<font color= "#ffa500"><strong>onUnmounted</strong></font></li></ul></li></ul><p><img src="/img/md/v3_11.png"></p><h1 id="自定义-hook-函数"><a href="#自定义-hook-函数" class="headerlink" title="自定义 hook 函数"></a>自定义 hook 函数</h1><ul><li>什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。</li><li>类似于 vue2.x 中的 mixin。</li><li>自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。</li></ul><h2 id="useCounter"><a href="#useCounter" class="headerlink" title="useCounter"></a>useCounter</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count.<span class="property">value</span>--;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment,</span><br><span class="line">    decrement,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useTitle"><a href="#useTitle" class="headerlink" title="useTitle"></a>useTitle</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">title = <span class="string">&quot;默认title&quot;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> titleRef = <span class="title function_">ref</span>(title);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">watch</span>(titleRef, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = titleRef.<span class="property">value</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> titleRef;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; doubleCount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> useCounter <span class="keyword">from</span> <span class="string">&#x27;./hooks/useCounter&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> useTitle <span class="keyword">from</span> <span class="string">&#x27;./hooks/useTitle&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> counter = <span class="title function_">reactive</span>(<span class="title function_">useCounter</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">useTitle</span>().<span class="property">value</span> = <span class="string">&#x27;使用hooks&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ...<span class="title function_">toRefs</span>(counter)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="setup-的顶层编写方式"><a href="#setup-的顶层编写方式" class="headerlink" title="setup 的顶层编写方式"></a>setup 的顶层编写方式</h1><blockquote><p>博客：<a href="https://blog.csdn.net/weixin_43931876/article/details/120058286">https://blog.csdn.net/weixin_43931876/article/details/120058286</a><br>官网：<a href="https://v3.cn.vuejs.org/api/sfc-spec.html#script-setup">https://v3.cn.vuejs.org/api/sfc-spec.html#script-setup</a></p></blockquote><h1 id="新增组件"><a href="#新增组件" class="headerlink" title="新增组件"></a>新增组件</h1><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><ul><li>什么是 Teleport？—— Teleport 是一种能够将我们的<font color= "#FF0000"><strong>组件 html 结构移动</strong></font>到指定位置的技术</li></ul><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    App组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Father</span>&gt;</span><span class="tag">&lt;/<span class="name">Father</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Father</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Father.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Father</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: hotpink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Father.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Father组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Son</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./Son.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Son</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.father</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Son.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Son组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = true&quot;</span>&gt;</span>显示弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> isShow = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      isShow</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.son</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: yellow;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">body</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.dialog</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: azure;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.mask</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li></ul><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    App组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father</span>&gt;</span><span class="tag">&lt;/<span class="name">Father</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>精彩内容正在加载中 ...<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 静态加载 同步</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// import Father from &#x27;./components/Father.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 异步加载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title class_">Father</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Father.vue&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Father</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: hotpink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Father.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Father组件</span></span><br><span class="line"><span class="language-xml">    &#123;&#123; num &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">async</span> <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> num = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// return new Promise((resolve, rejects)=&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   setTimeout(function()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     resolve(&#123;num&#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   &#125;, 3000)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, rejects</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">resolve</span>(&#123; num &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="number">3000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> res</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.father</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="全局-API-的转移"><a href="#全局-API-的转移" class="headerlink" title="全局 API 的转移"></a>全局 API 的转移</h1><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li>例如：注册全局组件、注册全局指令等。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3.0 中对这些 API 做出了调整：</p><ul><li>将全局的 API，即：Vue.xxx 调整到应用实例（app）上</li></ul><table><thead><tr><th align="center">2.x 全局 API（Vue）</th><th align="center">3.x 实例 API (app)</th></tr></thead><tbody><tr><td align="center">Vue.config.xxxx</td><td align="center">app.config.xxxx</td></tr><tr><td align="center">Vue.config.productionTip</td><td align="center"><font color='#FF0000'><strong>移除</strong></font></td></tr><tr><td align="center">Vue.component</td><td align="center">app.component</td></tr><tr><td align="center">Vue.directive</td><td align="center">app.directive</td></tr><tr><td align="center">Vue.mixin</td><td align="center">app.mixin</td></tr><tr><td align="center">Vue.use</td><td align="center">app.use</td></tr><tr><td align="center">Vue.prototype</td><td align="center">app.config.globalProperties</td></tr></tbody></table><h1 id="其它改变"><a href="#其它改变" class="headerlink" title="其它改变"></a>其它改变</h1><ul><li><p>data 选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li>Vue2.x 写法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">v</span>-enter,</span><br><span class="line">.<span class="property">v</span>-leave-to &#123;</span><br><span class="line"><span class="attr">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">v</span>-leave,</span><br><span class="line">.<span class="property">v</span>-enter-to &#123;</span><br><span class="line"><span class="attr">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Vue3.x 写法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">v</span>-enter-<span class="keyword">from</span>,</span><br><span class="line">   .<span class="property">v</span>-leave-to &#123;</span><br><span class="line">   <span class="attr">opacity</span>: <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   .<span class="property">v</span>-leave-<span class="keyword">from</span>,</span><br><span class="line">   .<span class="property">v</span>-enter-to &#123;</span><br><span class="line">   <span class="attr">opacity</span>: <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><font color='#FF0000'><strong>移除</strong></font>keyCode 作为 v-on 的修饰符，同时也不再支持 config.keyCodes</p></li><li><p><font color='#FF0000'><strong>移除</strong></font>v-on.native 修饰符</p><ul><li>父组件中绑定事件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-<span class="attr">on</span>:close=<span class="string">&quot;handleComponentEvent&quot;</span></span><br><span class="line">  v-<span class="attr">on</span>:click=<span class="string">&quot;handleNativeClickEvent&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件中声明自定义事件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">emits</span>: [<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>移除过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li></ul><h1 id="h-函数"><a href="#h-函数" class="headerlink" title="h 函数"></a>h 函数</h1><p>Vue 推荐在绝大数情况下<strong>使用模板</strong>来创建你的 HTML，然而一些特殊的场景，你真的需要<strong>Javascript 的完全编程的能力</strong>，这个时候你可以使用<strong>渲染函数</strong> ，它<strong>比模板更接近编译器</strong>；</p><p>前面我们学习过 VNode 和 VDOM 的改变：</p><p>Vue 在生成真实的 DOM 之前，会将我们的节点转换成 VNode，而 VNode 组合在一起形成一颗树结构，就是虚拟 DOM（VDOM）；</p><p>事实上，我们之前编写的 template 中的 HTML 最终也是使用<strong>渲染函数</strong>生成对应的 VNode；</p><p>那么，如果你想充分的利用 JavaScript 的编程能力，我们可以自己来编写 createVNode 函数，生成对应的 VNode；</p><p>那么如何来做呢？使用 <font color='#ff0000'><strong>h()函数</strong></font></p><p>h() 函数是一个用于创建 vnode 的一个函数；</p><p>其实更准确的命名是 createVNode() 函数，但是为了简便在 Vue 将之简化为 h() 函数；</p><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p><img src="/img/md/v3_12.png"></p><p><strong>注意事项：</strong></p><p>如果没有 props，那么通常可以将 children 作为第二个参数传入；</p><p>如果会产生歧义，可以将 null 作为第二个参数传入，将 children 作为第三个参数传入；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h4&#x27;</span>, &#123;<span class="attr">class</span>: <span class="string">&#x27;title&#x27;</span>&#125;, <span class="string">&quot;hello h函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="实现计数器"><a href="#实现计数器" class="headerlink" title="实现计数器"></a>实现计数器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// data()&#123;</span></span><br><span class="line">  <span class="comment">//   return &#123;</span></span><br><span class="line">  <span class="comment">//     count: 0</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// return &#123; count &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;counter&#x27;</span> &#125;, [</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;h4&#x27;</span>, <span class="literal">null</span>, <span class="string">`当前计数为:<span class="subst">$&#123;count.value&#125;</span>`</span>),</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">onClick</span>: <span class="function">() =&gt;</span> count.<span class="property">value</span>++</span><br><span class="line">        &#125;, <span class="string">&#x27;++&#x27;</span>),</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;button&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">onClick</span>: <span class="function">() =&gt;</span> count.<span class="property">value</span>--</span><br><span class="line">        &#125;, <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// render()&#123;</span></span><br><span class="line">  <span class="comment">//   return h(&#x27;div&#x27;, &#123;class: &#x27;counter&#x27;&#125;, [</span></span><br><span class="line">  <span class="comment">//     h(&#x27;h4&#x27;, null, `当前计数为:$&#123;this.count&#125;`),</span></span><br><span class="line">  <span class="comment">//     h(&#x27;button&#x27;, &#123;</span></span><br><span class="line">  <span class="comment">//       onClick: () =&gt; this.count ++</span></span><br><span class="line">  <span class="comment">//     &#125;, &#x27;++&#x27;),</span></span><br><span class="line">  <span class="comment">//     h(&#x27;button&#x27;, &#123;</span></span><br><span class="line">  <span class="comment">//       onClick: () =&gt; this.count --</span></span><br><span class="line">  <span class="comment">//     &#125;, &#x27;--&#x27;)</span></span><br><span class="line">  <span class="comment">//   ])</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="渲染插槽"><a href="#渲染插槽" class="headerlink" title="渲染插槽"></a>渲染插槽</h2><blockquote><p>先了解插槽的用法，可参照<a href="https://blog.csdn.net/weixin_43931876/article/details/120058286">setup 顶层编写方式内的博客网址</a></p></blockquote><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hi</span> <span class="keyword">from</span> <span class="string">&#x27;./05-Hi&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">Hi</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;h4&#x27;</span>, <span class="literal">null</span>, <span class="string">`05-render函数渲染插槽<span class="subst">$&#123;props.title&#125;</span>`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Hi.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;h4&#x27;</span>, &#123;<span class="attr">class</span>: <span class="string">&#x27;title&#x27;</span>&#125;, [</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;h2&#x27;</span>,<span class="literal">null</span>, <span class="string">&quot;hi ~~&quot;</span>),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span> ?</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="title function_">default</span>(&#123;<span class="attr">title</span>: <span class="string">&quot;--本手俗手妙手无从下手&quot;</span>&#125;) : <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hi组件默认插槽内容&#x27;</span>)</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h1><p>如果我们希望<strong>在项目中使用 jsx，那么我们需要添加对 jsx 的支持</strong>：</p><p>jsx 我们通常会通过 Babel 来进行转换（React 编写的 jsx 就是通过 babel 转换的）；</p><p>对于 Vue 来说，我们只需要在 Babel 中配置对应的插件即可；</p><p>安装<strong>Babel 支持 Vue 的 jsx 插件</strong>：</p><p>npm install @vue&#x2F;babel-plugin-jsx -D</p><p>在<strong>babel.config.js</strong>配置文件中配置插件（现在好像不需要配置了）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;@vue/babel-plugin-jsx&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现计数器-1"><a href="#实现计数器-1" class="headerlink" title="实现计数器"></a>实现计数器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>.<span class="property">count</span>--</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前计数: &#123;this.count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>--<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><p>Hi.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hi组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.$slots.default ? this.$slots.default() : <span class="tag">&lt;<span class="name">span</span>&gt;</span>哇咔咔<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hi</span> <span class="keyword">from</span> <span class="string">&#x27;./06-Hi.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>.<span class="property">count</span>--</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前计数: &#123;this.count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>--<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Hi</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123;default: props =&gt; <span class="tag">&lt;<span class="name">button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Hi</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>setup 写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hi</span> <span class="keyword">from</span> <span class="string">&#x27;./06-Hi.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>++</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>--</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getVal</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">      <span class="comment">// vue3需要使用高阶函数来获取到e</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">getVal</span>(<span class="attr">1</span>) &#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前计数: &#123;count.value&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>--<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>在 Vue 的模板语法中我们学习过各种各样的指令：v-show、v-for、v-model 等等，除了使用这些指令之外，<strong>Vue 也允许我们来自定义自己的指令</strong></p><p>注意：在 Vue 中，代码的复用和抽象主要还是通过组件；</p><p>通常在某些情况下，你需要对 DOM 元素进行底层操作，这个时候就会用到自定义指令；</p><p><font color='#ac6fe9' size='4'><strong>自定义指令分为两种：</strong></font></p><ol><li>自定义局部指令：组件中通过 directives 选项，只能在当前组件中使用；</li><li>自定义全局指令：app 的 directive 方法，可以在任意组件中被使用；</li></ol><p><font color='#ac6fe9' size='3'><strong>案例：当某个元素挂载完成后可以自定获取焦点</strong></font></p><ul><li>实现方式一：如果我们使用默认的实现方式；</li><li>实现方式二：自定义一个 v-focus 的局部指令；</li><li>实现方式三：自定义一个 v-focus 的全局指令；</li></ul><h2 id="聚焦实现"><a href="#聚焦实现" class="headerlink" title="聚焦实现"></a>聚焦实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;iptRef&quot;</span> <span class="attr">v-focus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, nextTick, onMounted, directives &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// directives选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// directives: &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   focus: &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//     // 指令的生命周期 不是 vue3的生命周期</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//     mounted(el) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//       el.focus()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//     &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> iptRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// nextTick(()=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   iptRef.value.focus()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// onMounted(()=&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   iptRef.value.focus()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      iptRef</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h2><p>自定义一个 v-focus 的局部指令</p><p>这个自定义指令实现非常简单，我们只需要在组件选项中使用 directives 即可；</p><p>它是一个对象，在对象中编写我们自定义指令的名称（注意：这里不需要加 v-）；</p><p>自定义指令有一个生命周期，是在组件挂载后调用的 mounted，我们可以在其中完成操作；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;iptRef&quot;</span> <span class="attr">v-focus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, directives &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// directives选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">directives</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">focus</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 指令的生命周期 不是 vue3的生命周期</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        el.<span class="title function_">focus</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局自定义指令 =&gt; 放在mount之前</span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;focus&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    el.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="指令的生命周期"><a href="#指令的生命周期" class="headerlink" title="指令的生命周期"></a>指令的生命周期</h2><p><font color='#ac6fe9' size='3'><strong>一个指令定义的对象，Vue 提供了如下的几个钩子函数：</strong></font></p><ul><li>created：在绑定元素的 attribute 或事件监听器被应用之前调用；</li><li>beforeMount：当指令第一次绑定到元素并且在挂载父组件之前调用；</li><li>mounted：在绑定元素的父组件被挂载后调用；</li><li>beforeUpdate：在更新包含组件的 VNode 之前调用；</li><li>updated：在包含组件的 VNode 及其子组件的 VNode 更新后调用；</li><li>beforeUnmount：在卸载绑定元素的父组件之前调用；</li><li>unmounted：当指令与元素解除绑定且父组件已卸载时，只调用一次；</li></ul><h2 id="指令的参数和修饰符"><a href="#指令的参数和修饰符" class="headerlink" title="指令的参数和修饰符"></a>指令的参数和修饰符</h2><p>如果我们需要接受一些参数或者修饰符应该如何操作呢？</p><p>info 是参数的名称；</p><p>aaa-bbb 是修饰符的名称；</p><p>后面是传入的具体的值；</p><p>在我们的生命周期中，我们可以<strong>通过 bindings 获取</strong>到对应的内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-myDir.aaa.bbb</span>=<span class="string">&quot;&#123;name:&#x27;zs&#x27;&#125;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;count &lt; 5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, directives &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">directives</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">myDir</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUnmount&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unmounted&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      count.<span class="property">value</span> ++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      count,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      increment</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="自定义指令练习"><a href="#自定义指令练习" class="headerlink" title="自定义指令练习"></a>自定义指令练习</h1><h2 id="自定义指令案例：时间戳的显示需求"><a href="#自定义指令案例：时间戳的显示需求" class="headerlink" title="自定义指令案例：时间戳的显示需求"></a>自定义指令案例：时间戳的显示需求</h2><p>在开发中，大多数情况下从服务器获取到的都是时间戳；</p><p>我们需要将时间戳转换成具体格式化的时间来展示；</p><p>在 Vue2 中我们可以通过过滤器来完成；</p><p>在 Vue3 中我们可以通过 计算属性（computed） 或者 自定义一个方法（methods） 来完成；</p><p>其实我们还可以通过一个自定义的指令来完成；</p><p>我们来实现一个可以<font color='#ac6fe9'><strong>自动对时间格式化的指令 v-format-time</strong></font>：</p><p>这里我封装了一个函数，在首页中我们只需要调用这个函数并且传入 app 即可；</p><p>format-time.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&quot;dayjs&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 挂载全局自定义指令</span></span><br><span class="line">  app.<span class="title function_">directive</span>(<span class="string">&quot;format-time&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取到用户指定的格式</span></span><br><span class="line">      <span class="keyword">let</span> formatStr = binding.<span class="property">value</span>;</span><br><span class="line">      <span class="comment">// 如果用户没有传格式</span></span><br><span class="line">      <span class="keyword">if</span> (!binding.<span class="property">value</span>) &#123;</span><br><span class="line">        <span class="comment">// 给个默认的格式</span></span><br><span class="line">        formatStr = <span class="string">&quot;YYYY-MM-DD hh:mm:ss&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 拿到组件标签上的时间戳</span></span><br><span class="line">      <span class="keyword">let</span> timeStamp = el.<span class="property">textContent</span>;</span><br><span class="line">      <span class="keyword">if</span> (timeStamp.<span class="property">length</span> == <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 秒 =&gt; 毫秒</span></span><br><span class="line">        timeStamp = timeStamp * <span class="number">1000</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      el.<span class="property">textContent</span> = <span class="title function_">dayjs</span>(<span class="built_in">parseInt</span>(timeStamp)).<span class="title function_">format</span>(formatStr);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js 引入自定义指令</span></span><br><span class="line"><span class="keyword">import</span> &#123; formatTime &#125; <span class="keyword">from</span> <span class="string">&quot;./directives&quot;</span>;</span><br><span class="line"><span class="title function_">formatTime</span>(app);</span><br></pre></td></tr></table></figure><p>Time.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-format-time</span>=<span class="string">&quot;&#x27;YYYY/MM/DD&#x27;&quot;</span> &gt;</span> 1654766827786 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      count.<span class="property">value</span> ++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      count,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      increment</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h1><p>通常我们向 Vue 全局添加一些功能时，会采用<font color='#edd345'><strong>插件的模式</strong></font>，它有两种编写方式：</p><ul><li>对象类型：一个对象，但是必须包含一个 install 的函数，该函数会在安装插件时执行；</li><li>函数类型：一个 function，这个函数会在安装插件时自动执行；</li></ul><p>插件可以<font color='#FF0000'><strong>完成的功能没有限制</strong></font>，比如下面的几种都是可以的：</p><ol><li>添加全局方法或者 property，通过把它们添加到 config.globalProperties 上实现；</li><li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等；</li><li>通过全局 mixin 来添加一些组件选项；</li></ol><p>一个库，提供自己的 API，同时提供上面提到的一个或多个功能；</p><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>哥们 你这睡眠质量不行呀 我一般都8小时后才发现<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// mounted()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   console.log(this.$msg)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(this.$msg)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// setup中没有this指向 所以不能像vue2获取原型上的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 需要按照下面的方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> instance = <span class="title function_">getCurrentInstance</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$msg</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js引入插件</span></span><br><span class="line"><span class="keyword">import</span> msgPluginObject <span class="keyword">from</span> <span class="string">&#x27;./plugins/msgPlugin-object&#x27;</span></span><br><span class="line"><span class="keyword">import</span> msgPluginFunction <span class="keyword">from</span> <span class="string">&#x27;./plugins/msgPlugin-function&#x27;</span></span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="comment">// app.use(msgPluginObject)</span></span><br><span class="line"><span class="comment">// use相当于 msgPlugin.install(app)</span></span><br><span class="line">app.<span class="title function_">use</span>(msgPluginFunction)</span><br></pre></td></tr></table></figure><h2 id="函数写法"><a href="#函数写法" class="headerlink" title="函数写法"></a>函数写法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app) =&gt; &#123;</span><br><span class="line">  app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$msg</span> =</span><br><span class="line">    <span class="string">&quot;听说高考数学卷很难 刚刚试了下 两小时后才发现试卷拿反了&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    <span class="comment">// 往app原型上添加属性</span></span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$msg</span> =</span><br><span class="line">      <span class="string">&quot;听说高考数学卷很难 刚刚试了下 两小时后才发现试卷拿反了&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>待更新~</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>待更新~</p><h1 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h1><p>Vuex 作为一个老牌 Vue 状态管理库，大家都很熟悉了</p><p>Pinia 是 Vue.js 团队成员专门为 Vue 开发的一个全新的状态管理库，并且已经被纳入官方 <a href="https://github.com/vuejs/pinia">github</a></p><h2 id="为什么有-Vuex-了还要再开发一个-Pinia-？"><a href="#为什么有-Vuex-了还要再开发一个-Pinia-？" class="headerlink" title="为什么有 Vuex 了还要再开发一个 Pinia ？"></a>为什么有 Vuex 了还要再开发一个 Pinia ？</h2><p>先来一张图，看下当时对于<strong>Vuex5 的提案</strong>，就是下一代 Vuex5 应该是什么样子的</p><p><img src="/img/md/v3_13.png"></p><p>Pinia 就是完整的符合了他当时 Vuex5 提案所提到的功能点，所以可以说 Pinia 就是 Vuex5 也不为过，因为它的作者就是官方的开发人员，并且已经被官方接管了，只是目前 Vuex 和 Pinia 还是两个独立的仓库，以后可能会合并，也可能独立发展，只是官方肯定推荐的是 Pinia</p><p>因为在 Vue3 中使用 Vuex 的话需要使用 Vuex4，并且还只能作为一个过渡的选择，存在很大缺陷，所以在 Componsition API 诞生之后，也就设计了全新的状态管理 Pinia</p><h2 id="Pinia-特性"><a href="#Pinia-特性" class="headerlink" title="Pinia 特性"></a>Pinia 特性</h2><ul><li>Pinia 没有 <font color= "#FF0000"><strong>Mutations</strong></font></li><li><font color= "#FF0000"><strong>Actions</strong></font> 支持同步和异步</li><li>没有模块的嵌套结构<ul><li>Pinia 通过设计提供扁平结构，就是说每个 store 都是互相独立的，谁也不属于谁，也就是扁平化了，更好的代码分割且没有命名空间。当然你也可以通过在一个模块中导入另一个模块来隐式嵌套 store，甚至可以拥有 store 的循环依赖关系</li></ul></li><li>更好的 <font color= "#FF0000"><strong>TypeScript</strong></font> 支持<ul><li>不需要再创建自定义的复杂包装器来支持 TypeScript 所有内容都类型化，并且 API 的设计方式也尽可能的使用 TS 类型推断</li></ul></li><li>不需要注入、导入函数、调用它们，享受自动补全，让我们开发更加方便</li><li>无需手动添加 store，它的模块默认情况下创建就自动注册的</li><li>Vue2 和 Vue3 都支持<ul><li>除了初始化安装和 SSR 配置之外，两者使用上的 API 都是相同的</li></ul></li><li>支持 <font color= "#FF0000"><strong>Vue DevTools</strong></font><ul><li>跟踪 actions, mutations 的时间线</li><li>在使用了模块的组件中就可以观察到模块本身</li><li>支持 time-travel 更容易调试</li><li>在 Vue2 中 Pinia 会使用 Vuex 的所有接口，所以它俩不能一起使用</li><li>但是针对 Vue3 的调试工具支持还不够完美，比如还没有 time-travel 功能</li></ul></li><li>模块热更新<ul><li>无需重新加载页面就可以修改模块</li><li>热更新的时候会保持任何现有状态</li></ul></li><li>支持使用插件扩展 Pinia 功能</li><li>支持服务端渲染</li></ul><h2 id="Pinia-和-Vuex"><a href="#Pinia-和-Vuex" class="headerlink" title="Pinia 和 Vuex"></a>Pinia 和 Vuex</h2><p><font color='#FF0000'>Pinia 特性也算</font></p><h3 id="核心区别"><a href="#核心区别" class="headerlink" title="核心区别"></a>核心区别</h3><p>Vuex： <font color= "#ffa500"><strong>State</strong></font> 、<font color= "#ffa500"><strong>Gettes</strong></font> 、<font color= "#ffa500"><strong>Mutations</strong></font>(同步) 、<font color= "#ffa500"><strong>Actions</strong></font>(异步)</p><p>Pinia： <font color= "#ffa500"><strong>State</strong></font> 、<font color= "#ffa500"><strong>Gettes</strong></font> 、<font color= "#ffa500"><strong>Actions</strong></font>(同步异步都支持)</p><h3 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h3><p>Vuex 当前最新版是 <font color= "#FF0000"><strong>4.x</strong></font></p><ul><li>Vuex4 用于 Vue3</li><li>Vuex3 用于 Vue2</li></ul><p>Pinia 当前最新版是 <font color= "#FF0000"><strong>2.x</strong></font></p><ul><li>即支持 Vue2 也支持 Vue3</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>个人感觉：由于 Pinea 是轻量级的，体积很小，它适合于中小型应用。它也适用于低复杂度的 Vue.js 项目，因为一些调试功能，如时间旅行和编辑仍然不被支持。<br>将 Vuex 用于中小型 Vue.js 项目是过度的，因为它重量级的，对性能降低有很大影响。因此，Vuex 适用于大规模、高复杂度的 Vue.js 项目</p><h2 id="pinia-使用"><a href="#pinia-使用" class="headerlink" title="pinia 使用"></a>pinia 使用</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>想要学习<font color= "#FF0000"><strong>pinia</strong></font>，最好有<font color= "#FF0000"><strong>Vue3</strong></font>的基础，明白<font color= "#FF0000"><strong>组合式 API</strong></font>是什么。如果你还不会 Vue3，建议先去学习 Vue3。</p><p>本篇全部基于<font color= "#FF0000"><strong>Vue3</strong></font>来讲解 pinia，至于 Vue2 中如何使用 pinia，大家可以自行去 pinia 官网学习，毕竟 Vue2 中使用 pinia 的还是少数。</p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>我们这里搭建一个最新的<font color= "#FF0000"><strong>Vue3 + TS + Vite</strong></font>项目。</p><p>执行命令：<font color= "#FF0000"><strong>vue create vue-pinia</strong></font> 选择 babel、vue3、ts，创建完毕，清空项目，启动项目 ~</p><h3 id="安装-pinia"><a href="#安装-pinia" class="headerlink" title="安装 pinia"></a>安装 pinia</h3><p>执行命令：<font color= "#FF0000"><strong>npm install pinia</strong></font></p><h3 id="使用-pinia"><a href="#使用-pinia" class="headerlink" title="使用 pinia"></a>使用 pinia</h3><p>安装完成后我们需要将<font color= "#FF0000"><strong>pinia 挂载到 Vue 应用中</strong></font>，也就是我们需要创建一个根存储传递给应用程序，简单来说就是创建一个存储数据的数据桶，放到应用程序中去。</p><p>修改<font color= "#FF0000"><strong>main.js</strong></font>，引入<font color= "#FF0000"><strong>pinia 提供的 createPinia 方法</strong></font>，创建根存储。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>在 store 目录下创建一个 user.ts 为例，我们先定义并导出一个名为 user 的模块</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">arr</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123; ... &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><font color= "#ffa500"><strong>defineStore</strong></font> 接收两个参数</p><ul><li>第一个参数就是模块的名称，必须是唯一的，多个模块不能重名，Pinia 会把所有的模块都挂载到根容器上</li><li>第二个参数是一个对象，里面的选项和 Vuex 差不多<ul><li>其中 <font color= "#ffa500"><strong>state</strong></font> 用来存储全局状态，它必须是箭头函数，为了在服务端渲染的时候避免交叉请求导致的数据状态污染所以只能是函数，而必须用箭头函数则为了更好的 TS 类型推导</li><li><font color= "#ffa500"><strong>getters</strong></font> 就是用来封装计算属性，它有缓存的功能</li><li><font color= "#ffa500"><strong>actions</strong></font> 就是用来封装业务逻辑，修改 state</li></ul></li></ul><h3 id="访问-state"><a href="#访问-state" class="headerlink" title="访问 state"></a>访问 state</h3><p>比如我们要在页面中访问 state 里的属性 count</p><p>由于 <font color= "#ffa500"><strong>defineStore</strong></font> 会返回一个函数，所以要先调用拿到数据对象，然后就可以在模板中直接使用了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; user_store.count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; userStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> user_store = <span class="title function_">userStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 解构</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// const &#123; count &#125; = userStore()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>比如像注释中的解构出来使用，是完全没有问题的，只是注意了，这样拿到的数据不是<font color= "#ffa500"><strong>响应式</strong></font>的，如果要解构还保持响应式就要用到一个方法 <font color= "#ffa500"><strong>storeToRefs()</strong></font>，示例如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; userStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; count &#125; = <span class="title function_">storeToRefs</span>(userStore)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>原因就是 Pinia 其实是把 state 数据都做了 <font color= "#ffa500"><strong>reactive</strong></font> 处理，和 Vue3 的 reactive 同理，解构出来的也不是响应式，所以需要再做 <font color= "#ffa500"><strong>ref 响应式代理</strong></font></p><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>这个和 Vuex 的 getters 一样，也有缓存功能。如下在页面中多次使用，第一次会调用 getters，数据没有改变的情况下之后会读取缓存</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; myCount &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; myCount &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; myCount &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>注意两种方法的区别，我就直接写在注释里了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 方法一，接收一个可选参数 state</span></span><br><span class="line">    <span class="title function_">myCount</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了&#x27;</span>) <span class="comment">// 页面中使用了三次，这里只会执行一次，然后缓存起来了</span></span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法二，不传参数，使用 this</span></span><br><span class="line">    <span class="comment">// 但是必须指定函数返回值的类型，否则类型推导不出来</span></span><br><span class="line">    <span class="title function_">myCount</span>(): number&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>更新 state 里的数据有四种方法，先看三种简单的更新，说明都写在注释里了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; user_store.count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; userStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> user_store = <span class="title function_">userStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 方法一</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    user_store.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 方法二，需要修改多个数据，建议用 $patch 批量更新，传入一个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    user_store.$patch(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: user_store.<span class="property">count1</span>++,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// arr: user_store.arr.push(1) // 错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">arr</span>: [ ...user_store.<span class="property">arr</span>, <span class="number">1</span> ] <span class="comment">// 可以，但是还得把整个数组都拿出来解构，就没必要</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用 $patch 性能更优，因为多个数据更新只会更新一次视图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 方法三，还是$patch，传入函数，第一个参数就是 state</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    user_store.$patch( <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        state.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        state.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>第四种方法就是当逻辑比较多或者请求的时候，我们就可以封装到示例中 store&#x2F;user.ts 里的 actions 里</p><p>可以传参数，也可以通过 this.xx 可以直接获取到 state 里的数据，需要注意的是不能用箭头函数定义 actions，不然就会绑定外部的 this 了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">changeState</span>(<span class="params">num: number</span>)&#123; <span class="comment">// 不能用箭头函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span> += num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  user_store.<span class="title function_">changeState</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="支持-VueDevtools"><a href="#支持-VueDevtools" class="headerlink" title="支持 VueDevtools"></a>支持 VueDevtools</h3><p>打开开发者工具的 <font color='#ff0000'>Vue Devtools</font> 就会发现 Pinia，而且可以手动修改数据调试，非常方便</p><p>示例</p><ol><li><p>先定义示例接口 api&#x2F;user.ts</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口数据类型</span></span><br><span class="line"><span class="keyword">export</span> interface userListType&#123;</span><br><span class="line">   <span class="attr">id</span>: number</span><br><span class="line">   <span class="attr">name</span>: string</span><br><span class="line">   <span class="attr">age</span>: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模拟请求接口返回的数据</span></span><br><span class="line"><span class="keyword">const</span> userList = [</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 封装模拟异步效果的定时器</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">delay: number</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delay))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getUserList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">wait</span>(<span class="number">100</span>) <span class="comment">// 延迟100毫秒返回</span></span><br><span class="line">   <span class="keyword">return</span> userList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在 store&#x2F;user.ts 里的 actions 封装调用接口</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getUserList, userListType &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/user&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">   <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 用户列表</span></span><br><span class="line">            <span class="attr">list</span>: [] <span class="keyword">as</span> userListType <span class="comment">// 类型转换成 userListType</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">loadUserList</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> list = <span class="keyword">await</span> <span class="title function_">getUserList</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">list</span> = list</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 页面中调用 actions 发起请求</span><br><span class="line"></span><br><span class="line">   ```javascript</span><br><span class="line">   &lt;template&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;item in user_store.list&quot;&gt; ... &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">   import &#123; userStore &#125; from &#x27;../store&#x27;</span><br><span class="line">   const user_store = userStore()</span><br><span class="line">   user_store.loadUserList() // 加载所有数据</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="跨模块修改数据"><a href="#跨模块修改数据" class="headerlink" title="跨模块修改数据"></a>跨模块修改数据</h3><p>在一个模块的 actions 里需要修改另一个模块的 state 数据</p><p>示例：比如在 chat 模块里修改 user 模块里某个用户的名称</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chat.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; userStore &#125; <span class="keyword">from</span> <span class="string">&quot;./user&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> chatStore = <span class="title function_">defineStore</span>(<span class="string">&quot;chat&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">someMethod</span>(<span class="params">userItem</span>) &#123;</span><br><span class="line">      userItem.<span class="property">name</span> = <span class="string">&quot;新的名字&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> user_store = <span class="title function_">userStore</span>();</span><br><span class="line">      user_store.<span class="title function_">updateUserName</span>(userItem);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>user 模块里</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userStore = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">updateUserName</span>(<span class="params">userItem</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === userItem.<span class="property">id</span>);</span><br><span class="line">      <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        user.<span class="property">name</span> = userItem.<span class="property">name</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序</title>
      <link href="/2022/06/21/%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/06/21/%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈小程序"><a href="#浅谈小程序" class="headerlink" title="浅谈小程序"></a>浅谈小程序</h1><p>在 2016 年的「微信公开课 Pro」演讲中，微信事业群总裁张小龙这样描述了小程序的前景与未来：</p><blockquote><p>“ 小程序是一种不需要下载安装即可使用的应用，它实现了应用 “触手可及” 的梦想，用户扫一扫或者搜一下即可打开应用。也体现了 “用完即走” 的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无须安装卸载 “。</p></blockquote><p>小程序刚发布的时候要求压缩包的体积不能大于 1M，否则无法通过，在 2017 年 4 月做 了改进，由原来的 1M 提升到 2M；</p><p>2017 年 1 月 9 日 0 点，万众瞩目的微信第一批小程序正式低调上线。</p><p>而在 2020 年的「WWDC 苹果全球开发者大会」中，轻应用则被作为 iOS 14 的主要功能进行强调与推介：</p><p><img src="/img/md/wx1.png"></p><blockquote><p>App Clip 就是一种无需用户在 iPhone 或 iPad 上安装完整的应用程序，就可以访问使用该应用程序的部分功能的轻量级应用，它们专注于处理简单快速的任务。</p></blockquote><p>不论是张小龙对「微信小程序」略带文艺的描述，还是在 WWDC 上对于「轻应用」在 iOS 生态中的地位描述，我们都能大抵能理解小程序诞生的初衷。而如果我们把时间从这两场发布会的转至今日，却会发现小程序早已不再局限于「用完即走」与「快速打开」，各式各样的小程序已呈现百花齐放的状态，不论是工具小程序，内容小程序，交易小程序，直播小程序，各种类型应有尽有。</p><p>不妨让我尝试用自己的工作日常举例，早上出门上班，我会打开「天府健康通」扫描地铁场所码，并把健康码给地铁安检查看，临近中午 11 点 30 分，我会用「美团」或「饿了么」为自己订一份工作餐，吃完午饭后我会打开「动物餐厅」看看小猫咪又赚了多少小鱼干，下午会议时使用「腾讯文档」查看会议纪要，快下班的时候用「叮咚买菜」购置晚饭所需的食材，晚上回家做饭时，用「懒饭 App」看看想吃的番茄肥牛饭怎么做。</p><p><img src="/img/md/wx2.png"></p><p>时至今日，当我们说到小程序时，也不仅仅在特指微信小程序，各式各样的平台都纷纷推出了自己专属的小程序平台，不论支付宝、字节跳动、美团还是百度等其他互联网大厂，都纷纷推出了自己专属的小程序平台，且都基于自己的生态业务，为小程序提供流量进行支持，希望用户与开发者能够选择自有平台中的小程序进行开发。</p><p>随着小程序业务的愈演愈烈，越来越多的流量都被引入了互联网巨头的小程序战场中，但在这个过程中，对于战场中「封闭，不透明」的吐槽与争议也逐渐出现，无数企业都希望自己的应用中也能具备运行小程序的能力，希望能够借此抗争小程序被引入寡头所控制的战场，但「知易行难」，快速完成对小程序的底层与容器的研发，所需要花费的精力与时间并不是短时间就能够完成的。</p><p>事实上，小程序可以被理解为是「移动应用 App」的一个细分子集，如果按照「平等透明」的设想，小程序不应该仅仅存在于微信之中，那些我们并不经常使用的应用都可以通过小程序进行重新优化，我们可以通过各式各样的专门应用打开相关的小程序，从而对那些「太重的应用」进行减负操作。</p><p>当然了，小程序还会有这样一些特性需要我们注意：</p><ul><li>小程序不具备「被关注」的能力，获取流量留存用户的操作需要由独立应用或其他渠道完成；</li><li>小程序不具备「推送消息与群发消息」的能力，对用户的信息触达与消息传递的操作需要由其他渠道完成；</li><li>小程序不具备「跨 App 分享 」的能力，因此对于小程序的分享与打开路径，需要在设计产品时提前思考，而不是把鸡蛋放在一个篮子里；</li></ul><h2 id="什么样的应用适合使用小程序开发"><a href="#什么样的应用适合使用小程序开发" class="headerlink" title="什么样的应用适合使用小程序开发"></a>什么样的应用适合使用小程序开发</h2><p>虽然小程序市场时至今日依然是一片蓝海，但我想也不是所有应用「都可以，都应该」使用小程序开发的。</p><p>基于我们的经验与积累来说，符合「逻辑简单，使用低频，对性能要求不极致」的应用场景，更加适合使用小程序进行研发。</p><h3 id="逻辑简单："><a href="#逻辑简单：" class="headerlink" title="逻辑简单："></a>逻辑简单：</h3><p>是指应用的操作逻辑并不十分复杂，各类生活服务（如打车，订餐，查地图与导航等等）都需要给用户提供简单清晰的操作逻辑，而这一类也天然的符合起初小程序「用完即走」的定义，因此十分符合使用小程序研发。一些逻辑复杂的应用场景想要通过小程序进行适配，就可能会面临更多的设计与研发困难，同时在性能和体验也可能会面对更多需要解决的问题。</p><h3 id="使用低频："><a href="#使用低频：" class="headerlink" title="使用低频："></a>使用低频：</h3><p>是指小程序的使用频率不应该太高，比如社交类的钉钉或飞书，金融类的掌上生活或浦大喜奔，媒体类的网易云音乐或斗鱼都不太适合使用小程序进行重新设计。对于用户使用的频率较高的应用来说，直接打开应用进行体验的步骤肯定最快的，此外由于某些行业的特殊性质（比如具备交易，支付等能力）要求，对于安全性与保密性的首选风险判断原则，也不宜使用常见的小程序进行设计。</p><h3 id="对性能要求不极致："><a href="#对性能要求不极致：" class="headerlink" title="对性能要求不极致："></a>对性能要求不极致：</h3><p>是指由于小程序始终存在于某个独立应用（也被称为宿主应用）中，考虑到目前的性能与研发所限制，暂时不太适合开发对于这两者有更高要求的移动应用。比如把原神，王者荣耀这样的游戏应用通过小程序进行重新设计，在目前来说肯定是不现实的。</p><p>当然，随着相关研发实力的增强与产业生态的逐渐补充，也有越来越多的「不可能」变为了「可能」，比如华西证券的「华彩人生」，浦发银行的「浦大喜奔」，某省的移动警务平台等客户都选择使用小程序容器方案进行落地实现</p><h2 id="小程序与-H5，原生应用有何区别？"><a href="#小程序与-H5，原生应用有何区别？" class="headerlink" title="小程序与 H5，原生应用有何区别？"></a>小程序与 H5，原生应用有何区别？</h2><p>很多朋友在了解小程序技术的时候，都会有这样的疑惑“到底与 H5，原生应用”这些技术相比，小程序具有哪些优势与劣势呢？</p><h3 id="H5-移动应用"><a href="#H5-移动应用" class="headerlink" title="H5 移动应用"></a>H5 移动应用</h3><p>我们常说的 H5 其实也通常可以被视为一种 Web App，相比于我们在桌面端浏览器中打开的网页，主要是增加了一些响应式的设计与交互优化，从而使得这些网页更适合在移动端的浏览器中显示运行。既然是网页应用，那依然是基于 JavaScript，CSS 和 HTML 进行实现的，由于是基于各类前端技术栈进行实现，最大的好处就是快速、简单、方便，且有各种技术资料可以参考。</p><p>同样，H5 的缺点与优点也是并存的，比如由于技术已经很成熟了，对于前端经验欠缺的新人来说，面对各式各样的框架，模块、任务管理工具，UI 库可能会出现无从下手的问题；此外相比于原生应用，对于系统权限的获取（比如数据缓存能力，网络通信状态等）都显得比较鸡肋，当低性能的设备加载包含复杂逻辑的页面时，会出现明显的卡顿与延迟问题。</p><h3 id="原生应用"><a href="#原生应用" class="headerlink" title="原生应用"></a>原生应用</h3><p>原生应用也被叫做 Native App，相比于 H5 应用通过前端三大件进行实现不同，原生应用主要会采用 iOS 与 Android 的专有语言 Object-C（或 Swift），Java（或 Kotlin）进行实现，大多我们所常见的国民应用，比如微信，支付宝等都属于这种原生应用。</p><p>既然被叫做「原生应用」，就像操作系统的亲儿子一样，天然在性能与体验上具备优秀的潜质，也有组件库丰富，接口支持完善等各种优势特点。但原生应用最大的缺陷就是不能跨平台研发，以目前的主流市场为例，必须要支持 iOS 与 Android 两个主流平台。</p><h3 id="混合应用"><a href="#混合应用" class="headerlink" title="混合应用"></a>混合应用</h3><p>混合应用一般被称为 Hybrid App。简单来说，混合应用<strong>就是将原生功能封装成对应的 JS 接口，在前端使用 H5 来开发对应的 App （即 H5 作为内容+原生应用作为壳）</strong> ，看上去虽然是一个移动原生应用整体，但实际的页面还是网页，一套代码可以生成 iOS 与 Android 两种安装包，开发成本较低。</p><p>我们常见的淘宝，京东等应用由于更新与优化节奏都十分快速，为了更好的响应「贴近用户」的目标，应用中有的功能通过原生 Native 实现，有的功能则通过 H5 页面进行实现，这种应用就属于我们所说的混合应用。</p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>严格意义上来说，小程序并不属于以上 3 种应用的任何一种。小程序主要通过 JavaScript 与 CSS 这种常见的前端技术进行开发，但又没有完全使用 HTML 进行实现，在不同的操作系统中，JavaScript 代码分别运行在 iOS 的 JavaScriptCore 与 Android 的 X5 JSCore 中，各家小程序平台或多或少都有一部分自研的核心，因此渲染视图层的组件也有所不同。</p><p><img src="/img/md/wx3.png"></p><p>相比「 H5 移动应用」与「 移动原生应用」，小程序具备如下优势：</p><ul><li>具备跨平台的能力，一套代码可以在 iOS 与 Android 两个平台中运行；</li><li>远超过 H5 的体验（支持本地缓存，Webview，有丰富的组件与支持库）；</li><li>能获取更多系统权限，完成更加丰富的产品设计；</li><li>可以避免 DOM 泄露（不使用常用的 window 对象与 document 对象）；</li><li>开发简单，上手成本低（比如 FinClip 提供了 FIDE 与开发文档）；</li></ul><h4 id="常见的小程序开发框架有哪些"><a href="#常见的小程序开发框架有哪些" class="headerlink" title="常见的小程序开发框架有哪些"></a>常见的小程序开发框架有哪些</h4><p>以主要的小程序开发框架举例，腾讯云社区的「极乐君」将不同平台下小程序支持的力度整理在一张表中：</p><p><img src="/img/md/wx4.png"></p><h1 id="小程序开发环境"><a href="#小程序开发环境" class="headerlink" title="小程序开发环境"></a>小程序开发环境</h1><p>1、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信文档</a></p><p>2、<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发工具下载</a></p><p>3、<a href="https://mp.weixin.qq.com/">注册小程序账号</a></p><p><img src="/img/md/wx5.png"></p><p><img src="/img/md/wx6.png"></p><h1 id="小程序特点"><a href="#小程序特点" class="headerlink" title="小程序特点"></a>小程序特点</h1><ol><li><p>没有 DOM</p></li><li><p>组件化开发： 具备特定功能效果的代码集合</p></li><li><p>体积小，单个压缩包体积不能大于 2M，否则无法上线</p></li><li><p>小程序的四个重要的文件</p><ul><li>*.js —&gt; js 逻辑 —&gt; js</li><li>*.wxml —&gt; view 结构—–&gt; html</li><li>*.wxss —&gt; view 样式 —–&gt; css</li><li>*. json —-&gt; view 配置—– &gt; json 文件</li></ul></li><li><p>小程序适配方案: rpx (responsive pixel 响应式像素单位)</p></li></ol><ul><li>小程序适配单位： rpx</li><li>规定任何屏幕下宽度为 750rpx</li><li>小程序会根据屏幕的宽度不同自动计算 rpx 值的大小</li><li>Iphone6 下： 1rpx &#x3D; 1 物理像素 &#x3D; 0.5px</li></ul><p><img src="/img/md/wx7.png"></p><h1 id="小程序配置"><a href="#小程序配置" class="headerlink" title="小程序配置"></a>小程序配置</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>作用： 用于为整个应用进行选项设置</p><p><img src="/img/md/wx8.png"></p><h2 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h2><p>配图参上</p><p>作用：用于为指定的页面进行配置</p><p>注：页面配置的优先级高于全局配置</p><h2 id="sitemap-配置"><a href="#sitemap-配置" class="headerlink" title="sitemap 配置"></a>sitemap 配置</h2><p>配图参上</p><p>作用：配置其小程序页面是否允许微信索引</p><h1 id="小程序基础"><a href="#小程序基础" class="headerlink" title="小程序基础"></a>小程序基础</h1><h2 id="框架接口"><a href="#框架接口" class="headerlink" title="框架接口"></a>框架接口</h2><p><img src="/img/md/wx9.png"></p><h3 id="App"><a href="#App" class="headerlink" title="App"></a>App</h3><ol><li>全局 app.js 中执行 App()</li><li>生成当前应用的实例对象</li><li>getApp()获取全局应用实例</li></ol><h3 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h3><ol><li>页面.js 中执行 Page()</li><li>生成当前页面的实例</li><li>通过 getCurrentPages() 获取页面实例</li></ol><h2 id="WXML-语法"><a href="#WXML-语法" class="headerlink" title="WXML 语法"></a>WXML 语法</h2><p><img src="/img/md/wx10.png"></p><p>具体看官方文档 ~</p><h3 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h3><p>todolist.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header-input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">bindinput</span>=<span class="string">&quot;inputHandler&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#x27;&#123;&#123;text.title?text.title:&quot;&quot;&#125;&#125;&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">bindtap</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;todoList.length &gt; 0&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;todoList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span>&#123;&#123;item.id + 1&#125;&#125;. &#123;&#123;item.title&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;warn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">bindtap</span>=<span class="string">&quot;del&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>暂无待办事项<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>todolist.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">todoList</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">title</span>: <span class="string">&quot;吃饭&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&quot;睡觉&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&quot;打豆豆&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 保存用户输入的数据</span></span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 用户输入数据后会触发的回调</span></span><br><span class="line">  <span class="title function_">inputHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 保存用户输入的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">todoList</span>.<span class="property">length</span>,</span><br><span class="line">        <span class="attr">title</span>: e.<span class="property">detail</span>.<span class="property">value</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 添加</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 修改数据并且清空输入框</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">todoList</span>: [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">todoList</span>, <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">text</span>],</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="title function_">del</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取传过来的索引</span></span><br><span class="line">    <span class="comment">// console.log(e.target.dataset.index)</span></span><br><span class="line">    <span class="keyword">var</span> index = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">index</span>;</span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">todoList</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 只要修改了数据 一定要重新setData</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">todoList</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">todoList</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>todolist.wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">container</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    flex-<span class="attr">direction</span>: column;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">header</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    margin-<span class="attr">top</span>: 20rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">header</span>-input &#123;</span><br><span class="line">    <span class="attr">height</span>: 64rpx;</span><br><span class="line">    line-<span class="attr">height</span>: 64rpx;</span><br><span class="line">    <span class="attr">border</span>: 1px solid #<span class="number">000</span>;</span><br><span class="line">    text-<span class="attr">align</span>: center;</span><br><span class="line">    margin-<span class="attr">right</span>: 20rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">show</span> &#123;</span><br><span class="line">    margin-<span class="attr">top</span>: 20rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><p>tab.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;tab &#123;&#123;index == current ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindtap</span>=<span class="string">&quot;changeCurrent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;tabList&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">wx:key</span>=<span class="string">&quot;*this&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>tab.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">tabList</span>: [<span class="string">&quot;首页&quot;</span>, <span class="string">&quot;购物车&quot;</span>, <span class="string">&quot;我的&quot;</span>],</span><br><span class="line">    <span class="attr">current</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">changeCurrent</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 在事件处理函数中，通过 event.target.dataset.参数名 即可获取到具体参数的值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">index</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">current</span>: e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">index</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>tab.wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">container</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    justify-<span class="attr">content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">tab</span> &#123;</span><br><span class="line">    text-<span class="attr">align</span>: center;</span><br><span class="line">    <span class="attr">width</span>: 200rpx;</span><br><span class="line">    <span class="attr">border</span>: 1px solid black;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">active</span> &#123;</span><br><span class="line">    border-<span class="attr">bottom</span>: 2px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="target-和-currentTarget-的区别？"><a href="#target-和-currentTarget-的区别？" class="headerlink" title="target 和 currentTarget 的区别？"></a>target 和 currentTarget 的区别？</h3><p>target 是触发该事件的源头组件，而 currentTarget 则是当前事件所绑定的组件</p><p><img src="/img/md/wx11.png"></p><p>点击内部的按钮时，点击事件以冒泡的方式向外扩散，也会触发外层 view 的 tap 事件处理函数。</p><p>此时，对于外层的 view 来说：</p><p>e.target 指向的是触发事件的源头组件，因此，e.target 是内部的按钮组件</p><p>e.currentTarget 指向的是当前正在触发事件的那个组件，因此，e.currentTarget 是当前的 view 组件</p><h2 id="WXSS-语法"><a href="#WXSS-语法" class="headerlink" title="WXSS 语法"></a>WXSS 语法</h2><p><img src="/img/md/wx12.png"></p><p>具体看官方文档 ~</p><h2 id="WXS-语法"><a href="#WXS-语法" class="headerlink" title="WXS 语法"></a>WXS 语法</h2><p><img src="/img/md/wx13.png"></p><p>具体看官方文档 ~</p><h3 id="这里补充一点，为什么有了-js-还要设计-wxs？"><a href="#这里补充一点，为什么有了-js-还要设计-wxs？" class="headerlink" title="这里补充一点，为什么有了 js 还要设计 wxs？"></a>这里补充一点，为什么有了 js 还要设计 wxs？</h3><h4 id="1、WXS-的基础类库："><a href="#1、WXS-的基础类库：" class="headerlink" title="1、WXS 的基础类库："></a>1、WXS 的基础类库：</h4><p>WXS 只提供给开发者 5 个基础类库，分别是 console，Math，JSON，Number，Date，以及一些常用的全局变量和全局函数，数量不多，但已经能满足基本的数据操作要求，而对于复杂的数据操作，比如类定义和继承等，还是需要依靠逻辑层的 JS 脚本完成。</p><h4 id="2、数组遍历"><a href="#2、数组遍历" class="headerlink" title="2、数组遍历"></a>2、数组遍历</h4><p>WXS 里，遍历数组只能通过 for 实现，而 JS 中的 for in 和 for of 不被支持，对于需要循环处理数据的场景，也可以通过数组的 forEach 方法实现遍历：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">ary.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3、变量类型判断"><a href="#3、变量类型判断" class="headerlink" title="3、变量类型判断"></a>3、变量类型判断</h4><p>由于 WXS 先天不支持使用 Array 对象，因此我们平常用于判断数组类型变量的语句[] instanceof Array 也就不能使用了，而 typeof []的输出结果是”object”，并不能满足实际的开发要求。所幸我们还可以使用变量的 「constructor」属性进行类型判断：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[].<span class="property">constructor</span> === <span class="title class_">Array</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="4、性能差异"><a href="#4、性能差异" class="headerlink" title="4、性能差异"></a>4、性能差异</h4><p>小程序的架构分成了逻辑层和视图层，WXS 与 JavaScript 还有一个差异在于，它与 WXML 一同们于视图层，运行于同一个线程内，因此减少了跨线程通信的开销。这也是我们之所以优先采用 WXS 处理数据的原因之一</p><h4 id="5、平台差异"><a href="#5、平台差异" class="headerlink" title="5、平台差异"></a>5、平台差异</h4><p>小程序在 Android 上，使用 V8 引擎解析和渲染 JavaScript; 而在 iOS 上，则是使用 JavaScriptCore，这两者在解析性能的表现上差异比较大，相对来说 V8 的性能比 JSC 要好得多，那么在 IOS 的小程序中，使用脱离 JavaScript 环境的 WXS，就会使性能有更多的提升，这也是 WXS 文档中提及 “在 iOS 设备上小程序内的 wxs 会比 javascript 代码快 2 ~ 20 倍” 的具体原因</p><h5 id="FormatTime"><a href="#FormatTime" class="headerlink" title="FormatTime"></a>FormatTime</h5><p>dateFormat.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入wxs文件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">&#x27;./dateFormat.wxs&#x27;</span> <span class="attr">module</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;aaa(time)&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>dateFormat.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="number">1646372333761</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>dateFormat.wxs</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newTime = <span class="title function_">getDate</span>(time);</span><br><span class="line">  <span class="keyword">var</span> year = newTime.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> month = newTime.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> date = newTime.<span class="title function_">getDate</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将函数暴露</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = dateFormat;</span><br></pre></td></tr></table></figure><h5 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h5><p>search.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;wxs src=<span class="string">&#x27;./search.wxs&#x27;</span> <span class="variable language_">module</span>=<span class="string">&quot;searchList&quot;</span>&gt;&lt;/wxs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;search-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindinput</span>=<span class="string">&quot;getKeyWords&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;searchList(list, keyWords)&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;*this&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>search.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;acd&quot;</span>, <span class="string">&quot;cdb&quot;</span>, <span class="string">&quot;xyz&quot;</span>, <span class="string">&quot;zxe&quot;</span>, <span class="string">&quot;qwe&quot;</span>, <span class="string">&quot;amd&quot;</span>, <span class="string">&quot;cmd&quot;</span>],</span><br><span class="line">    <span class="attr">keyWords</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getKeyWords</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">keyWords</span>: e.<span class="property">detail</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>search.wxs</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">list, keyWords</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="title function_">indexOf</span>(keyWords) &gt; -<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = search;</span><br></pre></td></tr></table></figure><h2 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h2><p>例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">login</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 请求自己后台登录接口</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">requestLoginApi</span> = (<span class="params">code</span>) =&gt; &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/user/wexin-login2&#x27;</span>,</span><br><span class="line">      ...</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> token = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">authorizationToken</span></span><br><span class="line">    wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;token&#x27;</span>, token)</span><br><span class="line">      <span class="title function_">onUserLogin</span>(token)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onUserLogin</span> = (<span class="params">token</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">getApp</span>().<span class="property">globalData</span>.<span class="property">token</span> = token</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 检查当前微信登录状态是否有效</span></span><br><span class="line">wx.<span class="title function_">checkSession</span>(&#123;</span><br><span class="line">  <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> token = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) <span class="title function_">onUserLogin</span>(token)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 拉取微信用于登录鉴权的code</span></span><br><span class="line">    wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res0.<span class="property">code</span>) &#123;</span><br><span class="line">          <span class="title function_">requestLoginApi</span>(res0.<span class="property">code</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 从之前使用的wx.request接口使用方式可以看出来 所有小程序接口都有两个特征</span></span><br><span class="line"><span class="comment">// 1、参数是一个对象 可以让参数的定义与添加更加自由</span></span><br><span class="line"><span class="comment">// 2、拥有相同的调用结果处理方式 都有success、fail、complete三个回调属性</span></span><br></pre></td></tr></table></figure><h2 id="小程序组件"><a href="#小程序组件" class="headerlink" title="小程序组件"></a>小程序组件</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><h3 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a>swiper</h3><h3 id="scrollview"><a href="#scrollview" class="headerlink" title="scrollview"></a>scrollview</h3><p>scrollview.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 300rpx;background-color: aquamarine;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">    &lt;!--</span><br><span class="line">    <span class="attr">bindscrolltolower</span>: 滚动到底部/右边时触发</span><br><span class="line">    refresher-<span class="attr">enabled</span>: 开启下拉刷新</span><br><span class="line">    refresher-<span class="attr">triggered</span>: 下拉刷新状态</span><br><span class="line">    <span class="attr">bindrefresherrefresh</span>: 下拉刷新触发的回调</span><br><span class="line">    --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>纵向scroll-view<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">   &lt;!-- 注意: 当开启scroll-y时 一定要给组件一个高度 子组件的高度之和一定要大于这个高度 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;sv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-y</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindscrolltolower</span>=<span class="string">&quot;toLoewrHandler&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">refresher-enabled</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">refresher-triggered</span>=<span class="string">&quot;&#123;&#123;isReFresh&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindrefresherrefresh</span>=<span class="string">&quot;refreshHandler&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.imgUrl&#125;&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100vw;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>横向scroll-view<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">    &lt;!--</span><br><span class="line">    enable-<span class="attr">flex</span>: 启用 flexbox 布局</span><br><span class="line">    scroll-<span class="attr">x</span>: 启用横向滚动</span><br><span class="line">    注意: 启用时要给组件一个宽度 一般这个值是<span class="number">100</span>%等于屏宽 子组件的宽度之和要大于屏宽</span><br><span class="line">    如果出现不滚动的现象尝试给容器添加这两个样式: white-<span class="attr">space</span>: nowrap; <span class="attr">display</span>:inline-block</span><br><span class="line">目的是为了让子元素在横向上排列成一行</span><br><span class="line">     --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;sv2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">enable-flex</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">scroll-x</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindscrolltolower</span>=<span class="string">&quot;toRightHandler&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.imgUrl&#125;&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100vw;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>scrollview.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">swiperList</span>: [],</span><br><span class="line">    <span class="attr">isReFresh</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">toRightHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/getProductList&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = result;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="comment">// 实现上拉加载的效果</span></span><br><span class="line">          <span class="comment">// 在之前的数据数组中追加新的数据</span></span><br><span class="line">          <span class="attr">swiperList</span>: [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">swiperList</span>, ...data],</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">refreshHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/getProductList&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = result;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="comment">// 实现上拉加载的效果</span></span><br><span class="line">          <span class="comment">// 在之前的数据数组中追加新的数据</span></span><br><span class="line">          <span class="attr">swiperList</span>: [...data, ...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">swiperList</span>],</span><br><span class="line">          <span class="attr">isReFresh</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">toLoewrHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/getProductList&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = result;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="comment">// 实现上拉加载的效果</span></span><br><span class="line">          <span class="comment">// 在之前的数据数组中追加新的数据</span></span><br><span class="line">          <span class="attr">swiperList</span>: [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">swiperList</span>, ...data],</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/getProductList&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = result;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">swiperList</span>: data,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>scrollview.wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">sv</span> &#123;</span><br><span class="line">    margin-<span class="attr">top</span>: 20rpx;</span><br><span class="line">    <span class="attr">height</span>: 300rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">item</span> &#123;</span><br><span class="line">    <span class="attr">height</span>: 300rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">sv2</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">item2</span> &#123;</span><br><span class="line">    <span class="attr">width</span>: 400rpx;</span><br><span class="line">    flex-<span class="attr">shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rich-text"><a href="#rich-text" class="headerlink" title="rich-text"></a>rich-text</h3><p>rich-text.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;!-- <span class="attr">emsp</span>: 中文字符空格大小 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">space</span>=<span class="string">&quot;emsp&quot;</span> <span class="attr">nodes</span>=<span class="string">&quot;&#123;&#123;nodes&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>=====================<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-section-title&quot;</span>&gt;</span>通过HTML String渲染<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">nodes</span>=<span class="string">&quot;&#123;&#123;htmlSnip&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>rich-text.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// name: 表示节点名称</span></span><br><span class="line">    <span class="comment">// attrs: 节点属性</span></span><br><span class="line">    <span class="comment">// class: 类名</span></span><br><span class="line">    <span class="comment">// style: 样式</span></span><br><span class="line">    <span class="attr">nodes</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">        <span class="attr">attrs</span>: &#123;</span><br><span class="line">          <span class="attr">class</span>: <span class="string">&quot;div_class&quot;</span>,</span><br><span class="line">          <span class="attr">style</span>: <span class="string">&quot;line-height: 20px;padding:20px;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// text文本节点</span></span><br><span class="line">            <span class="comment">// 注: 如果不是text节点 则必须有一个name属性</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&quot;⼩程序实践&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 图片节点</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">            <span class="attr">attrs</span>: &#123;</span><br><span class="line">              <span class="attr">src</span>: <span class="string">&quot;https://img.mukewang.com/620324d409be395b18000600.png&quot;</span>,</span><br><span class="line">              <span class="comment">// 解决图片缝隙问题</span></span><br><span class="line">              <span class="comment">// 小程序不允许外部修改内部的img样式 我们可以修改node节点img样式</span></span><br><span class="line">              <span class="comment">// style: &#x27;width:100%;font-size:0;display:block;&#x27;</span></span><br><span class="line">              <span class="attr">class</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line"></span><br><span class="line">              <span class="comment">// rich-text.wxss</span></span><br><span class="line">              <span class="comment">// .img&#123;</span></span><br><span class="line">              <span class="comment">// font-size:0;</span></span><br><span class="line">              <span class="comment">// display:block;</span></span><br><span class="line">              <span class="comment">// &#125;</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">            <span class="attr">attrs</span>: &#123;</span><br><span class="line">              <span class="attr">src</span>: <span class="string">&quot;https://img.mukewang.com/620c5ea509a1cbb118000600.png&quot;</span>,</span><br><span class="line">              <span class="attr">style</span>: <span class="string">&quot;width:100%&quot;</span>,</span><br><span class="line">              <span class="attr">class</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">            <span class="attr">attrs</span>: &#123;</span><br><span class="line">              <span class="attr">src</span>: <span class="string">&quot;https://img.mukewang.com/61f0a258093f8c1018000600.png&quot;</span>,</span><br><span class="line">              <span class="attr">style</span>: <span class="string">&quot;width:100%&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">urls</span>: [],</span><br><span class="line">    <span class="attr">htmlSnip</span>: <span class="string">`&lt;div class=&quot;div_class&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Title&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;p&quot;&gt;</span></span><br><span class="line"><span class="string">          渲染出来了 ~</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 取出 urls</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">findUrl</span>(<span class="params">nodes</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> urls = [];</span><br><span class="line">      nodes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有attrs属性</span></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">attrs</span>) &#123;</span><br><span class="line">          <span class="comment">// 遍历attrs属性</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> item.<span class="property">attrs</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果键是src</span></span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">&quot;src&quot;</span>) &#123;</span><br><span class="line">              <span class="comment">// 保存到数组中</span></span><br><span class="line">              urls.<span class="title function_">push</span>(item.<span class="property">attrs</span>[key]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断有没有字节点</span></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">          <span class="comment">// 如果有则递归调用</span></span><br><span class="line">          <span class="comment">// 将返回的结果合并到上一个数组中</span></span><br><span class="line">          urls = urls.<span class="title function_">concat</span>(<span class="title function_">findUrl</span>(item.<span class="property">children</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> urls;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">urls</span> = <span class="title function_">findUrl</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">nodes</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 点击图片实现预览</span></span><br><span class="line">  <span class="title function_">tap</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 鼠标点击的位置 / 图片的高度 =&gt; 向下取整作为urls的下标</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(e.<span class="property">detail</span>.<span class="property">y</span> / <span class="number">134</span>);</span><br><span class="line">    <span class="keyword">let</span> urls = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">urls</span>;</span><br><span class="line">    wx.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">      <span class="comment">// 当前图片</span></span><br><span class="line">      <span class="attr">current</span>: urls[index],</span><br><span class="line">      <span class="comment">// 图片数组</span></span><br><span class="line">      <span class="attr">urls</span>: urls,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><h3 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h3><p>wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;progress-container&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;progress-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">progress</span> <span class="attr">class</span>=<span class="string">&quot;mt&quot;</span> <span class="attr">percent</span>=<span class="string">&#x27;&#123;&#123;percentValue&#125;&#125;&#x27;</span> <span class="attr">border-radius</span>=<span class="string">&#x27;50&#x27;</span> <span class="attr">stroke-width</span>=<span class="string">&#x27;10&#x27;</span> <span class="attr">active</span> <span class="attr">active-mode</span>=<span class="string">&quot;forwards&quot;</span> <span class="attr">bindactiveend</span>=<span class="string">&#x27;complete&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;icons&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&quot;progress-cancel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cancel&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&quot;progress-cancel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;download&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;download&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isShow&#125;&#125;&quot;</span>&gt;</span>下载完成<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isShow2&#125;&#125;&quot;</span>&gt;</span>暂停下载<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">percentValue</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">isShow</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isShow2</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 动画完成</span></span><br><span class="line">  <span class="title function_">complete</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">curPercent</span> &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">isShow</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暂停动画</span></span><br><span class="line">  <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timeId</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">isShow2</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 继续下载</span></span><br><span class="line">  <span class="title function_">download</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timeId</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeId</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">percentValue</span> &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timeId</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">isShow2</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">percentValue</span>: (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">percentValue</span> += <span class="number">10</span>),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeId</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">percentValue</span> &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timeId</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">isShow2</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">percentValue</span>: (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">percentValue</span> += <span class="number">10</span>),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">progress</span>-container &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">95</span>%;</span><br><span class="line">    <span class="attr">height</span>: <span class="number">20</span>%;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">progress</span>-box &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">icons</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="movable-view"><a href="#movable-view" class="headerlink" title="movable-view"></a>movable-view</h3><h4 id="左滑删除实现"><a href="#左滑删除实现" class="headerlink" title="左滑删除实现"></a>左滑删除实现</h4><p>wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 左滑删除<span class="number">1</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-section-title&quot;</span>&gt;</span>左侧删除1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">movable-area</span> <span class="attr">style</span>=<span class="string">&quot;width:750rpx;height:100rpx;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">movable-view</span> <span class="attr">style</span>=<span class="string">&quot;width:1050rpx;height:100rpx;&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;horizontal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;max&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>这⾥是插⼊到组内容 1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;read&quot;</span>&gt;</span>已读<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">movable-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">movable-area</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 左滑删除<span class="number">2</span> 使用第三方模块 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-section-title&quot;</span>&gt;</span>左侧删除2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slide-view</span> <span class="attr">class</span>=<span class="string">&quot;slide&quot;</span> <span class="attr">width</span>=<span class="string">&quot;750&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">slideWidth</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>这⾥是插⼊到组内容 2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;read&quot;</span>&gt;</span>已读<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">slide-view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 左滑删除<span class="number">3</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-section-title&quot;</span>&gt;</span>左侧删除3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page__bd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weui-cells&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">mp-slideview</span> <span class="attr">ext-class</span>=<span class="string">&quot;slideViewClass&quot;</span> <span class="attr">buttons</span>=<span class="string">&quot;&#123;&#123;slideButtons&#125;&#125;&quot;</span> <span class="attr">bindbuttontap</span>=<span class="string">&quot;slideButtonTap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">mp-cell</span> <span class="attr">value</span>=<span class="string">&quot;标题文字&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mp-cell</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">mp-slideview</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weui-cells&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mp-slideview</span> <span class="attr">buttons</span>=<span class="string">&quot;&#123;&#123;slideButtons&#125;&#125;&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class="attr">bindbuttontap</span>=<span class="string">&quot;slideButtonTap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weui-slidecell&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    左滑可以删除（图标Button）</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">mp-slideview</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> base64 = <span class="built_in">require</span>(<span class="string">&quot;../../images/base64&quot;</span>);</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">widget</span> = <span class="variable language_">this</span>.<span class="title function_">selectComponent</span>(<span class="string">&quot;.widget&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">icon</span>: base64.<span class="property">icon20</span>,</span><br><span class="line">      <span class="attr">slideButtons</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&quot;普通1&quot;</span>,</span><br><span class="line">          <span class="attr">src</span>: <span class="string">&quot;/images/icon_love.svg&quot;</span>, <span class="comment">// icon的路径</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&quot;普通2&quot;</span>,</span><br><span class="line">          <span class="attr">extClass</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">          <span class="attr">src</span>: <span class="string">&quot;/images/icon_star.svg&quot;</span>, <span class="comment">// icon的路径</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;warn&quot;</span>,</span><br><span class="line">          <span class="attr">text</span>: <span class="string">&quot;警示3&quot;</span>,</span><br><span class="line">          <span class="attr">extClass</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">          <span class="attr">src</span>: <span class="string">&quot;/images/icon_del.svg&quot;</span>, <span class="comment">// icon的路径</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>json</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;slide-view&quot;</span>: <span class="string">&quot;miniprogram-slide-view&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mp-slideview&quot;</span>: <span class="string">&quot;weui-miniprogram/slideview/slideview&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mp-cell&quot;</span>: <span class="string">&quot;weui-miniprogram/cell/cell&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">movable-view &#123;</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  align-<span class="attr">items</span>: center;</span><br><span class="line">  justify-<span class="attr">content</span>: center;</span><br><span class="line">  <span class="attr">height</span>: 100rpx;</span><br><span class="line">  <span class="attr">width</span>: 100rpx;</span><br><span class="line">  <span class="attr">background</span>: #1AAD19;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movable-area &#123;</span><br><span class="line">  <span class="attr">height</span>: 400rpx;</span><br><span class="line">  <span class="attr">width</span>: 400rpx;</span><br><span class="line">  background-<span class="attr">color</span>: #ccc;</span><br><span class="line">  <span class="attr">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">max</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: 600rpx;</span><br><span class="line">  <span class="attr">height</span>: 600rpx;</span><br><span class="line">  background-<span class="attr">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 左滑删除1 */</span></span><br><span class="line">.<span class="property">list_item</span> &#123;</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  border-<span class="attr">bottom</span>: 1px solid #<span class="variable constant_">DEDEDE</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 左侧删除2 */</span></span><br><span class="line">.<span class="property">slide</span>&#123;</span><br><span class="line">  <span class="comment">/* border-top:1px solid #ccc; */</span></span><br><span class="line">  border-<span class="attr">bottom</span>:1px solid #<span class="variable constant_">DEDEDE</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">left</span> &#123;</span><br><span class="line">  background-<span class="attr">color</span>: white;</span><br><span class="line">  <span class="attr">height</span>: 100rpx;</span><br><span class="line">  <span class="attr">width</span>: 750rpx;</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  flex-<span class="attr">direction</span>: row;</span><br><span class="line">  <span class="attr">color</span>: grey;</span><br><span class="line">  line-<span class="attr">height</span>: 100rpx;</span><br><span class="line">  padding-<span class="attr">left</span>: 30rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">right</span> &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  <span class="attr">direction</span>: row;</span><br><span class="line">  text-<span class="attr">align</span>: center;</span><br><span class="line">  vertical-<span class="attr">align</span>: middle;</span><br><span class="line">  line-<span class="attr">height</span>: 110rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">read</span> &#123;</span><br><span class="line">  background-<span class="attr">color</span>: #ccc;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">  <span class="attr">width</span>: 150rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">delete</span> &#123;</span><br><span class="line">  background-<span class="attr">color</span>: red;</span><br><span class="line">  <span class="attr">color</span>: #fff;</span><br><span class="line">  <span class="attr">width</span>: 150rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  */</span></span><br><span class="line">.<span class="property">slideViewClass</span> .<span class="property">weui</span>-cell&#123;</span><br><span class="line">  <span class="attr">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shopCar"><a href="#shopCar" class="headerlink" title="shopCar"></a>shopCar</h3><p>wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;wxs src=<span class="string">&#x27;./getSum.wxs&#x27;</span> <span class="variable language_">module</span>=<span class="string">&quot;getSum&quot;</span>&gt;&lt;/wxs&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;productList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">checkbox</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;item.isChecked&#125;&#125;&quot;</span> <span class="attr">catchtap</span>=<span class="string">&quot;clickHandler&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">data-index</span>=<span class="string">&#x27;&#123;&#123;index&#125;&#125;&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item.number&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span>总价: &#123;&#123;getSum(productList)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">productList</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;白象方便面&quot;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="attr">number</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;鸿星尔克哈&quot;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">99</span>,</span><br><span class="line">        <span class="attr">number</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;卫龙辣条哈&quot;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">number</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;德芙巧克力&quot;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">number</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">clickHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取页面传来的index</span></span><br><span class="line">    <span class="keyword">let</span> index = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">index</span>;</span><br><span class="line">    <span class="comment">// 找到数组中对应index数据 对其isChecked属性进行取反操作</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">productList</span>[index].<span class="property">isChecked</span> =</span><br><span class="line">      !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">productList</span>[index].<span class="property">isChecked</span>;</span><br><span class="line">    <span class="comment">// 更新数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">productList</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">productList</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>wxs</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">productList</span>) &#123;</span><br><span class="line">  <span class="comment">// 目前仅支持es5的语法</span></span><br><span class="line">  <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; productList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 如果商品被选中</span></span><br><span class="line">    <span class="keyword">if</span> (productList[i].<span class="property">isChecked</span>) &#123;</span><br><span class="line">      <span class="comment">// 计算总价</span></span><br><span class="line">      total += productList[i].<span class="property">price</span> * productList[i].<span class="property">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = getSum;</span><br></pre></td></tr></table></figure><p>wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">list</span> &#123;</span><br><span class="line">    padding-<span class="attr">left</span>: 100rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">item</span> &#123;</span><br><span class="line">    margin-<span class="attr">left</span>: 40rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">total</span> &#123;</span><br><span class="line">    padding-<span class="attr">left</span>: 100rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><h3 id="selfComponent"><a href="#selfComponent" class="headerlink" title="selfComponent"></a>selfComponent</h3><p>wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">navbar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">parentList</span>=<span class="string">&#x27;&#123;&#123;[&quot;电影&quot;,&quot;综艺&quot;, &quot;科幻&quot;]&#125;&#125;&#x27;</span> <span class="attr">parentCurrent</span>=<span class="string">&quot;&#123;&#123;parentCurrent&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bind:parentEvent</span>=<span class="string">&quot;parentEvent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">navbar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">swiper</span>  <span class="attr">bindchange</span>=<span class="string">&#x27;changeHandler&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">current</span>=<span class="string">&quot;&#123;&#123;parentCurrent&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>综艺<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>科幻<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">parentCurrent</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">changeHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取轮播图当前所在的index</span></span><br><span class="line">    <span class="keyword">const</span> &#123; current &#125; = e.<span class="property">detail</span>;</span><br><span class="line">    <span class="comment">// 保存index</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">parentCurrent</span>: current,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">parentEvent</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// e.detail: 子组件传过来的参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">parentCurrent</span>: e.<span class="property">detail</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>json</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;navbar&quot;</span>: <span class="string">&quot;../../components/navbar/navbar&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">swiper &#123;</span><br><span class="line">    margin-<span class="attr">top</span>: 40rpx;</span><br><span class="line">    text-<span class="attr">align</span>: center;</span><br><span class="line">    line-<span class="attr">height</span>: 280rpx;</span><br><span class="line">    background-<span class="attr">color</span>: chartreuse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="navbar"><a href="#navbar" class="headerlink" title="navbar"></a>navbar</h3><p>wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;parentList&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">wx:key</span>=<span class="string">&quot;*this&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;&#123;&#123;parentCurrent==index?&#x27;active&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindtap</span>=<span class="string">&quot;clickHandler&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; item &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">parentList</span>: &#123;</span><br><span class="line">      <span class="comment">// 类型检测</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="comment">// 默认值</span></span><br><span class="line">      <span class="attr">default</span>: [<span class="string">&quot;笔记本&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;平板&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parentCurrent</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// list: [&quot;笔记本&quot;, &quot;手机&quot;, &quot;平板&quot;],</span></span><br><span class="line">    <span class="comment">// current: 0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的方法列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// clickHandler(e)&#123;</span></span><br><span class="line">    <span class="comment">//     this.setData(&#123;</span></span><br><span class="line">    <span class="comment">//         current: e.currentTarget.dataset.index</span></span><br><span class="line">    <span class="comment">//     &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能再使用上面方式修改数据了</span></span><br><span class="line">    <span class="comment">// 因为页面上使用的是父级传过来的parentCurrent</span></span><br><span class="line">    <span class="comment">// 所以我们要通知父级 让父级去修改数据</span></span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&quot;parentEvent&quot;</span>, e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">index</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">container</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    justify-<span class="attr">content</span>: space-around;</span><br><span class="line">    text-<span class="attr">align</span>: center;</span><br><span class="line">    <span class="attr">height</span>: 100rpx;</span><br><span class="line">    line-<span class="attr">height</span>: 100rpx;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">active</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h2><p>header.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>header.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="comment">// 在组件定义时的选项中启用多slot支持</span></span><br><span class="line">    <span class="attr">multipleSlots</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>header.wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    justify-<span class="attr">content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面组件引入到页面中使用</p><p>slot.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tapHandler&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      返回</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;right&quot;</span>&gt;</span>个人<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isCreated&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>slot.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">isCreated</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">tapHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">isCreated</span>: !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isCreated</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>slot.json</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;header&quot;</span>: <span class="string">&quot;../../components/header/header&quot;</span>,</span><br><span class="line">    <span class="string">&quot;footer&quot;</span>: <span class="string">&quot;../../components/footer/footer&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p><img src="/img/md/wx14.png"></p><p>count.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lifetimes</span>: &#123;</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 在组件实例进入页面节点树时执行</span></span><br><span class="line">    <span class="title function_">attached</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 开启定时器</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timeId</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 通知父组件移除子组件</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&quot;removeTimeId&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">count</span>: (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> -= <span class="number">1</span>),</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 在组件实例被从页面节点树移除时执行</span></span><br><span class="line">    <span class="title function_">detached</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timeId</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><p><img src="/img/md/wx15.png"></p><h2 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h2><p><img src="/img/md/wx16.png"></p><p>wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; msg &#125;&#125;</span><br><span class="line">  &lt;button type=<span class="string">&quot;primary&quot;</span> bindtap=<span class="string">&quot;clickHandler&quot;</span>&gt;</span><br><span class="line">    跳转</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;若有诗书藏于心 岁月从不败美人&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">clickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 wx.navigateBack 可以返回到原页面。小程序中页面栈最多十层</span></span><br><span class="line">    wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">      <span class="comment">// ?id=2 路由传参</span></span><br><span class="line">      <span class="comment">// 通过onload的形参options接收该参数</span></span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;/pages/07-shopcar/07-shopcar?id=2&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听页面加载&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听页面初次渲染完成&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听页面显示&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听页面隐藏&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听页面卸载&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h2><p>getUserInfo.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 40rpx;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindtap</span>=<span class="string">&quot;getUserInfo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;!userInfo.avatarUrl&#125;&#125;&quot;</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 40rpx;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">open-type</span>=<span class="string">&quot;share&quot;</span>&gt;</span>分享当前页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 40rpx;&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindgetuserinfo</span>=<span class="string">&quot;getUserInfo&quot;</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span> --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 40rpx;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">open-type</span>=<span class="string">&quot;getPhoneNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bindgetphonenumber</span>=<span class="string">&quot;getPhoneNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span>获取用户电话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span> --&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>getUserInfo.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getUserInfo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    wx.<span class="title function_">getUserProfile</span>(&#123;</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&quot;desc&quot;</span>,</span><br><span class="line">      <span class="attr">lang</span>: <span class="string">&quot;zh_CN&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">userInfo</span>: res.<span class="property">userInfo</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 将用户信息保存到本地缓存中</span></span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;userInfo&quot;</span>, res.<span class="property">userInfo</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// getPhoneNumber(phone)&#123;</span></span><br><span class="line">  <span class="comment">//     console.log(phone)</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 每次加载页面从本地缓存中取出用户数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">userInfo</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;userInfo&quot;</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听用户下拉动作&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;上拉触底&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShareAppMessage</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">from</span> == <span class="string">&quot;button&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">from</span> == <span class="string">&quot;menu&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;好兄弟帮忙砍一刀&quot;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/pages/12-getUserInfo/12-getUserInfo&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>getUserInfo.wxss</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">container</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    flex-<span class="attr">direction</span>: column;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line">    margin-<span class="attr">top</span>: 100rpx;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    flex-<span class="attr">direction</span>: column;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">box</span> image &#123;</span><br><span class="line">    <span class="attr">width</span>: 200rpx;</span><br><span class="line">    <span class="attr">height</span>: 200rpx;</span><br><span class="line">    border-<span class="attr">radius</span>: 100rpx;</span><br><span class="line">    margin-<span class="attr">bottom</span>: 40rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取用户-openId"><a href="#获取用户-openId" class="headerlink" title="获取用户 openId"></a>获取用户 openId</h2><p>openId.wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span> style=<span class="string">&quot;padding-top: 40rpx;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tapHandler&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    获取用户code</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>openId.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">// 获取用户的code</span></span><br><span class="line">  <span class="title function_">tapHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span>) &#123;</span><br><span class="line">          wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/getOpenId&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123; <span class="attr">code</span>: res.<span class="property">code</span> &#125;,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">              wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;token&quot;</span>, res.<span class="property">data</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后端如何处理code？代码如下 要求了解</span></span><br><span class="line">  <span class="comment">// 获取openId</span></span><br><span class="line">  <span class="comment">// app.use(&#x27;/getOpenId&#x27;, async (req, res, next) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     const CODE = req.query.code</span></span><br><span class="line">  <span class="comment">//     const APPID = &quot;wx13bb6e5496ae00d3&quot;</span></span><br><span class="line">  <span class="comment">//     const APPSECRET =    &quot;c72598c06ee2fc7f167923c3dfa3f116&quot;</span></span><br><span class="line">  <span class="comment">//     let url = `https://api.weixin.qq.com/sns/    jscode2session?appid=$&#123;APPID&#125;&amp;secret=$&#123;APPSECRET&#125;&amp;  js_code=$&#123;CODE&#125;&amp;grant_type=authorization_code`</span></span><br><span class="line">  <span class="comment">//     // 发起请求获取openId</span></span><br><span class="line">  <span class="comment">//     const &#123;data&#125; = await fly.get(&#123;url&#125;)</span></span><br><span class="line">  <span class="comment">//     // 反序列化 data</span></span><br><span class="line">  <span class="comment">//     let openId = JSON.parse(data).openid</span></span><br><span class="line">  <span class="comment">//     // 自定义登录态 =&gt; 将openId和用户信息进行关联</span></span><br><span class="line">  <span class="comment">//     let obj = &#123;</span></span><br><span class="line">  <span class="comment">//       name: &#x27;许&#x27;,</span></span><br><span class="line">  <span class="comment">//       age: 18,</span></span><br><span class="line">  <span class="comment">//       openId</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//     // 对登录态进行加密 jsonwebtoken</span></span><br><span class="line">  <span class="comment">//     let token = jwt.sign(obj, &#x27;bgs2012A&#x27;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//     let verifyObj = jwt.verify(token, &#x27;bgs2012A&#x27;)</span></span><br><span class="line">  <span class="comment">//     console.log(verifyObj)</span></span><br><span class="line">  <span class="comment">//     // &#123;</span></span><br><span class="line">  <span class="comment">//     //   name: &#x27;许&#x27;,</span></span><br><span class="line">  <span class="comment">//     //   age: 18,</span></span><br><span class="line">  <span class="comment">//     //   openId: &#x27;oZmUB41o1l8nTYRvDg0NXBYVaUdk&#x27;,</span></span><br><span class="line">  <span class="comment">//     //   iat: 1646789558</span></span><br><span class="line">  <span class="comment">//     // &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//     res.send(token)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="小程序开放能力"><a href="#小程序开放能力" class="headerlink" title="小程序开放能力"></a>小程序开放能力</h1><h2 id="小程序连接-wifi"><a href="#小程序连接-wifi" class="headerlink" title="小程序连接 wifi"></a>小程序连接 wifi</h2><p>wxml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;page-head&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;page-head__title&quot;</span>&gt;</span>微信连wifi<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;page-head__desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page-section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;page-section__title&quot;</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn-area&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;startToConnect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> connectWifi <span class="keyword">from</span> <span class="string">&quot;../../lib/connect-wifi&quot;</span>;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">startToConnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">connectWifi</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;startToConnect result&quot;</span>, res);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>wifi-connect.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connectWifi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ssid = <span class="string">&quot;201&quot;</span>,</span><br><span class="line">    pass = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">  <span class="comment">// 查看平台环境</span></span><br><span class="line">  <span class="keyword">let</span> sysInfo = wx.<span class="title function_">getSystemInfoSync</span>();</span><br><span class="line">  <span class="keyword">let</span> platform = sysInfo.<span class="property">platform</span>;</span><br><span class="line">  <span class="comment">// devtools/android/ios</span></span><br><span class="line">  <span class="comment">// ios:iOS 10.0.1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;platform&quot;</span>, platform, sysInfo.<span class="property">system</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有ios 11以上，及andoird 6以上，才有这样的wifi连接功能</span></span><br><span class="line">  <span class="keyword">if</span> (platform == <span class="string">&quot;android&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// android 6.21</span></span><br><span class="line">    <span class="keyword">let</span> sysVersion = <span class="built_in">parseInt</span>(sysInfo.<span class="property">system</span>.<span class="title function_">substr</span>(<span class="number">8</span>));</span><br><span class="line">    <span class="keyword">if</span> (sysVersion &lt; <span class="number">6</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;android版本低&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res0 = <span class="keyword">await</span> wx.<span class="property">wxp</span></span><br><span class="line">      .<span class="title function_">getSetting</span>(&#123;</span><br><span class="line">        <span class="comment">// 是否同时获取用户订阅消息的订阅状态，默认不获取。注意：withSubscriptions 只返回用户勾选过订阅面板中的“总是保持以上选择，不再询问”的订阅消息</span></span><br><span class="line">        <span class="attr">withSubscriptions</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`运行错误：<span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">// 检查是否有地理位置授权</span></span><br><span class="line">    <span class="keyword">if</span> (res0 &amp;&amp; !res0.<span class="property">authSetting</span>[<span class="string">&quot;scope.userLocation&quot;</span>]) &#123;</span><br><span class="line">      <span class="comment">// 如果没有这个权限，先授权</span></span><br><span class="line">      <span class="keyword">let</span> authRes = <span class="keyword">await</span> wx.<span class="property">wxp</span></span><br><span class="line">        .<span class="title function_">authorize</span>(&#123;</span><br><span class="line">          <span class="attr">scope</span>: <span class="string">&quot;scope.userLocation&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>, err);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`运行错误：<span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (authRes &amp;&amp; authRes.<span class="property">errMsg</span> != <span class="string">&quot;authorize:ok&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;地理授权失败&quot;</span>, authRes.<span class="property">errMsg</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;android地理授权失败&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (platform == <span class="string">&quot;ios&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// ios 12.0</span></span><br><span class="line">    <span class="keyword">let</span> sysVersion = <span class="built_in">parseInt</span>(sysInfo.<span class="property">system</span>.<span class="title function_">substr</span>(<span class="number">4</span>));</span><br><span class="line">    <span class="keyword">if</span> (sysVersion &lt; <span class="number">11</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;ios版本低&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> wx.<span class="property">wxp</span></span><br><span class="line">      .<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;请切到系统设置-&gt;wifi列表，等待wifi连接成功&quot;</span>,</span><br><span class="line">        <span class="attr">showCancel</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`运行错误：<span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;平台不支持&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动wifi模块</span></span><br><span class="line">  <span class="keyword">await</span> wx.<span class="property">wxp</span>.<span class="title function_">startWifi</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`运行错误：<span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 拉取wifi列表</span></span><br><span class="line">  <span class="keyword">await</span> wx.<span class="property">wxp</span>.<span class="title function_">getWifiList</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`运行错误：<span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 监听wifi列表到达</span></span><br><span class="line">    wx.<span class="title function_">onGetWifiList</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!res.<span class="property">wifiList</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="string">&quot;wifi列表为空&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res.wifiList&quot;</span>, res.<span class="property">wifiList</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// var signalStrength = 0;</span></span><br><span class="line">  <span class="keyword">var</span> bssid = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; res.<span class="property">wifiList</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> wifi = res.<span class="property">wifiList</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (wifi.<span class="property">SSID</span> == ssid) &#123;</span><br><span class="line">      <span class="comment">// BSSID: wifi网络的唯一地址</span></span><br><span class="line">      bssid = wifi.<span class="property">BSSID</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!bssid) <span class="keyword">return</span> <span class="string">&quot;未查询到目标wifi&quot;</span>;</span><br><span class="line">  <span class="comment">// 连接wifi</span></span><br><span class="line">  <span class="keyword">let</span> res1 = <span class="keyword">await</span> wx.<span class="property">wxp</span></span><br><span class="line">    .<span class="title function_">connectWifi</span>(&#123;</span><br><span class="line">      <span class="attr">SSID</span>: ssid,</span><br><span class="line">      <span class="attr">BSSID</span>: bssid,</span><br><span class="line">      <span class="attr">password</span>: pass,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span>, err);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`运行错误：<span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">if</span> (res1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wifi连接成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;connectWifi:ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;未知错误&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connectWifi;</span><br></pre></td></tr></table></figure><p>app.json</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;permission&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;scope.userLocation&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;位置信息用途说明&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="云开发"><a href="#云开发" class="headerlink" title="云开发"></a>云开发</h1><h2 id="云开发提供的所有能力"><a href="#云开发提供的所有能力" class="headerlink" title="云开发提供的所有能力"></a>云开发提供的所有能力</h2><ul><li>云函数</li><li>云数据库</li><li>云存储</li><li>云调用</li><li>HTTP API</li><li>…</li></ul><p><img src="/img/md/wx17.png"></p><p><img src="/img/md/wx18.png"></p><p><img src="/img/md/wx19.png"></p><h2 id="云开发和非云开的区别？"><a href="#云开发和非云开的区别？" class="headerlink" title="云开发和非云开的区别？"></a>云开发和非云开的区别？</h2><h3 id="1-云开发是什么"><a href="#1-云开发是什么" class="headerlink" title="1. 云开发是什么"></a>1. 云开发是什么</h3><p>小程序云开发是一种新的开发方式，它能够帮助开发者快速、便捷地开发小程序。</p><h3 id="2-小程序云开发的优势"><a href="#2-小程序云开发的优势" class="headerlink" title="2. 小程序云开发的优势"></a>2. 小程序云开发的优势</h3><p>小程序云开发和非云开发有什么区别？这是一个很好的问题。</p><p>首先，我们来看看小程序云开发的优势。</p><p>总之，小程序云开发具有诸多优势，能够帮助我们快速、方便、安全地开发小程度。</p><h3 id="3-非云开发的优势"><a href="#3-非云开发的优势" class="headerlink" title="3. 非云开发的优势"></a>3. 非云开发的优势</h3><p>首先，我们来看一下小程序云开发和非云开发的区别：</p><p>小程序云开发是一种全新的开发方式，它使用了云端的资源，能够更加轻松地开发出高质量的小程序。非云开发则是相对传统的开发方式，使用本地的资源进行开发。</p><p>下面我们来看看小程序云开发和非云开发各自的优势：</p><h4 id="小程序云开发"><a href="#小程序云开发" class="headerlink" title="小程序云开发"></a>小程序云开发</h4><p>使用了云端的资源，能够更加轻松地开发出高质量的小程序。</p><p>在运行时也能够得到更好的性能。因为它不会像本地小程序那样占用过多的内存和CPU资源。</p><p>代码也更加容易维护和理解。因为代码是分布在不同的文件中，并且采用了标准化的代码风格。</p><p>对于新手来说，学习小程序云开发也相对容易一些。因为相对而言，它的代码量要少很多。</p><h4 id="非云开发"><a href="#非云开发" class="headerlink" title="非云开发"></a>非云开发</h4><p>相对传统的开发方式，使用本地的资源进行开发。</p><p>在运行时不会占用过多的内存和CPU资源（如果代码写得好的话)。</p><p>代码也相对容易理解和修改。因为代码是集中在一个文件中，并且采用了标准化的代码风格。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p><strong>传统开发中</strong>， 开发者不仅需要关注前端的页面展示， 还需要搭建后端的数据库， 购买服务器</p><p>和域名，如果是境内服务器， 还需要备案等等。</p><p>小程序上线后， 开发者需要定期进行数据库维护、网络安全、负载均衡等工作</p><p><strong>云开发中</strong>，开发者只需要关注前端的页面展示， 后端的服务器、维护、安全处理等工作全部由腾讯云代替我们完成，方便了很多！</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2021/07/17/webpack/webpack/"/>
      <url>/2021/07/17/webpack/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="npm-相关"><a href="#npm-相关" class="headerlink" title="npm 相关"></a>npm 相关</h1><p><strong>临时记录，后续单独开篇 ~</strong></p><p>在我们需要下载第三方包之前 需要先初始化项目</p><p><strong>npm init -y</strong>: 初始化项目, 生成 package.json 文件</p><p><strong>init</strong> 表示的是初始化</p><p><strong>-y</strong> 表示的是所有需要填写的内容都使用默认的</p><h2 id="package-json-字段"><a href="#package-json-字段" class="headerlink" title="package.json 字段"></a>package.json 字段</h2><p>ame：包名。规范定义它需要由小写的字母和数字组成，可以包含.、_和-，但不允许出现空格。不允许出现中文，<strong>包名必须是唯一的</strong>，以免对外公布时产生重名冲突的误解。除此之外，NPM 还建议不要在包名中附带上 node 或 js 来重复标识它是 JavaScript 或 Node 模块。</p><ul><li>author：作者</li><li>description：包的简介</li><li>version：版本号</li><li>main：入口文件</li><li>keywords：关键词数组，NPM 中主要用来做分类搜索。一个好的关键词数组有利于用户快速找到你编写的包。</li><li>devDependencies：一些模块只在开发时需要依赖。配置这个属性，可以提示包的后续开发者安装依赖包。</li><li>dependencies：使用当前包所需要依赖的包列表。这个属性十分重要，NPM 会通过这个属性帮助自动加载依赖的包。</li><li>scripts：脚本说明对象。它主要被包管理器用来安装、编译、测试和卸载包。</li><li>bin：一些包作者希望包可以作为命令行工具使用。配置好 bin 字段后，通过 npm install package name -g 命令可以将脚本添加到执行路径中，之后可以在命令行中直接执行。前面的 node -gyp 即是这样安装的。通过-g 命令安装的模块包称为全局模式。</li></ul><h2 id="dependencies-VS-devDependencies"><a href="#dependencies-VS-devDependencies" class="headerlink" title="dependencies VS devDependencies"></a>dependencies VS devDependencies</h2><p>dependencies：生产依赖 项目在部署运行时需要用到的依赖</p><p>(npm i 包名 –save 或者 npm i 包名)</p><p>devDependencies：开发依赖 项目在开发时候需要用到的依赖</p><p>(npm i 包名 –save-dev 或者 npm i 包名 -D)</p><p>还有一种 npm i 包名 –g：全局安装 &#x3D;&gt; 安装在 nodejs 目录下的 node_modules 中</p><p>安装在全局的目的是为了在任意位置都能够使用该包</p><p>为什么能在任意位置使用它呢？因为配置了环境变量</p><p>初始化项目后可以通过 npm i（install） 包名，比如：npm i jquery</p><p>来下载第三方模块，第三方模块会默认下载到当前项目下的 node_modules 中</p><p>卸载第三方包：npm un（uninstall） 包名（后缀和安装包的时候保持一致）</p><p>npm 设置淘宝镜像源：<strong>npm config set registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></strong></p><h1 id="什么是构建工具"><a href="#什么是构建工具" class="headerlink" title="什么是构建工具"></a>什么是构建工具</h1><p><strong>事实上随着前端的快速发展，目前前端的开发已经变的越来越复杂了：</strong><br>比如开发过程中我们需要通过模块化的方式来开发；</p><p>比如也会使用一些高级的特性来加快我们的开发效率或者安全性，比如通过 ES6+、TypeScript 开发脚本逻辑， 通过 sass、less 等方式来编写 css 样式代码；</p><p>比如开发过程中，我们还希望实时的监听文件的变化来并且反映到浏览器上，提高开发的效率；</p><p>比如开发完成后我们还需要将代码进行压缩、合并以及其他相关的优化；</p><p>等等….</p><p>上述这些工作理论上是可以人工完成的，但是它繁琐，工作量大，本质是无意义的劳动，人为的错误也随着流程的增加而增加了更多的出错率。所以每一个团队都希望有一种工具，能帮助整个团队在开发中能精简流程、提高效率、减少错误率，管理各种小工具之间的错综复杂的关系或者配置，这种工具就叫构建工具。</p><p>说到构建工具，我往往会在前面加<strong>「自动化」</strong>三个字，因为构建工具就是用来让我们不再做机械重复的事情，解放我们的双手的(my god)。所以构建工具作用是：提升项目性能，提高开发效率。</p><h1 id="构建工具的发展"><a href="#构建工具的发展" class="headerlink" title="构建工具的发展"></a>构建工具的发展</h1><p>有了工具能满足基本的打包工作，对于开发人员而言总是需要更精益求精。就像在一辆能发动的车上去安装各种零件来提升使用者的体验。这些零件就是构建工具所需要的插件，这些插件对提升开发效率很有帮助，包括语法转换（Babel），模板热更新（HotModuleReplacementPlugin），清理重复的打包的文件（clean-webpack-plugin）等等。</p><p>构建工具目前来说还在处于不停发展的阶段，但是相应的打包技术已经很成熟。 本次主要介绍市面上比较火热的 Gulp，Grunt， Webpack, Vite 这三个打包工具之间的对比和它们的优势。</p><h1 id="构建工具介绍"><a href="#构建工具介绍" class="headerlink" title="构建工具介绍"></a>构建工具介绍</h1><p>Grunt: 是一个优化前端的开发流程的工具。<br>配置一系列的 task，定义 task 处理的事务（例如文件压缩合并、启动 server、版本控制等），然后定义执行顺序，来让 Grunt 执行这些 task，从而构建项目的整个前端开发流程。</p><p>工作方式:<br><img src="/img/md/webpack1.png"></p><p>Wepack: 是一种模块化的解决方案。更强调模块化。<br>把你的项目当做一个整体，通过一个指定的主文件名（index.js, 一般是入口文件），webpack 将从这个文件开始找到你的项目所依赖的文件，使用 loaders 来处理它们，最后打包为一个浏览器可识别的 js 文件。<br><img src="/img/md/webpack2.png"></p><p>Vite: 一种新型前端构建工具,它区别与不同的打包工具,它在开发环境中不对项目进行整体打包。<br>原因：当我们的构建的项目越来越庞大时，对整个项目进行资源整合的时间会变长，如果有数千个模块的项目在进行构建时甚至需要几分钟才能启动开发服务器。所以 vite 解决了在开发过程中需要等待整个项目打包这一段过程，让开发时更加丝滑。<br>依赖：使用 esbuild（GO 编写）预构建依赖，比 JavaScript 编写的打包器预构建依赖快 10-100 倍。<br>源码：在浏览器请求资源时-&gt; vite 转换一些非 js 文件-&gt;动态导入代码。<br>源码利用浏览器的协商缓存（304 Not Modified），依赖模块请求则会通过 Cache-Control: max-age&#x3D;31536000, immutable 进行强缓存，保持热更新的速度。<br><img src="/img/md/webpack3.png"></p><h1 id="如何选择适合的构建工具？"><a href="#如何选择适合的构建工具？" class="headerlink" title="如何选择适合的构建工具？"></a>如何选择适合的构建工具？</h1><p>Grunt 对于一些中小型项目而言更加轻便和灵活，如果只针对代码压缩合并，Grunt 就可以满足要求，发展历程长，基本是稳定的。但是如果要处理庞大的项目文件，特别是处理多种类型的资源文件，强调模块开发，Webpack 则更适合这个场景。Webpack 对于中大型项目而言是更加稳定的，文档资料和迭代速度也很快。当然这对开发人员而言也是挺头疼的，隔一段时间就需要去适应文档的配置。Vite 作为一门新的构建技术，想要它去构建一门稳定的中大型项目有点冒险，虽然已经发布稳定版本，但是还是会有一些潜在的风险，等它更多人推广后使用更加稳妥，但是对于平时构建一些个人网站和项目等使用 vite，感受一下它的便捷也可以。</p><h1 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack"></a>什么是 webpack</h1><p><strong>webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。 在 webpack 看来,前端的所有资源文件(js&#x2F;json&#x2F;css&#x2F;img&#x2F;less&#x2F;…)都会作为模块处理。 它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</strong></p><p><img src="/img/md/webpack4.png"></p><h1 id="理解-module、chunk、bundle"><a href="#理解-module、chunk、bundle" class="headerlink" title="理解 module、chunk、bundle"></a>理解 module、chunk、bundle</h1><p>在 webpack 中，一切皆 module，任何一个文件都可以看成是 module。js、css、图片等都是 module<br>webpack 会将入口文件以及它的依赖引入到一个 chunk 中，然后进过一系列处理打包成 bundle</p><p><img src="/img/md/webpack5.png"></p><p>大致流程如下：</p><p>1、根据 index.js 入口文件依赖关系生成树状图</p><p>2、根据树状图引入相关的资源 生成 chunk(块)</p><p>3、对 chunk 进行处理 (babel、less-loader …)</p><p>4、打包生成 bundler.js</p><p>5、将 bundler.js 文件引入到 index.html 中</p><h1 id="webpack-五个核心概念"><a href="#webpack-五个核心概念" class="headerlink" title="webpack 五个核心概念"></a>webpack 五个核心概念</h1><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p><strong>入口（Entry）：指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。其取值可以是字符串，数组或者一个对象</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单入口单文件</span></span><br><span class="line"><span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单入口多文件</span></span><br><span class="line"><span class="attr">entry</span>: [<span class="string">&quot;./ src/index.js&quot;</span>, <span class="string">&quot;./src/common.js&quot;</span>] <span class="comment">// 若index.js与common.js没有依赖关系，可以通过此方式将它们打包在一起</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多入口</span></span><br><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">  <span class="attr">page1</span>: <span class="string">&quot;./src/page1.js&quot;</span>,</span><br><span class="line">  <span class="attr">page2</span>: <span class="string">&quot;./src/page2.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p><strong>输出（Output）：指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名</strong></p><p>webpack 打包的输出，常用配置如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">  <span class="comment">// 单入口时（默认）</span></span><br><span class="line">  <span class="comment">// filename: &quot;main.js&quot;,</span></span><br><span class="line">  <span class="comment">// filename: &quot;js/main.js&quot;, // filename也可以写路径，表示输出到 dist/js 目录下</span></span><br><span class="line">  <span class="comment">// 多入口时，由于会有多个输出，因此文件名不能写死</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>, <span class="comment">// name表示chunk的名称，此处为entry中的key值</span></span><br><span class="line">  <span class="attr">chunkFilename</span>: <span class="string">&quot;[name].js&quot;</span>, <span class="comment">// 按需加载的模块打包后的名称</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span> <span class="comment">// 项目部署在服务器上的路径，如果在根路径则为 /</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p><strong>处理器（Loader）：webpack 默认只能处理 js、json 格式的文件，而 loader 的作用则是将其他格式的文件，转换成 webpack 能够处理的文件</strong></p><p>使用 loader 需要在 webpack 配置文件的 module.rules 中配置：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"> <span class="attr">entry</span>: ...,</span><br><span class="line"> <span class="attr">output</span>: ...,</span><br><span class="line"> <span class="attr">module</span>: &#123;</span><br><span class="line">   <span class="attr">noParse</span>:  <span class="regexp">/node_modules/</span>, <span class="comment">//忽略解析 node_modules 中的文件</span></span><br><span class="line">   <span class="attr">rules</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.xxx$/</span>, <span class="comment">// 匹配后缀名为xxx的文件</span></span><br><span class="line">       <span class="comment">// 单个loader</span></span><br><span class="line">       <span class="comment">// loader: &quot;xxx-loader&quot;,</span></span><br><span class="line">       <span class="comment">// options: &#123;&#125;,</span></span><br><span class="line">       <span class="comment">// 多个loader，loader的处理顺序为从后往前，因此需要优先处理的loader放在数组最后面</span></span><br><span class="line">       <span class="comment">// use: [&quot;xxxx-loader&quot;, &quot;xxx-loader&quot;],</span></span><br><span class="line">       <span class="comment">//  如果某个loader需要配置，写成下面的格式</span></span><br><span class="line">       <span class="attr">use</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">loader</span>: <span class="string">&quot;xxxx-loader&quot;</span>,</span><br><span class="line">           <span class="attr">options</span>: &#123;&#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&quot;xxx-loader&quot;</span></span><br><span class="line">       ],</span><br><span class="line">       <span class="attr">include</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./src&quot;</span>)], <span class="comment">// 只解析src中的文件，可以是正则</span></span><br><span class="line">       <span class="attr">exclude</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./library&quot;</span>)], <span class="comment">// 忽略library中的文件，可以是正则</span></span><br><span class="line">       <span class="comment">// 当多个规则同时匹配某类文件时，可以使用enforce参数指定优先级</span></span><br><span class="line">       <span class="attr">enforce</span>: <span class="string">&quot;pre&quot;</span> <span class="comment">// 优先执行该规则里的loader，post 最后执行该规则里的loader</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// 当规则匹配时，不再匹配后面的规则。例如某个文件匹配到了第一个规则，不再匹配后面规则</span></span><br><span class="line">       <span class="attr">oneOf</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">test</span>: <span class="regexp">/\.xxx$/</span>,</span><br><span class="line">           <span class="attr">use</span>: <span class="string">&quot;xxx-loader&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">test</span>: <span class="regexp">/\.xxx$/</span>,</span><br><span class="line">           <span class="attr">use</span>: <span class="string">&quot;xxx-loader&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p><strong>插件(Plugins)可以用于执行范围更广的任务，它能处理 loader 无法处理的事情。插件的范围包括，从打包优化和压缩， 一直到重新定义环境中的变量等。</strong></p><p>它使用非常简单，在 plugins 数组中添加插件的实例化对象即可</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xxxWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;xxx-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: ...,</span><br><span class="line">  <span class="attr">output</span>: ...,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">xxxWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">xxxxWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 插件的配置项</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h2><p><strong>webpack 打包分为两种模式，开发模式（development）与生产模式（production），默认为生产模式</strong></p><table><thead><tr><th align="left">选择</th><th align="left">描述</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">development</td><td align="left">会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td><td align="left">能让代码本地调试 运行的环境</td></tr><tr><td align="left">production</td><td align="left">会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.</td><td align="left">能让代码优化上线 运行的环境</td></tr></tbody></table><p><strong>Mode 的配置更多含义</strong></p><p><img src="/img/md/webpack6.png"><br><img src="/img/md/webpack7.png"></p><h1 id="webpack-使用前提"><a href="#webpack-使用前提" class="headerlink" title="webpack 使用前提"></a>webpack 使用前提</h1><p>webpack 的官方文档是 <a href="https://webpack.js.org/">https://webpack.js.org/</a></p><p>webpack 的中文官方文档是 <a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p><p>DOCUMENTATION：文档详情，也是我们最关注的</p><p>Webpack 的运行是依赖 Node 环境的，所以我们电脑上必须有 Node 环境</p><p>所以我们需要先安装 Node.js，并且同时会安装 npm；</p><p>我当前电脑上的 node 版本是 v14.15.5，npm 版本是 6.14.11（你也可以使用 nvm 或者 n 来管理 Node 版本）；</p><p>Node 官方网站：<a href="https://nodejs.org/">https://nodejs.org/</a></p><p><img src="/img/md/webpack8.png"></p><h1 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h1><p><strong>webpack 的安装目前分为两个：webpack、webpack-cli</strong></p><h2 id="那么它们是什么关系呢？"><a href="#那么它们是什么关系呢？" class="headerlink" title="那么它们是什么关系呢？"></a>那么它们是什么关系呢？</h2><p>执行 webpack 命令，会执行 node_modules 下的.bin 目录下的 webpack；</p><p>webpack 在执行时是依赖 webpack-cli 的，如果没有安装就会报错；</p><p>而 webpack-cli 中代码执行时，才是真正利用 webpack 进行编译和打包的过程；</p><p>所以在安装 webpack 时，我们需要同时安装 webpack-cli（第三方的脚手架事实上是没有使用 webpack-cli 的，而是类似于自 己的 vue-service-cli 的东西）</p><p><img src="/img/md/webpack9.png"></p><p>全局安装：<strong>npm install webpack webpack-cli –g</strong></p><p>局部安装：<strong>npm install webpack webpack-cli –D</strong></p><h1 id="webpack-的默认打包"><a href="#webpack-的默认打包" class="headerlink" title="webpack 的默认打包"></a>webpack 的默认打包</h1><p>我们可以通过 webpack 进行打包，之后运行打包之后的代码</p><p>在目录下直接执行 webpack 命令：<strong>webpack</strong></p><p>生成一个 dist 文件夹，里面存放一个 main.js 的文件，就是我们打包之后的文件：</p><p>这个文件中的代码被压缩和丑化了；</p><p>另外我们发现代码中依然存在 ES6 的语法，比如箭头函数、const 等，这是因为默认情况下 webpack 并不清楚我们打包后的文 件是否需要转成 ES5 之前的语法，后续我们需要通过 babel 来进行转换和设置；</p><p>我们发现是可以正常进行打包的，但是有一个问题，webpack 是如何确定我们的入口的呢？</p><p>事实上，当我们运行 webpack 时，webpack 会查找当前目录下的 src&#x2F;index.js 作为入口；</p><p>所以，如果当前项目中没有存在 src&#x2F;index.js 文件，那么会报错；</p><p>当然，我们也可以通过配置来指定入口和出口</p><h2 id="开发环境指令："><a href="#开发环境指令：" class="headerlink" title="开发环境指令："></a>开发环境指令：</h2><p><strong>webpack src&#x2F;js&#x2F;index.js -o build&#x2F;js&#x2F;built.js –mode&#x3D;development</strong></p><p>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成 浏览器能识别的语法。</p><p><strong>webpack –entry .&#x2F;src&#x2F;main.js –output-path .&#x2F;build&#x2F;js&#x2F;bundle.js –mode&#x3D;development</strong></p><h2 id="生产环境指令："><a href="#生产环境指令：" class="headerlink" title="生产环境指令："></a>生产环境指令：</h2><p><strong>webpack src&#x2F;js&#x2F;index.js -o build&#x2F;js&#x2F;built.js –mode&#x3D;production</strong></p><p>功能：在开发配置功能上多一个功能，压缩代码。</p><p><strong>webpack –entry .&#x2F;src&#x2F;main.js –output-path .&#x2F;build&#x2F;js&#x2F;bundle.js –mode&#x3D;production</strong></p><h2 id="配置-script-脚本"><a href="#配置-script-脚本" class="headerlink" title="配置 script 脚本"></a>配置 script 脚本</h2><p>在 package.json，script 字段下配置脚本，执行命令更为简便：npm run 脚本名</p><p>结论 ：</p><ul><li>webpack 能够编译打包 js 和 json 文件。</li><li>能将 es6 的模块化语法转换成浏览器能识别的语法。</li><li>能压缩代码。</li></ul><p>问题 ：</p><ul><li>不能编译打包 css、img 等文件。</li><li>不能将 js 的 es6 基本语法转化为 es5 以下语法。</li><li>在通常情况下，webpack 需要打包的项目是非常复杂的，并且我们需要一系列的配置来满足要求，默认配置必然是不可以的。</li></ul><h1 id="webpack-开发环境配置"><a href="#webpack-开发环境配置" class="headerlink" title="webpack 开发环境配置"></a>webpack 开发环境配置</h1><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在项目根目录下创建文件 webpack.config.js，来作为 webpack 的配置文件，名字默认，如果要修改，执行时需要添加 –config 配置文件名来读取该配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="comment">// node 内置核心模块，用来处理路径问题</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/js/index.js&quot;</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出配置</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;./bundle.js&quot;</span>, <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;build/js&quot;</span>), <span class="comment">// 输出文件路径配置</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">//开发环境</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打包样式资源"><a href="#打包样式资源" class="headerlink" title="打包样式资源"></a>打包样式资源</h2><h3 id="1、准备-css、less-资源"><a href="#1、准备-css、less-资源" class="headerlink" title="1、准备 css、less 资源"></a>1、准备 css、less 资源</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个元素</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;dv&#x27;</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">div.<span class="property">innerHTML</span> = <span class="string">&#x27;把酒祝东风，且共从容&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line"></span><br><span class="line">.<span class="property">dv</span> &#123;</span><br><span class="line">  background-<span class="attr">color</span>:tomato;</span><br><span class="line">  <span class="comment">/* 页面文字不让选中 */</span></span><br><span class="line">  user-<span class="attr">select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">执行编译发现报错: 模块解析失败，你需要一个合适的loader来处理这个文件类型</span><br><span class="line"></span><br><span class="line">上面的错误信息告诉我们需要一个loader来加载这个css文件，但是loader是什么呢？</span><br><span class="line">loader 可以用于对模块的源代码进行转换；</span><br><span class="line">我们可以将css文件也看成是一个模块，我们是通过<span class="keyword">import</span>来加载这个模块的；</span><br><span class="line">在加载这个模块时，webpack其实并不知道如何对其进行加载，我们必须制定对应的loader来完成这个功能；</span><br><span class="line">那么我们需要一个什么样的loader呢？</span><br><span class="line">对于加载css文件来说，我们需要一个可以读取css文件的loader；</span><br><span class="line">这个loader最常用的是css-loader</span><br></pre></td></tr></table></figure><h3 id="2、下载安装-loader-包-npm-i-css-loader-D"><a href="#2、下载安装-loader-包-npm-i-css-loader-D" class="headerlink" title="2、下载安装 loader 包 npm i css-loader -D"></a>2、下载安装 loader 包 npm i css-loader -D</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">如何使用这个loader来加载css文件呢？有三种方式：</span><br><span class="line">- 内联方式；</span><br><span class="line">- <span class="variable constant_">CLI</span>方式（webpack5中不再使用）；</span><br><span class="line">- 配置方式；</span><br><span class="line">内联方式：内联方式使用较少，因为不方便管理；</span><br><span class="line">- 在引入的样式前加上使用的loader，并且使用!分割: <span class="keyword">import</span> <span class="string">&#x27;css-loader!./js/a.css&#x27;</span></span><br><span class="line"><span class="variable constant_">CLI</span>方式（webpack5中不再使用）这里不展开说</span><br></pre></td></tr></table></figure><h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resolve 用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 配置</span></span><br><span class="line">  <span class="comment">// 入口起点</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;built.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="comment">// __dirname nodejs 的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;build&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader 的配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// module.rules中允许我们配置多个loader（因为我们也会继续使用其他的loader，来完成其他文件的加载）</span></span><br><span class="line">    <span class="comment">// 这种方式可以更好的表示loader的配置，也方便后期的维护，同时也让你对各个Loader有一个全局的概览</span></span><br><span class="line">    <span class="comment">// rules属性对应的值是一个数组 数组中存放的是一个个的Rule，Rule是一个对象，对象中可以设置多个属性</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 详细 loader 配置</span></span><br><span class="line">      <span class="comment">// 不同文件必须配置不同 loader 处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用于对 resource（资源）进行匹配的，通常会设置成正则表达式</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 对应的值时一个数组 表示使用哪些 loader 进行处理</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// use 数组中 loader 执行顺序：从右到左，从下到上 依次执行</span></span><br><span class="line">          <span class="comment">// 创建 style 标签，将 js 中的样式资源插入进行，添加到 head 中生效</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="comment">// 将 css 文件变成 commonjs 模块加载 js 中，里面内容是样式字符串</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// use属性：对应的值时一个数组：[UseEntry]</span></span><br><span class="line">        <span class="comment">// UseEntry是一个对象，可以通过对象的属性来设置一些其他属性</span></span><br><span class="line">        <span class="comment">// loader：必须有一个 loader属性，对应的值是一个字符串；</span></span><br><span class="line">        <span class="comment">// options：可选的属性，值是一个字符串或者对象，值会被传入到loader中；</span></span><br><span class="line">        <span class="comment">// query：目前已经使用options来替代；</span></span><br><span class="line">        <span class="comment">// 传递字符串（如：use: [ &#x27;style-loader&#x27; ]）是 loader 属性的简写方式（如：use: [ &#123; loader: &#x27;style-loader&#x27;&#125; ]）；</span></span><br><span class="line">        <span class="comment">// loader属性： Rule.use: [ &#123; loader &#125; ] 的简写。</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="comment">// mode: &#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4、运行指令：webpack-或-自定义脚本-npm-run-build"><a href="#4、运行指令：webpack-或-自定义脚本-npm-run-build" class="headerlink" title="4、运行指令：webpack 或 自定义脚本 npm run build"></a>4、运行指令：webpack 或 自定义脚本 npm run build</h3><h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p>我们已经可以通过 css-loader 来加载 css 文件了</p><p>但是你会发现这个 css 在我们的代码中并没有生效（页面没有效果）。</p><p>这是为什么呢？</p><p>因为 css-loader 只是负责将.css 文件进行解析，并不会将解析之后的 css 插入到页面中；</p><p>如果我们希望再完成插入 style 的操作，那么我们还需要另外一个 loader，就是 style-loader；</p><p>安装 style-loader：<strong>npm install style-loader -D</strong></p><p>那么我们应该如何使用 style-loader：</p><p>在配置文件中，添加 style-loader，具体看上面代码</p><p>注意：因为 loader 的执行顺序是从右向左（或者说从下到上，或者说从后到前的），所以我们需要将 style- loader 写到 css-loader 的前面；</p><p>ps：当前目前我们的 css 是通过页内样式的方式添加进来的；</p><p>​ 后续我们也会讲如何将 css 抽取到单独的文件中，并且进行压缩等操作</p><h2 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h2><p>在我们开发中，我们可能会使用 less、sass、stylus 的预处理器来编写 css 样式，效率会更高。</p><p>那么，如何可以让我们的环境支持这些预处理器呢？</p><p>首先我们需要确定，less、sass 等编写的 css 需要通过工具转换成普通的 css；</p><p>比如我们编写如下的 less 样式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="attr">fsz</span>:20px;</span><br><span class="line">@<span class="attr">fsw</span>:<span class="string">&#x27;bold&#x27;</span>;</span><br><span class="line"></span><br><span class="line">.<span class="property">dv</span> &#123;</span><br><span class="line">  font-<span class="attr">size</span>: @fsz;</span><br><span class="line">  font-<span class="attr">weight</span>: @fsw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用 less 工具来完成它的编译转换：<strong>npm install less -D</strong></p><p>执行如下命令：<strong>npx lessc .&#x2F;src&#x2F;css&#x2F;title.less title.css</strong></p><p>但是在项目中我们会编写大量的 css，它们如何可以自动转换呢？</p><p>这个时候我们就可以使用 less-loader，来自动使用 less 工具转换 less 到 css；</p><p>此时我们需要<strong>配置 webpack.config.js</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line"><span class="attr">use</span>: [</span><br><span class="line"><span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line"><span class="comment">// 将 less 文件编译成 css 文件</span></span><br><span class="line"><span class="comment">// 需要下载 less-loader 和 less</span></span><br><span class="line"><span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PostCss"><a href="#PostCss" class="headerlink" title="PostCss"></a>PostCss</h2><h3 id="什么是-PostCSS-呢？"><a href="#什么是-PostCSS-呢？" class="headerlink" title="什么是 PostCSS 呢？"></a>什么是 PostCSS 呢？</h3><p>PostCSS 是一个通过 JavaScript 来转换样式的工具；</p><p>这个工具可以帮助我们进行一些 CSS 的转换和适配，比如自动添加浏览器前缀、css 样式的重置；</p><p>但是实现这些功能，我们需要借助于 PostCSS 对应的插件；</p><p>如何使用 PostCSS 呢？主要就是两个步骤：</p><p><strong>第一步：查找 PostCSS 在构建工具中的扩展，比如 webpack 中的 postcss-loader；</strong></p><p><strong>第二步：选择可以添加你需要的 PostCSS 相关的插件；</strong></p><p>当然，我们能不能也直接在终端使用 PostCSS 呢？</p><p>也是可以的，但是我们需要单独安装一个工具 postcss-cli；</p><p>我们可以安装一下它们：postcss、postcss-cli</p><p><strong>npm install postcss postcss-cli -D</strong></p><p>我们编写一个需要添加前缀的 css：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">dv</span> &#123;</span><br><span class="line">  <span class="comment">/* 页面文字不让选中 */</span></span><br><span class="line">  user-<span class="attr">select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="autoprefixer"><a href="#autoprefixer" class="headerlink" title="autoprefixer"></a>autoprefixer</h3><p>因为我们需要添加前缀，所以要安装 autoprefixer：</p><p><strong>npm install autoprefixer -D</strong></p><p>直接使用使用 postcss 工具，并且制定使用 autoprefixer</p><p><strong>npx postcss –use autoprefixer -o end.css .&#x2F;src&#x2F;css&#x2F;style.css</strong></p><h3 id="postcss-loader"><a href="#postcss-loader" class="headerlink" title="postcss-loader"></a>postcss-loader</h3><p>真实开发中我们必然不会直接使用命令行工具来对 css 进行处理，而是可以借助于构建工具：</p><p>在 webpack 中使用 postcss 就是使用 postcss-loader 来处理的；</p><p>我们来安装 postcss-loader：</p><p><strong>npm install postcss-loader -D</strong></p><p>我们修改加载 css 的 loader：（配置文件已经过多，给出一部分了）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">  <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">  <span class="comment">// 使用插件</span></span><br><span class="line">  <span class="comment">// ps:因为postcss需要有对应的插件才会起效果，所以我们需要配置它的plugin；</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// 引入插件</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以将这些配置信息放到一个单独的文件中进行管理：</p><p>在根目录下创建 postcss.config.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="postcss-preset-env"><a href="#postcss-preset-env" class="headerlink" title="postcss-preset-env"></a>postcss-preset-env</h3><p>事实上，在配置 postcss-loader 时，我们配置插件并不需要使用 autoprefixer。</p><p>我们可以使用另外一个插件：postcss-preset-env</p><p>postcss-preset-env 也是一个 postcss 的插件；</p><p>它可以帮助我们将一些现代的 CSS 特性，转成大多数浏览器认识的 CSS，并且会根据目标浏览器或者运行时环境 添加所需的 polyfill；</p><p>也包括会自动帮助我们添加 autoprefixer（所以相当于已经内置了 autoprefixer）；</p><p>首先，我们需要安装 postcss-preset-env：</p><p><strong>npm install postcss-preset-env -D</strong></p><p>之后，我们直接修改掉之前的 autoprefixer 即可：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">  <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包-HTML-资源"><a href="#打包-HTML-资源" class="headerlink" title="打包 HTML 资源"></a>打包 HTML 资源</h2><h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><p>另外还有一个<strong>不太规范</strong>的地方：</p><p>我们的 HTML 文件是编写在根目录下的，而最终打包的 dist 文件夹中是没有 index.html 文件的。</p><p>在进行项目部署的时，必然也是需要有对应的入口文件 index.html；</p><p>所以我们也需要对 index.html 进行打包处理；</p><p>对 HTML 进行打包处理我们可以使用另外一个插件：<strong>HtmlWebpackPlugin；</strong></p><p>1、创建 html 页面</p><p>2、下载安装 plugin 包：npm install -D html-webpack-plugin</p><p>3、修改配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="comment">// html-webpack-plugin</span></span><br><span class="line">    <span class="comment">//功能：默认会创建一个空的 HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="comment">//需求：需要有结构的 HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">//复制 &#x27;./src/index.html&#x27;文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打包图片资源"><a href="#打包图片资源" class="headerlink" title="打包图片资源"></a>打包图片资源</h2><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><blockquote><p>参考文章：<a href="https://www.jianshu.com/p/c0de85a2d3fb">https://www.jianshu.com/p/c0de85a2d3fb</a></p></blockquote><h4 id="1、创建图片资源"><a href="#1、创建图片资源" class="headerlink" title="1、创建图片资源"></a>1、创建图片资源</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">方式一:</span><br><span class="line"><span class="keyword">let</span> dv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">dv.<span class="property">className</span> = <span class="string">&#x27;box&#x27;</span></span><br><span class="line">dv.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;400px&#x27;</span></span><br><span class="line">dv.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;400px&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(dv)</span><br><span class="line"></span><br><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line">  background-<span class="attr">image</span>: <span class="title function_">url</span>(<span class="string">&#x27;../imgs/2.jpg&#x27;</span>);</span><br><span class="line">  background-<span class="attr">repeat</span>: no-repeat;</span><br><span class="line">  background-<span class="attr">size</span>: contain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方式二:</span><br><span class="line"><span class="keyword">import</span> imgUrl <span class="keyword">from</span> <span class="string">&#x27;./imgs/1.png&#x27;</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="comment">// img.src = &#x27;./imgs/1.png&#x27;</span></span><br><span class="line">img.<span class="property">src</span> = imgUrl</span><br><span class="line">img.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;400px&#x27;</span></span><br><span class="line">img.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;400px&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img)</span><br></pre></td></tr></table></figure><p>2、下载安装 loader 包 npm install –save-dev file-loader</p><p>3、修改配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;built.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;build&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;imgs/[name]-[hash:5].[ext]&quot;</span>,</span><br><span class="line">            <span class="comment">// outputPath: imgs</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;javascript/auto&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="文件命名规则"><a href="#文件命名规则" class="headerlink" title="文件命名规则"></a>文件命名规则</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有时候我们处理后的文件名称按照一定的规则进行显示：</span><br><span class="line">比如保留原来的文件名、扩展名，同时为了防止重复，包含一个hash值等；</span><br><span class="line">这个时候我们可以使用PlaceHolders来完成，webpack给我们提供了大量的PlaceHolders来显示不同的内容：</span><br><span class="line">https://webpack.js.org/loaders/file-loader/#placeholders</span><br><span class="line">我们可以在文档中查阅自己需要的placeholder；</span><br><span class="line">我们这里介绍几个最常用的placeholder：</span><br><span class="line">[ext]： 处理文件的扩展名；</span><br><span class="line">[name]：处理文件的名称；</span><br><span class="line">[hash]：文件的内容，使用MD4的散列函数处理，生成的一个128位的hash值（32个十六进制）；</span><br><span class="line">[contentHash]：在file-loader中和[hash]结果是一致的（在webpack的一些其他地方不一样，后面会讲到）；</span><br><span class="line">[hash:&lt;length&gt;]：截图hash的长度，默认32个字符太长了；</span><br><span class="line">[path]：文件相对于webpack配置文件的路径；</span><br></pre></td></tr></table></figure><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p><strong>url-loader</strong>和<strong>file-loader</strong>的工作方式是相似的，但是可以将较小的文件，转成 base64 的 URI</p><p>安装：<strong>npm install url-loader -D</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/i</span>,</span><br><span class="line">  <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;[name]-[hash:5].[ext]&#x27;</span>,</span><br><span class="line">          <span class="attr">outputPath</span>: <span class="string">&#x27;imgs&#x27;</span>,</span><br><span class="line">          <span class="attr">limit</span>: <span class="number">20</span> * <span class="number">1024</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>显示结果是一样的，并且图片可以正常显示；</strong></p><p>但是在 dist 文件夹中，我们会看不到图片文件：</p><p>因为默认情况下 url-loader 会将所有的图片文件转成 base64 编码</p><p>但是开发中我们往往是小的图片需要转换，但是大的图片直接使用图片即可</p><p>这是因为小的图片转换 base64 之后可以和页面一起被请求，减少不必要的请求过程；</p><p>而大的图片也进行转换，反而会影响页面的请求速度；</p><p>那么，我们如何可以<strong>限制哪些大小的图片转换和不转换</strong>呢？</p><p>url-loader 有一个<strong>options</strong>属性<strong>limit</strong>，可以用于设置转换的限制；</p><blockquote><p><strong>url-loader 在 webpack5 中已废弃</strong><br>参考文章：<a href="https://www.jianshu.com/p/36e972b19b28">https://www.jianshu.com/p/36e972b19b28</a></p></blockquote><h3 id="html-loader"><a href="#html-loader" class="headerlink" title="html-loader"></a>html-loader</h3><p>在 html 中引入一张图片，npm run build 后发现该图片无法打包</p><p>解决方式：</p><p>安装 html-loader <strong>npm i html-loader -D</strong></p><p>修改配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理html中的图片</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">test</span>: <span class="regexp">/\.(html|htm)$/</span>,</span><br><span class="line">   <span class="comment">// 处理html文件的img图片(负责引入img, 从而能被url-loader进行处理)</span></span><br><span class="line">   <span class="attr">loader</span>: <span class="string">&#x27;html-loader&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包其它资源"><a href="#打包其它资源" class="headerlink" title="打包其它资源"></a>打包其它资源</h2><h3 id="1、引入字体图标"><a href="#1、引入字体图标" class="headerlink" title="1、引入字体图标"></a>1、引入字体图标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> elI = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">elI.<span class="property">className</span> = <span class="string">&quot;icomoon icon-heart&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elI);</span><br></pre></td></tr></table></figure><p>2、下载 file-loader ：npm i file-loader -D</p><p>3、修改配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增规则 =&gt; 打包其他资源(除了 html/js/css资源以外的资源)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//排除 css/js/html资源</span></span><br><span class="line">   <span class="attr">exclude</span>: <span class="regexp">/\.(css|js|html|less)$/</span>,</span><br><span class="line">   <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">   <span class="attr">options</span>: &#123;</span><br><span class="line">   <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;fonts/[hash:10].[ext]&#x27;</span></span><br><span class="line"> &#125;,</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;javascript/auto&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="asset-module-type"><a href="#asset-module-type" class="headerlink" title="asset module type"></a>asset module type</h1><p>我们当前使用的 webpack 版本是 webpack5：</p><p>在 webpack5 之前，加载这些资源我们需要使用一些 loader，比如 raw-loader 、url-loader、file-loader；</p><p>在 webpack5 开始，我们可以直接使用资源模块类型（<strong>asset module type</strong>），来替代上面的这些 loader；</p><p>**资源模块类型(asset module type)**，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><p><strong>asset&#x2F;resource</strong> 发送一个单独的文件并导出 URL。之前通过使用 file-loader 实现；</p><p><strong>asset&#x2F;inline</strong> 导出一个资源的 data URI。之前通过使用 url-loader 实现；</p><p><strong>asset&#x2F;source</strong> 导出资源的源代码。之前通过使用 raw-loader 实现；</p><p><strong>asset</strong> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过 url-loader + limit 配置资源体积限制实现；</p><h3 id="比如打包图片："><a href="#比如打包图片：" class="headerlink" title="比如打包图片："></a>比如打包图片：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/i</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">    <span class="comment">// 生成器</span></span><br><span class="line">    <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;img/[name].[hash:5][ext]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 解析</span></span><br><span class="line">  <span class="attr">parser</span>: &#123;</span><br><span class="line">    <span class="comment">// 条件</span></span><br><span class="line">    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">      <span class="comment">// 小于20kb的图片都转成base64位</span></span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">20</span> * <span class="number">1024</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="转-base64"><a href="#转-base64" class="headerlink" title="转 base64"></a>转 base64</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">因为不生成文件，所以没有generator属性</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/i</span>,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;asset/inline&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比如打包字体："><a href="#比如打包字体：" class="headerlink" title="比如打包字体："></a>比如打包字体：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(woff2?|eot|ttf)$/</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">     <span class="attr">filename</span>: <span class="string">&#x27;font/[name].[ext]&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Plugins-1"><a href="#Plugins-1" class="headerlink" title="Plugins"></a>Plugins</h1><p><strong>Webpack</strong> 的另一个核心是 Plugin，官方有这样一段对 Plugin 的描述：</p><p>While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.</p><p>上面表达的含义翻译过来就是：</p><p>Loader 是用于特定的模块类型进行转换；</p><p>Plugin 可以用于执行更加广泛的任务，比如打包优化、资源管理、环境变量注入等</p><p><img src="/img/md/webpack10.png"></p><h2 id="CleanWebpackPlugin"><a href="#CleanWebpackPlugin" class="headerlink" title="CleanWebpackPlugin"></a>CleanWebpackPlugin</h2><p>前面我们演示的过程中，每次修改了一些配置，重新打包时，都需要手动删除 build 文件夹：</p><p>我们可以借助于一个插件来帮助我们完成，这个插件就是 CleanWebpackPlugin；</p><p>首先，我们先安装这个插件：</p><p><strong>npm install clean-webpack-plugin -D</strong></p><p>修改配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="HtmlWebpackPlugin-1"><a href="#HtmlWebpackPlugin-1" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><p>对 HTML 进行打包处理我们可以使用另外一个插件：HtmlWebpackPlugin；</p><p>1、创建 html 页面</p><p>2、下载安装 plugin 包：npm install -D html-webpack-plugin</p><p>3、修改配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="comment">// html-webpack-plugin</span></span><br><span class="line">    <span class="comment">//功能：默认会创建一个空的 HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="comment">//需求：需要有结构的 HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">//复制 &#x27;./src/index.html&#x27;文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>自定义 html 模板</p><p>如果我们想在自己的模块中加入一些比较特别的内容：</p><p>比如添加一个 noscript 标签，在用户的 JavaScript 被关闭时，给予响应的提示；</p><p>比如在开发 vue 或者 react 项目时，我们需要一个可以挂载后续组件的根标签；</p><p>我们需要一个属于自己的模板</p><p>我们选择复制 vue 的 index.html 作为模板</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;noscript&gt;</span><br><span class="line">      &lt;strong&gt;We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt;</span><br><span class="line">    &lt;/noscript&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- built files will be auto injected --&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面的代码中，会有一些类似这样的语法&lt;%&#x3D; 变量 %&gt;，这个是 EJS 模块填充数据的方式。</p><p>在配置 HtmlWebpackPlugin 时，我们可以添加如下配置：</p><p>template：指定我们要使用的模块所在的路径；</p><p>title：在进行 htmlWebpackPlugin.options.title 读取时，就会读到该信息；</p><p>但是，这个时候编译还是会报错，因为在我们的模块中还使用到一个<strong>BASE_URL</strong>的常量：</p><p><img src="/img/md/webpack11.png"></p><p>这是因为在编译 template 模块时，有一个 BASE_URL：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>但是我们并没有设置过这个常量值，所以会出现没有定义的错误；</p><p>这个时候我们可以使用 DefinePlugin 插件</p><h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><p>DefinePlugin 允许在编译时创建配置的全局常量，是一个 webpack 内置的插件（不需要单独安装）：</p><p><img src="/img/md/webpack12.png"></p><p>这个时候，编译 template 就可以正确的编译了，会读取到 BASE_URL 的值</p><h2 id="CopyWebpackPlugin"><a href="#CopyWebpackPlugin" class="headerlink" title="CopyWebpackPlugin"></a>CopyWebpackPlugin</h2><p>在 vue 的打包过程中，如果我们将一些文件放到 public 的目录下，那么这个目录会被复制到 dist 文件夹中。</p><p>这个复制的功能，我们可以使用 CopyWebpackPlugin 来完成；</p><p>安装 CopyWebpackPlugin 插件：</p><p><strong>npm install copy-webpack-plugin -D</strong></p><p>接下来<strong>配置 CopyWebpackPlugin</strong>即可：</p><p>复制的规则在 patterns 中设置；</p><p><strong>from：</strong>设置从哪一个源中开始复制；</p><p><strong>to：</strong>复制到的位置，可以省略，会默认复制到打包的目录下；</p><p><strong>globOptions：</strong>设置一些额外的选项，其中可以编写需要忽略的文件：</p><p>.DS_Store：mac 目录下回自动生成的一个文件；</p><p>index.html：也不需要复制，因为我们已经通过 HtmlWebpackPlugin 完成了 index.html 的生成；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">copyWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">patterns</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&#x27;public&#x27;</span>,</span><br><span class="line">      <span class="attr">globOptions</span>: &#123;</span><br><span class="line">        <span class="comment">// 忽略</span></span><br><span class="line">        <span class="attr">ignore</span>: [</span><br><span class="line">          <span class="string">&#x27;**/.DS_Store&#x27;</span></span><br><span class="line">          <span class="string">&#x27;**/index.html&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Babel-相关"><a href="#Babel-相关" class="headerlink" title="Babel 相关"></a>Babel 相关</h1><p>事实上，在开发中我们很少直接去接触 babel，但是 <strong>babel</strong> 对于前端开发来说，目前是不可缺少的一部分：</p><p>开发中，我们想要使用 ES6+的语法，想要使用 TypeScript，开发 React 项目，它们都是离不开 Babel 的；</p><p>所以，学习 Babel 对于我们理解代码从编写到线上的转变过程至关重要；</p><p>那么，<strong>Babel 到底是什么呢？</strong></p><p>Babel 是一个工具链，主要用于旧浏览器或者环境中将 ECMAScript 2015+代码转换为向后兼容版本的 JavaScript；</p><p>包括：语法转换、源代码转换等；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = (<span class="number">10</span>)[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)].<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Babel-命令行使用"><a href="#Babel-命令行使用" class="headerlink" title="Babel 命令行使用"></a>Babel 命令行使用</h3><p>babel 本身可以作为<strong>一个独立的工具</strong>（和 postcss 一样），不和 webpack 等构建工具配置来单独使用。</p><p>如果我们希望在命令行尝试使用 babel，需要安装如下库：</p><p>@babel&#x2F;core：babel 的核心代码，必须安装；</p><p>@babel&#x2F;cli：可以让我们在命令行使用 babel；</p><p><strong>npm install @babel&#x2F;cli @babel&#x2F;core -D</strong></p><p>使用 babel 来处理我们的源代码：</p><p>src：是源文件的目录；</p><p>–out-dir：指定要输出的文件夹 dist；</p><p><strong>npx babel src –out-dir dist</strong></p><h3 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h3><p>比如我们需要转换箭头函数，那么我们就可以使用<strong>箭头函数转换相关的插件</strong></p><p><strong>npm install @babel&#x2F;plugin-transform-arrow-functions -D</strong></p><p><strong>npx babel src –out-dir dist --plugins&#x3D;@babel&#x2F;plugin-transform-arrow-functions</strong></p><p>查看转换后的结果：我们会发现 const 并没有转成 var</p><p>这是因为 plugin-transform-arrow-functions，并没有提供这样的功能；</p><p>我们需要使用 plugin-transform-block-scoping 来完成这样的功能；</p><p><strong>npm install @babel&#x2F;plugin-transform-block-scoping -D</strong></p><p><strong>npx babel src –out-dir dist --plugins&#x3D;@babel&#x2F;plugin-transform-block-scoping,@babel&#x2F;plugin-transform-arrow-functions</strong></p><h3 id="Babe-的预设-preset"><a href="#Babe-的预设-preset" class="headerlink" title="Babe 的预设 preset"></a>Babe 的预设 preset</h3><p>但是如果要转换的内容过多，一个个设置是比较麻烦的，我们可以使用预设（preset）：</p><p>后面我们再具体来讲预设代表的含义；</p><p>安装@babel&#x2F;preset-env 预设：</p><p><strong>npm install @babel&#x2F;preset-env -D</strong></p><p>执行如下命令：</p><p><strong>npx babel src –out-dir dist --presets&#x3D;@babel&#x2F;preset-env</strong></p><h3 id="Babel-的底层原理"><a href="#Babel-的底层原理" class="headerlink" title="Babel 的底层原理"></a>Babel 的底层原理</h3><p>babel 是如何做到将我们的一段代码（ES6、TypeScript、React）转成另外一段代码（ES5）的呢？</p><p>从一种源代码（原生语言）转换成另一种源代码（目标语言），这是什么的工作呢？</p><p>就是<strong>编译器</strong>，事实上我们可以将 babel 看成就是一个编译器。</p><p>Babel 编译器的作用就是将我们的源代码，转换成浏览器可以直接识别的另外一段源代码；</p><h3 id="Babel-也拥有编译器的工作流程："><a href="#Babel-也拥有编译器的工作流程：" class="headerlink" title="Babel 也拥有编译器的工作流程："></a>Babel 也拥有编译器的工作流程：</h3><ul><li>解析阶段（Parsing)</li><li>转换阶段（Transformation）</li><li>生成阶段（Code Generation）</li></ul><blockquote><p>参考：<a href="https://github.com/jamiebuilds/the-super-tiny-compiler">https://github.com/jamiebuilds/the-super-tiny-compiler</a></p></blockquote><h3 id="Babel-编译器执行原理"><a href="#Babel-编译器执行原理" class="headerlink" title="Babel 编译器执行原理"></a>Babel 编译器执行原理</h3><p><img src="/img/md/webpack13.png"></p><p>当然，这只是一个简化版的编译器工具流程，在每个阶段又会有自己具体的工作</p><p><img src="/img/md/webpack14.png"></p><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><p>在实际开发中，我们通常会在构建工具中通过配置 babel 来对其进行使用的，比如在 webpack 中。</p><p>那么我们就需要去安装相关的依赖：</p><p>如果之前已经安装了@babel&#x2F;core，那么这里不需要再次安装；</p><p><strong>npm install babel-loader @babel&#x2F;core</strong></p><p>我们可以设置一个规则，在加载 js 文件时，使用我们的 babel</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/.js$/</span>,</span><br><span class="line">    <span class="attr">use</span>: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="comment">// 指定使用的插件</span></span><br><span class="line">      <span class="comment">// plugins: [</span></span><br><span class="line">      <span class="comment">//   &quot;@babel/plugin-transform-arrow-functions&quot;,</span></span><br><span class="line">      <span class="comment">//   &quot;@babel/plugin-transform-block-scoping&quot;</span></span><br><span class="line">      <span class="comment">// ]</span></span><br><span class="line">      <span class="comment">// 指定预设环境</span></span><br><span class="line">      <span class="comment">// presets: [</span></span><br><span class="line">      <span class="comment">//   [&quot;@babel/preset-env&quot;]</span></span><br><span class="line">      <span class="comment">// ]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-x2F-preset-env"><a href="#babel-x2F-preset-env" class="headerlink" title="babel&#x2F;preset-env"></a>babel&#x2F;preset-env</h2><p>如果我们一个个去安装使用插件，那么需要手动来管理大量的 babel 插件，我们可以直接给 webpack 提供一个 preset，webpack 会根据我们的预设来加载对应的插件列表，并且将其传递给 babel。</p><p>比如常见的预设有三个：</p><ul><li>env</li><li>react</li><li>TypeScript</li></ul><p>安装 preset-env：</p><p><strong>npm install @babel&#x2F;preset-env</strong></p><p>配置文件修改看上面</p><h2 id="babel-配置文件"><a href="#babel-配置文件" class="headerlink" title="babel 配置文件"></a>babel 配置文件</h2><p>像之前一样，我们可以将 babel 的配置信息放到一个独立的文件中，babel 给我们提供了两种配置文件的编写：</p><p>babel.config.json（或者.js，.cjs，.mjs）文件；</p><p>.babelrc.json（或者.babelrc，.js，.cjs，.mjs）文件；</p><p>它们两个有什么区别呢？目前很多的项目都采用了多包管理的方式（babel 本身、element-plus、umi 等）；</p><p>.babelrc.json：早期使用较多的配置方式，但是对于配置 Monorepos 项目是比较麻烦的；</p><p>babel.config.js（babel7）：可以直接作用于 Monorepos 项目的子包，更加推荐；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="corejs"><a href="#corejs" class="headerlink" title="corejs"></a>corejs</h2><p><strong>js 兼容性处理：babel-loader @babel&#x2F;core</strong></p><ul><li>基本 js 兼容性处理 –&gt; @babel&#x2F;preset-env<ul><li>问题：只能转换基本语法，如 promise 高级语法不能转换</li></ul></li><li>全部 js 兼容性处理 –&gt; @babel&#x2F;polyfill</li><li>问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</li><li>需要做兼容性处理的就做：按需加载 –&gt; core-js</li></ul><p>配置文件修改</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 按需加载</span></span><br><span class="line">          <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">          <span class="comment">// 指定core-js版本</span></span><br><span class="line">          <span class="attr">corejs</span>: &#123;</span><br><span class="line">            <span class="attr">version</span>: <span class="number">3</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">          <span class="attr">targets</span>: &#123;</span><br><span class="line">            <span class="attr">chrome</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            <span class="attr">firefox</span>: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            <span class="attr">ie</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">            <span class="attr">safari</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">            <span class="attr">edge</span>: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>我们希望通过 eslint 对 js 语法进行检查 目的为了统一编码规范</p><p>1、官网查找 eslint-loader 发现过期了 官网推荐使用 eslint-webpack-plugin<br>2、找到 eslint-webpack-plugin 包 提示需要安装 eslint 包<br>3、安装完以后 webpack 执行命令报错 src 路径下缺少.eslintrc.js 文件(自定义校验规则文件)<br>4、在 src 下新增**.eslintrc.js**文件 自定义编码规则 webpack 执行检查是否生效</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">2015</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 缩进</span></span><br><span class="line">    <span class="attr">indent</span>: [</span><br><span class="line">      <span class="string">&quot;error&quot;</span>,</span><br><span class="line">      <span class="number">4</span>, <span class="comment">//我的是编辑器自动格式化，不是使用tabs，而是四个空格</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;linebreak-style&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;windows&quot;</span>], <span class="comment">// 引号</span></span><br><span class="line">    <span class="attr">quotes</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>], <span class="comment">// 分号结尾</span></span><br><span class="line">    <span class="attr">semi</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;always&quot;</span>],</span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 允许声明未使用变量</span></span><br><span class="line">        <span class="attr">vars</span>: <span class="string">&quot;local&quot;</span>, <span class="comment">// 参数不检查</span></span><br><span class="line">        <span class="attr">args</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ], <span class="comment">// 最大空行100</span></span><br><span class="line">    <span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">0</span>, &#123; <span class="attr">max</span>: <span class="number">100</span> &#125;],</span><br><span class="line">    <span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">0</span>], <span class="comment">//不能使用console</span></span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: <span class="string">&quot;off&quot;</span>, <span class="comment">//未定义变量不能使用</span></span><br><span class="line">    <span class="string">&quot;no-undef&quot;</span>: <span class="number">0</span>, <span class="comment">//一行结束后面不要有空格</span></span><br><span class="line">    <span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>, <span class="comment">//强制驼峰法命名</span></span><br><span class="line">    <span class="attr">camelcase</span>: <span class="number">2</span>, <span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line">    <span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>], <span class="comment">//this别名</span></span><br><span class="line">    <span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5、查找 eslint-config-airbnb-base 包 提示如果要支持 es6 以上的语法需要安装 eslint-plugin-import 和 eslint<br>6、安装完成后 配置 package.json 文件 继承 airbnb-base 校验规则<br>7、执行 webpack 检查校验规则是否生效</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">语法检查： eslint-loader  eslint</span><br><span class="line">注意：只检查自己写的源代码，第三方的库是不用检查的</span><br><span class="line">设置检查规则：</span><br><span class="line">package.<span class="property">json</span>中eslintConfig中设置~</span><br><span class="line">  <span class="string">&quot;eslintConfig&quot;</span>: &#123;</span><br><span class="line">     <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;airbnb-base&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-<span class="keyword">import</span> eslint</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="title function_">newESLintPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h2><p>为什么要搭建？</p><p>目前我们开发的代码，为了运行需要有两个操作：</p><p>操作一：npm run build，编译相关的代码；</p><p>操作二：通过 live server 或者直接通过浏览器，打开 index.html 代码，查看效果；</p><p>这个过程经常操作会影响我们的开发效率，我们希望可以做到，当文件发生变化时，可以自动的完成 编译 和 展示；</p><p>为了完成自动编译，webpack 提供了几种可选的方式：</p><p>1、webpack watch mode；<br>2、webpack-dev-server（常用）；<br>3、webpack-dev-middleware；</p><h3 id="Webpack-watch"><a href="#Webpack-watch" class="headerlink" title="Webpack watch"></a>Webpack watch</h3><p>webpack 给我们提供了 watch 模式：</p><p>在该模式下，webpack 依赖图中的所有文件，只要有一个发生了更新，那么代码将被重新编译；</p><p>我们不需要手动去运行 npm run build 指令了；</p><p>如何开启 watch 呢？两种方式：</p><ul><li>方式一：在导出的配置中，添加 watch: true；</li><li>方式二：在启动 webpack 的命令中，添加 –watch 的标识；</li></ul><p>这里我们选择方式二，在 package.json 的 scripts 中添加一个 watch 的脚本：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;npx webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;watch&quot;</span>: <span class="string">&quot;webpack --watch&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>上面的方式可以监听到文件的变化，但是事实上它本身是没有自动刷新浏览器的功能的：</p><p>当然，目前我们可以在 VSCode 中使用 live-server 来完成这样的功能；</p><p>但是，我们希望在不使用 live-server 的情况下，可以具备 live reloading（实时重新加载）的功能；</p><p>安装 webpack-dev-server</p><p><strong>npm install webpack-dev-server -D</strong></p><p>修改配置文件，告知 dev server，从什么位置查找文件：</p><p>contentBase 已经从 webpack5 中移除 使用 static 取代</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 主要是指定静态资源的根目录的 下面这种方式已废弃</span></span><br><span class="line">    <span class="comment">// contentBase: &#x27;./public&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// webpack5最新的方式</span></span><br><span class="line">    <span class="attr">static</span>: &#123;</span><br><span class="line">       <span class="attr">directory</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>),</span><br><span class="line">     &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>webpack-dev-server 在编译之后不会写入到任何输出文件。而是将 bundle 文件保留在内存中：事实上 webpack-dev-server 使用了一个库叫 memfs（memory-fs webpack 自己写的）</p><h2 id="认识模块热替换（HMR）"><a href="#认识模块热替换（HMR）" class="headerlink" title="认识模块热替换（HMR）"></a>认识模块热替换（HMR）</h2><p>什么是 HMR 呢？</p><p>HMR 的全称是 Hot Module Replacement，翻译为模块热替换；</p><p>模块热替换是指在 应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个页面；</p><p>HMR 通过如下几种方式，来提高开发的速度：</p><p>不重新加载整个页面，这样可以保留某些应用程序的状态不丢失；</p><p>只更新需要变化的内容，节省开发的时间；</p><p>修改了 css、js 源代码，会立即在浏览器更新，相当于直接在浏览器的 devtools 中直接修改样式；</p><p>如何使用 HMR 呢？</p><p>默认情况下，webpack-dev-server 已经支持 HMR，我们只需要开启即可；</p><p>在不开启 HMR 的情况下，当我们修改了源代码之后，整个页面会自动刷新，使用的是 live reloading</p><h3 id="开启-HMR"><a href="#开启-HMR" class="headerlink" title="开启 HMR"></a>开启 HMR</h3><p>修改配置文件:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="attr">static</span>: &#123;</span><br><span class="line">       <span class="attr">directory</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>),</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器控制台查看效果</p><p><img src="/img/md/webpack15.png"></p><p>但是你会发现，当我们修改了某一个模块的代码时，依然是刷新的整个页面：</p><p>这是因为我们需要去指定哪些模块发生更新时，进行 HMR；</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./a.js&quot;</span>;</span><br><span class="line"><span class="comment">// 指定哪些模块发生更新时进行HMR</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="comment">// accept: 认可 同意</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./a.js&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a.js已经更新啦~~~~~~&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="框架的-HMR"><a href="#框架的-HMR" class="headerlink" title="框架的 HMR"></a>框架的 HMR</h2><p>有一个问题：在开发其他项目时，我们是否需要经常手动去写入 module.hot.accpet 相关的 API 呢？</p><p>比如开发 Vue、React 项目，我们修改了组件，希望进行热更新，这个时候应该如何去操作呢？</p><p>事实上社区已经针对这些有很成熟的解决方案了：</p><p>比如 vue 开发中，我们使用 vue-loader，此 loader 支持 vue 组件的 HMR，提供开箱即用的体验；</p><p>比如 react 开发中，有 React Hot Loader，实时调整 react 组件（目前 React 官方已经弃用了，改成使用 react- refresh）；</p><h2 id="HRM-原理"><a href="#HRM-原理" class="headerlink" title="HRM 原理"></a>HRM 原理</h2><p>那么 HMR 的原理是什么呢？如何可以做到只更新一个模块中的内容呢？</p><p>webpack-dev-server 会创建两个服务：提供静态资源的服务（express）和 Socket 服务（net.Socket）；</p><p>express server 负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析）；</p><p>HMR Socket Server，是一个 socket 的长连接：</p><p>长连接有一个最好的好处是建立连接后双方可以通信（服务器可以直接发送文件到客户端）；</p><p>当服务器监听到对应的模块发生变化时，会生成两个文件.json（manifest 文件）和.js 文件（update chunk）；</p><p>通过长连接，可以直接将这两个文件主动发送给客户端（浏览器）；</p><p>浏览器拿到两个新的文件后，通过 HMR runtime 机制，加载这两个文件，并且针对修改的模块进行更新；</p><p><img src="/img/md/webpack16.png"></p><h2 id="hotOnly、host-配置"><a href="#hotOnly、host-配置" class="headerlink" title="hotOnly、host 配置"></a>hotOnly、host 配置</h2><p>host 设置主机地址：</p><p>默认值是 localhost；</p><p>如果希望其他地方也可以访问，可以设置为 0.0.0.0；</p><p>localhost 和 0.0.0.0 的区别：</p><p>localhost：本质上是一个域名，通常情况下会被解析成 127.0.0.1;</p><p>127.0.0.1：回环地址(Loop Back Address)，表达的意思其实是我们主机自己发出去的包，直接被自己接收;</p><p>正常的数据库包发送过程 应用层 - 传输层 - 网络层 - 数据链路层 - 物理层 ;</p><p>而回环地址，是在网络层直接就被获取到了，是不会经常数据链路层和物理层的;</p><p>比如我们监听 127.0.0.1 时，在同一个网段下的主机中，通过 ip 地址是不能访问的;</p><p>0.0.0.0：监听 IPV4 上所有的地址，再根据端口找到不同的应用程序;</p><p>比如我们监听 0.0.0.0 时，在同一个网段下的主机中，通过 ip 地址是可以访问的;</p><p><strong>port、open、compress</strong></p><p>port 设置监听的端口，默认情况下是 8080</p><p>open 是否打开浏览器：</p><p>默认值是 false，设置为 true 会打开浏览器；</p><p>也可以设置为类似于 Google Chrome 等值；</p><p>compress 是否为静态文件开启 gzip compression：</p><p>默认值是 false，可以设置为 true；</p><p><img src="/img/md/webpack17.png"></p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>roxy 是我们开发中非常常用的一个配置选项，它的目的设置代理来解决跨域访问的问题：</p><p>比如我们的一个 api 请求是 <a href="http://localhost:8888，">http://localhost:8888，</a> 但是本地启动服务器的域名是 <a href="http://localhost:8000，">http://localhost:8000，</a> 这个时候发送网络请求就会出现跨域的问题；</p><p>那么我们可以将请求先发送到一个代理服务器，代理服务器和 API 服务器没有跨域的问题，就可以解决我们的跨</p><p>域问题了；</p><p>我们可以进行如下的设置：</p><ul><li>target：表示的是代理到的目标地址，比如 &#x2F;api-hy&#x2F;moment 会被代理到 <a href="http://localhost:8888/api-hy/moment%EF%BC%9B">http://localhost:8888/api-hy/moment；</a></li><li>pathRewrite：默认情况下，我们的 &#x2F;api-hy 也会被写入到 URL 中，如果希望删除，可以使用 pathRewrite；</li><li>secure：默认情况下不接收转发到 https 的服务器上，如果希望支持，可以设置为 false；</li><li>changeOrigin：它表示是否更新代理后请求的 headers 中 host 地址；</li></ul><h2 id="changeOrigin"><a href="#changeOrigin" class="headerlink" title="changeOrigin"></a>changeOrigin</h2><p>这个 changeOrigin 官方说的非常模糊，通过查看源码我发现其实是要修改代理请求中的 headers 中的 host 属性：</p><p>因为我们真实的请求，其实是需要通过 <a href="http://localhost:8888/">http://localhost:8888</a> 来请求的；</p><p>但是因为使用了代码，默认情况下它的值时 <a href="http://localhost:8000/">http://localhost:8000</a> ；</p><p>如果我们需要修改，那么可以将 changeOrigin 设置为 true 即可；</p><p><img src="/img/md/webpack18.png"></p><h2 id="historyApiFallback"><a href="#historyApiFallback" class="headerlink" title="historyApiFallback"></a>historyApiFallback</h2><p>historyApiFallback 是开发中一个非常常见的属性，它主要的作用是解决 SPA 页面在路由跳转之后，进行页面刷新 时，返回 404 的错误。</p><p>boolean 值：默认是 false</p><p>如果设置为 true，那么在刷新时，返回 404 错误时，会自动返回 index.html 的内容；</p><p>object 类型的值，可以配置 rewrites 属性：</p><p>可以配置 from 来匹配路径，决定要跳转到哪一个页面；</p><p>事实上 devServer 中实现 historyApiFallback 功能是通过 connect-history-api-fallback 库的：</p><p>可以查看 connect-history-api-fallback 文档</p><h2 id="resolve-模块解析"><a href="#resolve-模块解析" class="headerlink" title="resolve 模块解析"></a>resolve 模块解析</h2><p>resolve 用于设置模块如何被解析：</p><p>在开发中我们会有各种各样的模块依赖，这些模块可能来自于自己编写的代码，也可能来自第三方库；</p><p>resolve 可以帮助 webpack 从每个 require&#x2F;import 语句中，找到需要引入到合适的模块代码；</p><p>webpack 使用 enhanced-resolve 来解析文件路径；</p><h3 id="webpack-能解析三种文件路径："><a href="#webpack-能解析三种文件路径：" class="headerlink" title="webpack 能解析三种文件路径："></a>webpack 能解析三种文件路径：</h3><ul><li>绝对路径<ul><li>由于已经获得文件的绝对路径，因此不需要再做进一步解析。</li></ul></li><li>相对路径<ul><li>在这种情况下，使用 import 或 require 的资源文件所处的目录，被认为是上下文目录；</li><li>在 import&#x2F;require 中给定的相对路径，会拼接此上下文路径，来生成模块的绝对路径；</li></ul></li><li>模块路径<ul><li>在 resolve.modules 中指定的所有目录检索模块；</li><li>默认值是 [‘node_modules’]，所以默认会从 node_modules 中查找文件；</li><li>我们可以通过设置别名的方式来替换初识模块路径，具体后面讲解 alias 的配置；</li></ul></li></ul><h3 id="确实文件还是文件夹"><a href="#确实文件还是文件夹" class="headerlink" title="确实文件还是文件夹"></a>确实文件还是文件夹</h3><p>如果是一个文件：</p><p>如果文件具有扩展名，则直接打包文件；</p><p>否则，将使用 resolve.extensions 选项作为文件扩展名解析；</p><p>如果是一个文件夹：</p><p>会在文件夹中根据 resolve.mainFiles 配置选项中指定的文件顺序查找；</p><p>resolve.mainFiles 的默认值是 [‘index’]；</p><p>再根据 resolve.extensions 来解析扩展名；</p><h2 id="extensions-和-alias-配置"><a href="#extensions-和-alias-配置" class="headerlink" title="extensions 和 alias 配置"></a>extensions 和 alias 配置</h2><p>extensions 是解析到文件时自动添加扩展名：</p><p>默认值是 [‘.wasm’, ‘.mjs’, ‘.js’, ‘.json’]；</p><p>所以如果我们代码中想要添加加载 .vue 或者 jsx 或者 ts 等文件时，我们必须自己写上扩展名；</p><p>另一个非常好用的功能是配置别名 alias：</p><p>特别是当我们项目的目录结构比较深的时候，或者一个文件的路径可能需要 …&#x2F;…&#x2F;…&#x2F;这种路径片段；</p><p>我们可以给某些常见的路径起一个别名；</p><p><img src="/img/md/webpack19.png"></p><h1 id="webpack-生产环境配置"><a href="#webpack-生产环境配置" class="headerlink" title="webpack 生产环境配置"></a>webpack 生产环境配置</h1><h2 id="css-提取"><a href="#css-提取" class="headerlink" title="css 提取"></a>css 提取</h2><p>下载插件 <strong>npm install –save-dev mini-css-extract-plugin</strong></p><p>修改配置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">      <span class="comment">//创建 style标签，将样式放入</span></span><br><span class="line">      <span class="comment">// &#x27;style-loader&#x27;,</span></span><br><span class="line">      <span class="comment">//这个 loader取代 style-loader。作用：提取 js中的 css成单独文件</span></span><br><span class="line">      <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">      <span class="comment">//将 css文件整合到 js文件中</span></span><br><span class="line">      <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">//对输出的 css文件进行重命名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;css/built.css&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="css-兼容"><a href="#css-兼容" class="headerlink" title="css 兼容"></a>css 兼容</h2><p>往上翻 postcss-preset-env</p><h2 id="css-压缩"><a href="#css-压缩" class="headerlink" title="css 压缩"></a>css 压缩</h2><p>下载插件 <strong>npm install –save-dev optimize-css-assets-webpack-plugin</strong></p><p>webpack5 改用 <strong>npm i -D css-minimizer-webpack-plugin</strong></p><p>修改配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizeCssAssetsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;optimize-css-assets-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">OptimizeCssAssetsWebpackPlugin</span>()];</span><br></pre></td></tr></table></figure><h2 id="js-语法检查"><a href="#js-语法检查" class="headerlink" title="js 语法检查"></a>js 语法检查</h2><p>往上翻 eslint</p><h2 id="js-兼容处理"><a href="#js-兼容处理" class="headerlink" title="js 兼容处理"></a>js 兼容处理</h2><p>往上翻 babel</p><h2 id="js-压缩"><a href="#js-压缩" class="headerlink" title="js 压缩"></a>js 压缩</h2><p>生产环境下会自动压缩 js 代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="HTML压缩"><a href="#HTML压缩" class="headerlink" title="HTML压缩"></a>HTML压缩</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">//压缩 html代码</span></span><br><span class="line">    <span class="attr">minify</span>: &#123;</span><br><span class="line">      <span class="comment">//移除空格</span></span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//移除注释</span></span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 移除空元素</span></span><br><span class="line">      <span class="attr">removeEmptyElements</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2021/06/25/Git/Git/"/>
      <url>/2021/06/25/Git/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-历史"><a href="#Git-历史" class="headerlink" title="Git 历史"></a>Git 历史</h1><p>历史使人明智，当我们谈论到某一个伟大的工具的时候，当然是少不了去了解它的历史；只有我们清楚地明白到它是为了解决什么样的问题而产生的，我们才能够更好地去学习了解使用它；</p><h2 id="1、git-是由谁发明的？"><a href="#1、git-是由谁发明的？" class="headerlink" title="1、git 是由谁发明的？"></a>1、git 是由谁发明的？</h2><p>答: git 是由 Linus 发明的，基于 C 语言的；</p><h2 id="2、在当时是为了解决什么样的历史问题？"><a href="#2、在当时是为了解决什么样的历史问题？" class="headerlink" title="2、在当时是为了解决什么样的历史问题？"></a>2、在当时是为了解决什么样的历史问题？</h2><p>答: 谈及这个问题就不得不提起另一个伟大的工具 linux，在 2002 年以前呀，这个工具的维护研发是由世界各地的程序员共同参与的，他们写出来的代码全部都交给 Linus 去合并的 如下图：</p><p>时间节点来到了 2002 年，这时候经过了十多年的发展参与的人是越来越多了，而一个人合并难以避免的就是效率低这也直接引起了维护者们的不满；</p><p>其实在当时已经存在一些版本控制的工具的了，像 cvs，svn 等，但是这些工具都是要收费的，而且使用的还是集中式版本管理方式。这就受到了 Linus 的唾弃；</p><p>后来 Linus 选择了 BitKeeper 分布式版本控制工具作为他们的版本管理工具，这个系统的研发公司也是出于人道博爱的精神给他们免费使用了；</p><p>大家都知道 linux 系统是很牛逼的，所以能参与维护的都不是一般的攻城狮呀，有一天团队里面的一个人就想着破解 BitKeeper 的协议呀，当时也是被它的研发公司发现了，他们就骂骂咧咧地收回了给他们的使用权；之后就是 Linus 被迫自己花了半个月时间用 C 写了 git 这个伟大的分布式版本控制工具了；</p><p><img src="/img/md/git1.png"></p><p><font color='#66b1ff' size='3'><strong>所以 Git 的产生就是为了解决团队开发效率问题以及开发版本的管理的</strong></font></p><h2 id="3、分布式和集中式有什么区别？"><a href="#3、分布式和集中式有什么区别？" class="headerlink" title="3、分布式和集中式有什么区别？"></a>3、分布式和集中式有什么区别？</h2><blockquote><p>目前市场上有两种版本控制：集中式和分布式</p></blockquote><h3 id="集中式："><a href="#集中式：" class="headerlink" title="集中式："></a>集中式：</h3><p><font color='#fb5758' size='3'><strong>拥有一台中央处理服务器，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，改完再推回去；所以集中式版本控制系统是必须联网才能工作。</strong></font></p><p>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什 么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作</p><p>并不是说服务器故障了就没有办法写代码了，只是在服务器故障的情况下，编写的 代码是没有办法得到保障的。试想 svn 中央服务器挂机一天。你还拼命写了一天代码，其中 12 点之前的代码都是高质量可靠的，而且有很多闪光点。而 12 点之后的代码由于你想尝试一个比较大胆的想法，将代码改的面目全非了。这样下来你 12 点之前做的工作也都白费了，有记录的版本只能是 svn 服务器挂掉时保存的版本！</p><p>要是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，而被客户端偶然提取出来的保存在本地的某些快照数据，就成了恢复数据的希望。但这样的话依然是个问题，你不能保证所有的数据都已经有人事先完整提取出来过。 只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</p><p><img src="/img/md/git2.png"></p><h3 id="分布式："><a href="#分布式：" class="headerlink" title="分布式："></a>分布式：</h3><p><font color='#fb5758' size='3'><strong>去中心化，没有中央处理服务器，每个人的电脑都是完整的一个版本库，每个电脑都是独立连接的；因为版本都是在自己的电脑上，工作的时候就不需要联网了。</strong></font></p><p>客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份</p><p><img src="/img/md/git3.png"></p><p>更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中分别和不同工作小组的人相互协作。 分布式的版本控制系统在管理项目时 存放的不是项目版本与版本之间 的差异.它存的是索引 （所需磁盘空间很少，所以每个客户端都可以放下整个项目的历史记录）</p><p>分布式的版本控制系统出现之后，解决了集中式版本控制系统的缺陷：</p><ol><li>断网的情况下也可以进行开发 （因为版本控制是在本地进行的）</li><li>使用 github 进行团队协作，哪怕 github 挂了，每个客户端保存的也都是整个完整的项目(包含历史记录，更加安全）</li></ol><h1 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h1><p>Git 是目前世界上最先进的分布式版本控制系统，是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h1 id="Git-特点"><a href="#Git-特点" class="headerlink" title="Git 特点"></a>Git 特点</h1><ul><li>Git 易于学习，占地面积小，性能极快。</li><li>它具有廉价的本地库，方便的暂存区域和多个工作，流分支等特性。</li><li>适合分布式开发，强调个体；</li><li>任意两个开发者之间可以很容易的解决冲突；</li><li>离线工作。</li></ul><p>缺点：</p><ul><li>代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息；</li><li>权限控制不友好；如果需要对开发者限制各种权限的建议使用 SVN。</li></ul><h1 id="何为版本控制"><a href="#何为版本控制" class="headerlink" title="何为版本控制"></a>何为版本控制</h1><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p><font color='#fb5758' size='3'><strong>简单说就是用于管理多人协同开发项目的技术。</strong></font></p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p><img src="/img/md/git4.png"></p><h1 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h1><h2 id="1、仓库（Repository）"><a href="#1、仓库（Repository）" class="headerlink" title="1、仓库（Repository）"></a>1、仓库（Repository）</h2><p>受版本控制的所有文件修订历史的共享数据库</p><h2 id="2、工作空间（Workspace"><a href="#2、工作空间（Workspace" class="headerlink" title="2、工作空间（Workspace)"></a>2、工作空间（Workspace)</h2><p>本地硬盘或 Unix 用户帐户上编辑的文件副本</p><h2 id="3、工作树-x2F-区（Working-tree）"><a href="#3、工作树-x2F-区（Working-tree）" class="headerlink" title="3、工作树&#x2F;区（Working tree）"></a>3、工作树&#x2F;区（Working tree）</h2><p>工作区中包含了仓库的工作文件。您可以修改的内容和提交更改作为新的提交到仓库。</p><h2 id="4、暂存区（Staging-area）"><a href="#4、暂存区（Staging-area）" class="headerlink" title="4、暂存区（Staging area）"></a>4、暂存区（Staging area）</h2><p>暂存区是工作区用来提交更改（commit）前可以暂存工作区的变化。</p><p><img src="/img/md/git5.png"></p><h2 id="5、索引（Index）"><a href="#5、索引（Index）" class="headerlink" title="5、索引（Index）"></a>5、索引（Index）</h2><p>索引是暂存区的另一种术语。</p><h2 id="6、签入（Checkin）"><a href="#6、签入（Checkin）" class="headerlink" title="6、签入（Checkin）"></a>6、签入（Checkin）</h2><p>将新版本复制回仓库</p><h2 id="7、签出（Checkout）"><a href="#7、签出（Checkout）" class="headerlink" title="7、签出（Checkout）"></a>7、签出（Checkout）</h2><p>从仓库中将文件的最新修订版本复制到工作空间</p><h2 id="8、提交（Commit）"><a href="#8、提交（Commit）" class="headerlink" title="8、提交（Commit）"></a>8、提交（Commit）</h2><p>对各自文件的工作副本做了更改，并将这些更改提交到仓库</p><h2 id="9、冲突（Conflict）"><a href="#9、冲突（Conflict）" class="headerlink" title="9、冲突（Conflict）"></a>9、冲突（Conflict）</h2><p>多人对同一文件的工作副本进行更改，并将这些更改提交到仓库</p><h2 id="10、合并（Merge）"><a href="#10、合并（Merge）" class="headerlink" title="10、合并（Merge）"></a>10、合并（Merge）</h2><p>将某分支上的更改联接到此主干或同为主干的另一个分支</p><h2 id="11、分支（Branch）"><a href="#11、分支（Branch）" class="headerlink" title="11、分支（Branch）"></a>11、分支（Branch）</h2><p>从主线上分离开的副本，默认分支叫 master</p><h2 id="12、锁（Lock）"><a href="#12、锁（Lock）" class="headerlink" title="12、锁（Lock）"></a>12、锁（Lock）</h2><p>获得修改文件的专有权限。</p><h2 id="13、头（HEAD）"><a href="#13、头（HEAD）" class="headerlink" title="13、头（HEAD）"></a>13、头（HEAD）</h2><p>头是一个象征性的参考，最常用以指向当前选择的分支。</p><h2 id="14、修订（Revision）"><a href="#14、修订（Revision）" class="headerlink" title="14、修订（Revision）"></a>14、修订（Revision）</h2><p>表示代码的一个版本状态。Git 通过用 SHA1 hash 算法表示的 ID 来标识不同的版本。</p><h2 id="15、标记（Tags）"><a href="#15、标记（Tags）" class="headerlink" title="15、标记（Tags）"></a>15、标记（Tags）</h2><p>标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态。</p><h1 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h1><p><font size='4' color='#0593d3'>官网： <a href="https://git-scm.com/">https://git-scm.com/</a></font></p><p><font size='4' color='#0593d3'>源码： <a href="https://github.com/git/git/">https://github.com/git/git/</a></font></p><h2 id="搭建-Git-工作环境"><a href="#搭建-Git-工作环境" class="headerlink" title="搭建 Git 工作环境"></a>搭建 Git 工作环境</h2><p>打开 <a href="https://git-scm.com/">Git 官网</a>，下载 git 对应操作系统的版本。</p><p><img src="/img/md/git6.png"></p><p><font color='#fb5758'><strong>选择版本</strong></font></p><p><img src="/img/md/git7.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="/img/md/git8.png"></p><p><font color='#fb5758'><strong>选择 Git 安装位置，要求是非中文并且没有空格的目录，然后下一步。</strong></font></p><p><img src="/img/md/git9.png"></p><p><font color='#fb5758'><strong>Git 选项配置，推荐默认设置，然后下一步。</strong></font></p><p><img src="/img/md/git10.png"></p><p><font color='#fb5758'><strong>Git 安装目录名，不用修改，直接点击下一步。</strong></font></p><p><img src="/img/md/git11.png"></p><p><font color='#fb5758'><strong>Git 的默认编辑器，建议使用默认的 Vim 编辑器，然后点击下一步。</strong></font></p><p><img src="/img/md/git12.png"></p><p><font color='#fb5758'><strong>默认分支名设置，选择让 Git 决定，分支名默认为 master，下一步。</strong></font></p><p><img src="/img/md/git13.png"></p><p><font color='#fb5758'><strong>修改 Git 的环境变量，选第一个，不修改环境变量，只在 Git Bash 里使用 Git。</strong></font></p><p><img src="/img/md/git14.png"></p><p><font color='#fb5758'><strong>选择后台客户端连接协议，选默认值 OpenSSL，然后下一步。</strong></font></p><p><img src="/img/md/git15.png"></p><p><font color='#fb5758'><strong>配置 Git 文件的行末换行符，Windows 使用 CRLF，Linux 使用 LF，选择第一个自动 转换，然后继续下一步。</strong></font></p><p><img src="/img/md/git16.png"></p><p><font color='#fb5758'><strong>选择 Git 终端类型，选择默认的 Git Bash 终端，然后继续下一步。</strong></font></p><p><img src="/img/md/git17.png"></p><p><font color='#fb5758'><strong>选择 Git pull 合并的模式，选择默认，然后下一步。</strong></font></p><p><img src="/img/md/git18.png"></p><p><font color='#fb5758'><strong>选择 Git 的凭据管理器，选择默认的跨平台的凭据管理器，然后下一步。</strong></font></p><p><img src="/img/md/git19.png"></p><p><font color='#fb5758'><strong>其他配置，选择默认设置，然后下一步。</strong></font></p><p><img src="/img/md/git20.png"></p><p><font color='#fb5758'><strong>实验室功能，技术还不成熟，有已知的 bug，不要勾选，然后点击右下角的 Install 按钮，开始安装 Git。</strong></font></p><p><img src="/img/md/git21.png"></p><p><font color='#fb5758'><strong>点击 Finsh 按钮，Git 安装成功！</strong></font></p><p><img src="/img/md/git22.png"></p><h2 id="启动-Git"><a href="#启动-Git" class="headerlink" title="启动 Git"></a>启动 Git</h2><p>安装完毕右键桌面即可看到 Git 图标，或者点击开始菜单栏</p><p><img src="/img/md/git23.png"></p><p><font color='#fb5758'><strong>Git Bash</strong></font>： Unix 与 Linux 风格的命令行，使用最多，推荐最多</p><p><img src="/img/md/git24.png"></p><p>与 DOS 风格的命令有些区别，不习惯可以选择 Git CMD</p><p><font color='#fb5758'><strong>Git CMD</strong></font>： Windows 风格的命令行</p><p><img src="/img/md/git25.png"></p><p><font color='#fb5758'><strong>Git GUI</strong></font>：图形界面的 Git，不建议初学者使用，尽量先熟悉常用命令</p><p><img src="/img/md/git26.png"></p><p>点击 Create New Repository 可以直接创建一个新的仓库。</p><h2 id="Bash-基本命令"><a href="#Bash-基本命令" class="headerlink" title="Bash 基本命令"></a>Bash 基本命令</h2><ul><li>1、cd : 改变目录。</li><li>2、cd . . 回退到上一个目录，直接 cd 进入默认目录</li><li>3、pwd : 显示当前所在的目录路径。</li><li>4、ls(ll): 都是列出当前目录中的所有文件，只不过 ll(两个 ll)列出的内容更为详细。</li><li>5、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件。</li><li>6、rm: 删除一个文件, rm index.js 就会把 index.js 文件删除。</li><li>7、mkdir: 新建一个目录,就是新建一个文件夹。</li><li>8、rm -r : 删除一个文件夹, rm -r src 删除 src 目录， 好像不能用通配符。</li><li>9、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</li><li>10、reset 重新初始化终端&#x2F;清屏。</li><li>11、clear 清屏。</li><li>12、history 查看命令历史。</li><li>13、help 帮助。</li><li>14、exit 退出。</li><li>15、#表示注释</li></ul><h2 id="Git-常见命令"><a href="#Git-常见命令" class="headerlink" title="Git 常见命令"></a>Git 常见命令</h2><p>为了方便查找，做了如下细化和分类</p><p>专用名词：</p><ul><li><font color='#FF0000'>master</font>: 默认开发分支</li><li><font color='#FF0000'>origin</font>: 默认远程版本库</li><li><font color='#FF0000'>Index &#x2F; Stage</font>：暂存区</li><li><font color='#FF0000'>Workspace</font>：工作区</li><li><font color='#FF0000'>Repository</font>：仓库区（或本地仓库）</li><li><font color='#FF0000'>Remote</font>：远程仓库</li></ul><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><ul><li><font color='#FF0000'>git init</font>: 在当前目录新建一个代码仓库</li><li><font color='#FF0000'>git init [project-name]</font>: 新建一个目录，把它初始化为 git 代码仓库</li><li><font color='#FF0000'>git clone [url]</font>: 下载一个项目和它整个代码的历史，即从远程把仓库复制一份到本地，克隆后会创建一个新的本地仓库</li></ul><h3 id="配置类命令"><a href="#配置类命令" class="headerlink" title="配置类命令"></a>配置类命令</h3><ul><li><font color='#FF0000'>git config –list</font>:查看 git 配置</li><li><font color='#FF0000'>git config -e [–global]</font>:编辑 git 配置文件</li><li><font color='#FF0000'>git config [–global] user.name “用户名”</font>:设置[全局]配置用户名</li><li><font color='#FF0000'>git config [–global] user.password “密码”</font>:设置[全局]配置密码</li><li><font color='#FF0000'>git config [–global] user.email”邮箱”</font>:重新全局配置邮箱</li><li><font color='#FF0000'>ssh-keygen</font>:生成 ssh 公钥</li></ul><h3 id="修改类命令"><a href="#修改类命令" class="headerlink" title="修改类命令"></a>修改类命令</h3><ul><li><font color='#FF0000'>git status</font>:查看当前工作区的状态</li><li><font color='#FF0000'>git diff – fileName</font>:命令可以查看工作区和版本库里面最新版本的区别</li><li><font color='#FF0000'>git add [file1] [file2]</font>: 添加文件到暂存区</li><li><font color='#FF0000'>git add dir</font>: 添加文件目录到暂存区</li><li><font color='#FF0000'>git add .</font>: 添加当前目录所有文件到暂存区</li><li><font color='#FF0000'>git add -p</font>: 添加每个变化前都会要求确认，对于同一文件多处变化，可以实现分次提交</li><li><font color='#FF0000'>git rm [file1] [file2]</font>: 删除工作区文件，并把删除放入暂存区</li><li><font color='#FF0000'>git rm –cached [file]</font>: 停止追踪指定文件，但该文件会保留在工作区</li><li><font color='#FF0000'>git mv [file-origname] [file-rename]</font>: 改名文件，并把改名放入暂存区</li></ul><h3 id="提交类命令"><a href="#提交类命令" class="headerlink" title="提交类命令"></a>提交类命令</h3><ul><li><font color='#FF0000'>git commit -m [message]</font>:提交暂存区到本地仓库区</li><li><font color='#FF0000'>git commit [file1] [file2] … -m [message]</font>:提交暂存区的指定文件本地仓库区</li><li><font color='#FF0000'>git commit -a</font>:提交工作区自上次 commit 之后的变化直接到本地仓库区</li><li><font color='#FF0000'>git commit -v</font>:提交时显示所有的 diff 信息</li><li><font color='#FF0000'>git commit –amend -m [message]</font>:使用一次新的 commit，替代上一次提交，如果代码没有变化，就改写上一次 commit 的提交信息</li><li><font color='#FF0000'>git commit –amend [file1] [file2]</font>:重做上一次 commit，并包括指定文件的新变化</li><li><font color='#FF0000'>git commit –amend –only -m ‘xxxxxxx’ </font>: 如果提交信息(commit message)写错了且这次提交(commit)还没有推(push), 可以通过此方法来修改提交信息(commit message)</li><li><font color='#FF0000'>git commit –amend –author “New Authorname <a href="mailto:&#x61;&#x75;&#x74;&#x68;&#x6f;&#x72;&#x65;&#109;&#97;&#105;&#x6c;&#x40;&#x6d;&#x79;&#100;&#111;&#109;&#x61;&#x69;&#x6e;&#x2e;&#x63;&#111;&#x6d;">&#x61;&#x75;&#x74;&#x68;&#x6f;&#x72;&#x65;&#109;&#97;&#105;&#x6c;&#x40;&#x6d;&#x79;&#100;&#111;&#109;&#x61;&#x69;&#x6e;&#x2e;&#x63;&#111;&#x6d;</a>“</font>: 提交(commit)里的用户名和邮箱不对</li></ul><h3 id="分支类命令"><a href="#分支类命令" class="headerlink" title="分支类命令"></a>分支类命令</h3><ul><li><font color='#FF0000'>git branch</font>:查看所有分支，当前分支前面会有一个*表示</li><li><font color='#FF0000'>git branch -r</font>:列出所有远程分支</li><li><font color='#FF0000'>git branch -a</font>:列出所有本地分支和远程分支</li><li><font color='#FF0000'>git branch [branch-name]</font>:新建一个分支，但依然停留在当前分支</li><li><font color='#FF0000'>git branch –track [branch] [remote-branch]</font>:新建一个分支，与远程指定分支建立追踪关系</li><li><font color='#FF0000'>git branch -d [branch]</font>:删除分支</li><li><font color='#FF0000'>git push origin –delete [branch]</font>:删除远程分支</li><li><font color='#FF0000'>git branch -dr [remote&#x2F;branch]</font>:删除远程分支</li><li><font color='#FF0000'>git checkout -b [branch]</font>:创建并切换到新的分支</li><li><font color='#FF0000'>git checkout [branch]</font>:切换到指定分支，并更新工作区</li><li><font color='#FF0000'>git checkout -</font>:切换到上一个分支</li><li><font color='#FF0000'>git branch –set-upstream [branch] [remote-branch]</font>:建立追踪关系，在现有分支与指定远程分支之间</li><li><font color='#FF0000'>git merge [branch]</font>:用来合并指定分支到当前分支，假如要合并 dev 到 master，使用此命令时需要先使用 checkout 命令切换到 master 分支，然后将 dev 分支的修改合并到 master 分支</li><li><font color='#FF0000'>git rebase [branch]</font>:衍合指定分支到当前分支</li><li><font color='#FF0000'>git cherry-pick [commit]</font>:合并部分 commit，不像 merge 是合并全部 commit，选择一个 commit 合并到当前分支</li></ul><h3 id="标签类"><a href="#标签类" class="headerlink" title="标签类"></a>标签类</h3><ul><li><font color='#FF0000'>git tag</font>:列出所有本地标签</li><li><font color='#FF0000'>git tag &lt;标签名&gt;</font>:基于最新提交创建标签</li><li><font color='#FF0000'>git tag -d &lt;标签名&gt;</font>:删除指定标签</li><li><font color='#FF0000'>git push origin :refs&#x2F;tags&#x2F;[tagName]</font>:删除远程标签</li><li><font color='#FF0000'>git show [tag]</font>:查看标签信息</li><li><font color='#FF0000'>git push [remote] [tag]</font>:提交指定 tag</li><li><font color='#FF0000'>git push [remote] –tags</font>:提交所有 tag</li><li><font color='#FF0000'>git checkout -b [branch] [tag]</font>:新建一个分支指向某个 tag</li></ul><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><ul><li>git status:显示有变更的文件</li><li>git log:查看历史的每次提交信息，但是如果回退版本了，那么对应的历史信息就没了，那就使用- git reflog</li><li>git reflog:看到以前的每次执行动作</li><li>git log –stat:显示 commit 历史，以及每次 commit 发生变更的文件</li><li>git log -S [keyword]:根据关键字搜索提交历史</li><li>git log [tag] HEAD –pretty&#x3D;format:%s:显示某个 commit 之后所有变动，每个 commit 占据一行</li><li>git log [tag] HEAD –grep feature:显示某个 commit 之后所有变动，其提交说明必须符合搜索条件</li><li>git log –follow [file]:显示某个文件版本历史，包括文件改名</li><li>git whatchanged [file]:显示某个文件版本历史，包括文件改名</li><li>git log -p [file]:显示指定文件相关的每一次的 diff</li><li>git log -5 –pretty –online:显示过去 5 次提交</li><li>git shortlog -sn:显示所有提交过的用户，按提交次数序排序</li><li>git blame [file]:显示指定文件是什么人在什么时候修改过</li><li>git diff:显示暂存区和工作区差异</li><li>git diff –cache [file]:显示暂存区和上一个文件的差异</li><li>git diff HEAD:显示工作区和当前分支最新 commit 之间差异</li><li>git diff [first-branch] … [second-branch]:显示两次提交之间差异</li><li>git diff –shortstat “@{0 day ago}”:显示今天写了多少行代码</li><li>git show [commit]:显示某次提交元数据和内容变化</li><li>git show –name-only [commit]:显示某次提交发生变化的文件</li><li>git show [commit]:[fileName]:显示某次时某个文件的内容</li></ul><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><ul><li>git fetch [remote]:下载远程仓库所有变动</li><li>git pull [remote] [branch]:获取远程仓库变化，并与本地代码合并</li><li>git remote -v:显示所有远程仓库</li><li>git remote show [remote]:显示某个远程仓库信息</li><li>git remote add [shortname] [url]:增加一个新的远程仓库并命名</li><li>git push [remote] [branch]:上传本地指定分支到远程仓库</li><li>git push [remote] –force:强行推当前分支到远程仓库，即使有冲突</li><li>git push [remote] –all:推送所有分支到远程仓库</li><li>git push <remote> :&lt;branch&#x2F;tag-name&gt;:删除远程分支或标签</li><li>git push –tags:上传所有标签</li></ul><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><ul><li>git reset –hard HEAD:撤销工作目录中所有未提交文件的修改内容</li><li>git reset –hard HEAD^ : 把当前的版本回退到上一个版本，如果退到上上个版本只需把 HEAD^改成 HEAD^^ 以此类推</li><li>git reset –hard HEAD~100 : 回退到前 100 个版本</li><li>git checkout HEAD <file>:撤销指定的未提交文件的修改内容</li><li>git revert <commit>:撤销指定提交</li><li>git log –before&#x3D;”1 days”:退回到之前一天的版本</li><li>git checkout [file]:恢复暂存区指定文件到工作区</li><li>git checkout [commit] [file]:恢复某个 commit 指定文件到暂存区和工作区</li><li>git checkout .:恢复暂存区所有文件到工作区</li><li>git reset [file]:重置暂存区指定文件，与上一次 commit 保持一致，但工作区不变</li><li>git reset –hard:重置暂存区与工作区，与上一次 commit 保持一致</li><li>git reset [commit]:重置当前分支指针为指定 commit，同时重置暂存区，但工作区不变</li><li>git reset –hard [commit]:重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致</li><li>git reset –keep [commit]:重置当前分支的 HEAD 为指定 commit，但是保持暂存区和工作区不变</li><li>git revert [commit]:新建一个 commit，用来撤销指定 commit，后者所有变化都被前者抵消，并且应用到当前分支</li><li>git stash:将未提交的变化移除，稍后移入，保存工作区</li><li>git stash pop :将未提交的变化移入，保存工作区</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>git archive:生成一个可供发布的压缩包</li></ul><h1 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h1><p>使用 <font color='#FF0000'><strong>git config -l</strong></font> 可以查看现在的 git 环境详细配置</p><p>查看不同级别的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看系统config</span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line"># 查看当前用户(global)配置</span><br><span class="line">git config --global --list</span><br><span class="line"></span><br><span class="line"># 查看当前仓库配置信息</span><br><span class="line">git config --local --list</span><br></pre></td></tr></table></figure><h2 id="Git-配置文件分类"><a href="#Git-配置文件分类" class="headerlink" title="Git 配置文件分类"></a>Git 配置文件分类</h2><h3 id="git-配置文件有三个"><a href="#git-配置文件有三个" class="headerlink" title="git 配置文件有三个"></a>git 配置文件有三个</h3><p><font color='#FF0000' size='3'>1、system 系统级</font></p><p>路径位于 (C:\Program Files\Git\etc\gitconfig)：包含了适用于系统所有用户和所有项目的值。</p><p><img src="/img/md/git27.png"></p><p><font color='#FF0000' size='3'>2、global 全局</font></p><p>路径位于(Win：C:\Users\Administrator.gitconfig)：只适用于当前登录用户的配置。</p><p><img src="/img/md/git28.png"></p><p><img src="/img/md/git29.png"></p><p><font color='#FF0000' size='3'>3、local 当前项目</font></p><p>路径位于(git 项目目录中的.git&#x2F;config)：适用于特定 git 项目的配置。</p><p><img src="/img/md/git30.png"></p><p>注意：对于同一配置项，三个配置文件的优先级是 1&lt;2&lt;3。</p><p>这里可以直接编辑配置文件，通过命令设置后也会响应到这里</p><h3 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h3><p>当你安装 Git 后首先要做的事情是设置你的用户名称和 e-mail 地址。这是非常重要的，签名的作用是用来区分不同操作者的身份，每次 Git 提交都会使用该信息，它被永远的嵌入到了你的提交中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;  #名称</span><br><span class="line">git config --global user.email xxx@git.com  #邮箱</span><br></pre></td></tr></table></figure><p>只需要做一次这个设置，而且必须要做，否则无法提交到代码托管中心上，如果你传递了–global 选项，因为 Git 将总是会使用该信息来处理你在系统中所做的一切操作。它将被设置到上述的 global 全局 中。</p><p>如果你希望在一个特定的项目中使用不同的名称或 e-mail 地址，你可以在该项目中运行该命令而不要–global 选项。 总之–global 为全局配置，不加为某个项目的特定配置。</p><h3 id="Git-连接-Gitee-x2F-GitHub"><a href="#Git-连接-Gitee-x2F-GitHub" class="headerlink" title="Git 连接 Gitee &#x2F; GitHub"></a>Git 连接 Gitee &#x2F; GitHub</h3><h4 id="通过-SSH-公钥连接"><a href="#通过-SSH-公钥连接" class="headerlink" title="通过 SSH 公钥连接"></a>通过 SSH 公钥连接</h4><p>（推荐资深用户或经常推送大型文件用户使用）</p><p>Gitee 提供了基于 SSH 协议的 Git 服务，在使用 SSH 协议访问仓库之前，需要先配置好账户&#x2F;仓库的 SSH 公钥。</p><p>SSH 全称(Secure SHell)是一种网络协议，顾名思义就是非常安全的 shell，主要用于计算机间加密传输。<br>使用加密通道读写仓库，无单次上传限制，需先设置 账户 SSH 公钥，完成配对验证。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>注意：这里的 <a href="mailto:&#x78;&#x78;&#120;&#64;&#x78;&#x78;&#120;&#46;&#x63;&#111;&#x6d;">&#x78;&#x78;&#120;&#64;&#x78;&#x78;&#120;&#46;&#x63;&#111;&#x6d;</a> 只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱。<br>现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。</p><p>按照提示完成三次回车，即可生成 ssh key。通过查看 C:\Users\用户名.ssh\id_rsa.pub 文件内容，前者是私钥， 后者是公钥。秘钥不能泄露出去，而公钥要设置在 gitee 相应位置。</p><p><img src="/img/md/git31.png"></p><p><img src="/img/md/git32.png"></p><h4 id="gitee-免密登录"><a href="#gitee-免密登录" class="headerlink" title="gitee 免密登录"></a>gitee 免密登录</h4><p>复制生成后的 ssh key，通过个人主页 「设置」-&gt;「SSH 公钥」 ，添加生成的 public key 添加到仓库中。</p><p><img src="/img/md/git33.png"></p><p>或者单独为仓库设置 ssh key，通过 仓库主页 「管理」-&gt;「部署公钥管理」-&gt; 「公钥管理」</p><p><img src="/img/md/git34.png"></p><h4 id="配置本地仓库连接远程仓库"><a href="#配置本地仓库连接远程仓库" class="headerlink" title="配置本地仓库连接远程仓库"></a>配置本地仓库连接远程仓库</h4><p>git remote add test <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#x65;&#x65;&#x2e;&#99;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#x74;&#x65;&#x65;&#x2e;&#99;&#x6f;&#109;</a>:xx&#x2F;xx.git:会关联<a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#101;&#101;&#46;&#99;&#111;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#101;&#101;&#46;&#99;&#111;&#109;</a>:xx&#x2F;xx.git 所对应的远程仓库。test 是设置的关联名字，可以随便起， 以后通过它向远程仓库提交程序</p><h3 id="通过-https-连接"><a href="#通过-https-连接" class="headerlink" title="通过 https 连接"></a>通过 https 连接</h3><p>（推荐轻量级用户使用）</p><p>通过 https 连接就需要 https 的连接地址，使用加密的网页访问通道读写仓库，使用用户名及密码进行鉴权比如：<a href="https://gitee.com/laoxu/git-test.git">https://gitee.com/laoxu/git-test.git</a><br>此时就不需要 ssh 生成公钥，也不用在 gitee 上配置 ssh 公钥</p><p>git remote add test <a href="https://gitee.com/jingzh7751/git-test.git:%E7%94%A8%E6%9D%A5%E5%92%8C%E8%BF%9C%E7%AB%AF%E4%BB%93%E5%BA%93%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%EF%BC%8C%E5%9C%A8%E6%8B%89%E5%8F%96%E6%88%96%E8%80%85%E6%8E%A8%E9%80%81%E6%97%B6%E5%8F%AA%E7%94%A8%E8%BE%93%E5%85%A5%E8%B4%A6%E5%8F%B7%E6%88%96%E8%80%85%E5%AF%86%E7%A0%81%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86">https://gitee.com/jingzh7751/git-test.git:用来和远端仓库进行关联，在拉取或者推送时只用输入账号或者密码就可以了</a></p><h2 id="更多配置选项"><a href="#更多配置选项" class="headerlink" title="更多配置选项"></a>更多配置选项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global color.ui true   #打开所有的默认终端着色</span><br><span class="line">git config --global alias.ci commit   #别名 ci 是commit的别名</span><br><span class="line">[alias]</span><br><span class="line">co = checkout</span><br><span class="line">ci = commit</span><br><span class="line">st = status</span><br><span class="line">pl = pull</span><br><span class="line">ps = push</span><br><span class="line">dt = difftool</span><br><span class="line">l = log --stat</span><br><span class="line">cp = cherry-pick</span><br><span class="line">ca = commit -a</span><br><span class="line">b = branch</span><br><span class="line"></span><br><span class="line">user.name  #用户名</span><br><span class="line">user.email  #邮箱</span><br><span class="line">core.editor  #文本编辑器</span><br><span class="line">merge.tool  #差异分析工具</span><br><span class="line">core.paper &quot;less -N&quot;  #配置显示方式</span><br><span class="line">color.diff true  #diff颜色配置</span><br><span class="line">alias.co checkout  #设置别名</span><br><span class="line">git config user.name  #获得用户名</span><br><span class="line">git config core.filemode false  #忽略修改权限的文件</span><br></pre></td></tr></table></figure><p>所有 config 命令参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: git config [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line">文件位置</span><br><span class="line">    --global                  #use global config file 使用全局配置文件</span><br><span class="line">    --system                  #use system config file 使用系统配置文件</span><br><span class="line">    --local                   #use repository config file    使用存储库配置文件</span><br><span class="line">    -f, --file &lt;file&gt;         #use given config file    使用给定的配置文件</span><br><span class="line">    --blob &lt;blob-id&gt;          #read config from given blob object    从给定的对象中读取配置</span><br><span class="line"></span><br><span class="line">动作</span><br><span class="line">    --get                     #get value: name [value-regex]    获得值：[值]名[正则表达式]</span><br><span class="line">    --get-all                 #get all values: key [value-regex]    获得所有值：[值]名[正则表达式]</span><br><span class="line">    --get-regexp          #get values for regexp: name-regex [value-regex]    得到的值根据正则</span><br><span class="line">    --get-urlmatch            #get value specific for the URL: section[.var] URL    为URL获取特定的值</span><br><span class="line">    --replace-all             #replace all matching variables: name value [value_regex]    替换所有匹配的变量：名称值[ value_regex ]</span><br><span class="line">    --add                     #add a new variable: name value    添加一个新变量：name值</span><br><span class="line">    --unset                   #remove a variable: name [value-regex]    删除一个变量名[值]：正则表达式</span><br><span class="line">    --unset-all               #remove all matches: name [value-regex]    删除所有匹配的正则表达式：名称[值]</span><br><span class="line">    --rename-section          #rename section: old-name new-name    重命名部分：旧名称 新名称</span><br><span class="line">    --remove-section          #remove a section: name    删除部分：名称</span><br><span class="line">    -l, --list                #list all    列出所有</span><br><span class="line">    -e, --edit            #open an editor    打开一个编辑器</span><br><span class="line">    --get-color               #find the color configured: slot [default]    找到配置的颜色：插槽[默认]</span><br><span class="line">    --get-colorbool           #find the color setting: slot [stdout-is-tty]    发现颜色设置：槽[ stdout是TTY ]</span><br><span class="line"></span><br><span class="line">类型</span><br><span class="line">    --bool                    #value is &quot;true&quot; or &quot;false&quot;    值是“真”或“假”。</span><br><span class="line">    --int                     #value is decimal number    值是十进制数。</span><br><span class="line">    --bool-or-int             #value is --bool or --int    值--布尔或int</span><br><span class="line">    --path                    #value is a path (file or directory name)    值是路径（文件或目录名）</span><br><span class="line"></span><br><span class="line">其它</span><br><span class="line">    -z, --null                #terminate values with NUL byte    终止值与null字节</span><br><span class="line">    --name-only               #show variable names only    只显示变量名</span><br><span class="line">    --includes                #respect include directives on lookup    尊重包括查找指令</span><br><span class="line">    --show-origin             #show origin of config (file, standard input, blob, command line)    显示配置（文件、标准输入、数据块、命令行）的来源</span><br></pre></td></tr></table></figure><h1 id="Git-理论基础"><a href="#Git-理论基础" class="headerlink" title="Git 理论基础"></a>Git 理论基础</h1><h2 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h2><p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository 或 Git Directory)。如果在加上远程的 git 仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="/img/md/git35.png"></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是 git 仓库中 HEAD 指向的版本</p><p><img src="/img/md/git36.png"></p><ul><li>Directory：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。</li><li>WorkSpace：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放 Git 管理信息的目录，初始化仓库的时候自动创建。</li><li>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD 会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复 WorkSpace 中的临时状态。</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git 的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到 git 仓库。</li></ol><p>因此，git 管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img src="/img/md/git37.png"></p><h2 id="图解教程"><a href="#图解教程" class="headerlink" title="图解教程"></a>图解教程</h2><p>个人认为 Git 的原理相比别的版本控制器还是复杂一些的，有一份图解教程比较直观：</p><p><a href="https://www.cnblogs.com/yaozhongxiao/p/3811130.html">图解教程中文版</a></p><p><img src="/img/md/git38.png"></p><h1 id="Git-操作"><a href="#Git-操作" class="headerlink" title="Git 操作"></a>Git 操作</h1><h2 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h2><p>工作目录（WorkSpace)一般就是你希望 Git 帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图 6 个命令：</p><p><img src="/img/md/git39.png"></p><h2 id="获得-GIT-仓库"><a href="#获得-GIT-仓库" class="headerlink" title="获得 GIT 仓库"></a>获得 GIT 仓库</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><h3 id="创建全新仓库"><a href="#创建全新仓库" class="headerlink" title="创建全新仓库"></a>创建全新仓库</h3><p>需要用 GIT 管理的项目的根目录执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>执行完毕后会得到一个.git 隐藏文件夹，如果没显示可以设置</p><p><img src="/img/md/git40.png"></p><p>执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面。</p><p>当然如果使用如下命令，可以把创建目录与仓库一起完成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">git init [project-name]</span><br></pre></td></tr></table></figure><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地，而不是取某一个特定版本，所以用 clone 而不是 checkout，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 克隆一个项目和它的整个代码历史(版本信息)</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure><p>比如我们要从克隆的远程仓库托管在 github 上，如下方式获取地址：</p><p><img src="/img/md/git41.png"></p><h2 id="GIT-文件操作"><a href="#GIT-文件操作" class="headerlink" title="GIT 文件操作"></a>GIT 文件操作</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。GIT 不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用 SHA-1 算法计算文件的校验和。</p><h3 id="文件-4-种状态"><a href="#文件-4-种状态" class="headerlink" title="文件 4 种状态"></a>文件 4 种状态</h3><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制. 通过 git add 状态变为 Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为 Modified. 如果使用 git rm 移出版本库, 则成为 Untracked 文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过 git add 可进入暂存 staged 状态, 使用 git checkout 则丢弃修改过, 返回到 unmodify 状态, 这个 git checkout 即从库中取出文件, 覆盖当前修改</li><li>Staged: 暂存状态. 执行 git commit 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为 Unmodify 状态. 执行 git reset HEAD filename 取消暂存, 文件状态为 Modified</li></ul><p><img src="/img/md/git42.png"></p><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>上面说文件有 4 种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看指定文件状态</span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line">#查看所有文件状态</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="/img/md/git43.png"></p><p>结果：</p><p>foo.htm 文件的状态为 untracked（未跟踪），提示通过 git add 可以暂存</p><p>GIT 在这一点做得很好，在输出每个文件状态的同时还说明了怎么操作，像上图就有怎么暂存、怎么跟踪文件、怎么取消暂存的说明。</p><h2 id="添加文件与目录"><a href="#添加文件与目录" class="headerlink" title="添加文件与目录"></a>添加文件与目录</h2><p><img src="/img/md/git44.png"></p><p>工作区（Working Directory）就是你在电脑里能看到的目录。</p><p>版本库（Repository）工作区有一个隐藏目录.git，这个不算工作区，而是 Git 的版本库。</p><p>Git 的版本库里存了很多东西，其中最重要的就是称为 stage（或者叫 index）的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD。</p><p>将 untracked 状态的文件添加到暂存区，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p><img src="/img/md/git45.png"></p><h2 id="移除文件与目录（撤销-add）"><a href="#移除文件与目录（撤销-add）" class="headerlink" title="移除文件与目录（撤销 add）"></a>移除文件与目录（撤销 add）</h2><p><img src="/img/md/git46.png"></p><p>当执行如下命令时，会直接从暂存区删除文件，工作区则不做出改变</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#直接从暂存区删除文件，工作区则不做出改变</span><br><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/md/git47.png"></p><p>通过重写目录树移除 add 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#如果已经用add 命令把文件加入stage了，就先需要从stage中撤销</span><br><span class="line">git reset HEAD &lt;file&gt;...</span><br></pre></td></tr></table></figure><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>示例：把 f1.txt 文件从暂存区撤回工作区</p><p><img src="/img/md/git48.png"></p><p>移除所有未跟踪文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#移除所有未跟踪文件</span><br><span class="line">#一般会加上参数-df，-d表示包含目录，-f表示强制清除。</span><br><span class="line">git clean [options]</span><br></pre></td></tr></table></figure><p>移除前：</p><p><img src="/img/md/git49.png"></p><p>执行移除：</p><p><img src="/img/md/git50.png"></p><p>移除后：</p><p><img src="/img/md/git51.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#只从stage中删除，保留物理文件</span><br><span class="line">git rm --cached readme.txt</span><br><span class="line"></span><br><span class="line">#不但从stage中删除，同时删除物理文件</span><br><span class="line">git rm readme.txt</span><br><span class="line"></span><br><span class="line">#把a.txt改名为b.txt</span><br><span class="line">git mv a.txt b.txt</span><br></pre></td></tr></table></figure><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>当执行 “git rm –cached ” 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p><p>当执行 “git checkout .” 或者 “git checkout — ” 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p><p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD ” 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改 动。</p><h2 id="查看文件修改后的差异"><a href="#查看文件修改后的差异" class="headerlink" title="查看文件修改后的差异"></a>查看文件修改后的差异</h2><p>git diff 用于显示 WorkSpace 中的文件和暂存区文件的差异</p><p>用”git status”只能查看对哪些文件做了改动，如果要看改动了什么，可以用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看文件修改后的差异</span><br><span class="line">git diff [files]</span><br></pre></td></tr></table></figure><p>命令：</p><p><img src="/img/md/git52.png"></p><p>—a 表示修改之前的文件，+++b 表示修改后的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#比较暂存区的文件与之前已经提交过的文件</span><br><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><p>也可以把 WorkSpace 中的状态和 repo 中的状态进行 diff，命令如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#比较repo与工作空间中的文件差异</span><br><span class="line">git diff HEAD~n</span><br></pre></td></tr></table></figure><p><img src="/img/md/git53.png"></p><h2 id="签出"><a href="#签出" class="headerlink" title="签出"></a>签出</h2><p>如果仓库中已经存在文件 f4.txt，在工作区中对 f4 修改了，如果想撤销可以使用 checkout，签出覆盖</p><p>检出命令 git checkout 是 git 最常用的命令之一，同时也是一个很危险的命令，因为这条命令会重写工作区</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#用法一</span><br><span class="line">git checkout [-q] [&lt;commit&gt;] [--] &lt;paths&gt;...</span><br><span class="line">#用法二</span><br><span class="line">git checkout [&lt;branch&gt;]</span><br><span class="line">#用法三</span><br><span class="line">git checkout [-m] [[-b]--orphan] &lt;new_branch&gt;] [&lt;start_point&gt;]</span><br></pre></td></tr></table></figure><p>是可选项，如果省略则相当于从暂存区（index）进行检出</p><p><img src="/img/md/git54.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout branch</span><br><span class="line">#检出branch分支。要完成图中的三个步骤，更新HEAD以指向branch分支，以及用branch  指向的树更新暂存区和工作区。</span><br><span class="line"></span><br><span class="line">$ git checkout</span><br><span class="line">#汇总显示工作区、暂存区与HEAD的差异。</span><br><span class="line"></span><br><span class="line">$ git checkout HEAD</span><br><span class="line">#同上</span><br><span class="line"></span><br><span class="line">$ git checkout -- filename</span><br><span class="line">#用暂存区中filename文件来覆盖工作区中的filename文件。相当于取消自上次执行git add filename以来（如果执行过）的本地修改。</span><br><span class="line"></span><br><span class="line">$ git checkout branch -- filename</span><br><span class="line">#维持HEAD的指向不变。用branch所指向的提交中filename替换暂存区和工作区中相   应的文件。注意会将暂存区和工作区中的filename文件直接覆盖。</span><br><span class="line"></span><br><span class="line">$ git checkout -- . 或写作 git checkout .</span><br><span class="line">#注意git checkout 命令后的参数为一个点（“.”）。这条命令最危险！会取消所有本地的  #修改（相对于暂存区）。相当于用暂存区的所有文件直接覆盖本地文件，不给用户任何确认的机会！</span><br><span class="line"></span><br><span class="line">$ git checkout commit_id -- file_name</span><br><span class="line">#如果不加commit_id，那么git checkout -- file_name 表示恢复文件到本地版本库中最新的状态。</span><br></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt #忽略所有 .txt结尾的文件</span><br><span class="line">!lib.txt #但lib.txt除外</span><br><span class="line">/temp #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/ #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/kevingrace/p/5690241.html">更多规则请点这里</a></p><p>示例：</p><p>创建一个.gitignore 文件忽视所有的日志文件</p><p><img src="/img/md/git55.png"></p><p>查看状态：</p><p><img src="/img/md/git56.png"></p><p>从上图中可以看出 2 个日志文件并没有添加到暂存区，直接被忽视了。</p><p><font size='4'>针对各种语言与项目的 Git 忽视文件</font>： <a href="https://github.com/kaedei/gitignore">https://github.com/kaedei/gitignore</a> <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p>通用的 vue 忽视文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">pnpm-debug.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br></pre></td></tr></table></figure><p>通用的 Visual Studio 开发项目忽视文件</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>通过 add 只是将文件或目录添加到了 index 暂存区，使用 commit 可以实现将暂存区的文件提交到本地仓库。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区，跳过了add,对新文件无效</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><p>示例:</p><p>提交前的状态</p><p><img src="/img/md/git57.png"></p><p>提交</p><p><img src="/img/md/git58.png"></p><p>提交后的状态</p><p><img src="/img/md/git59.png"></p><p>从上图中可以看出暂存区中没有了 bar.htm</p><h3 id="修订提交"><a href="#修订提交" class="headerlink" title="修订提交"></a>修订提交</h3><p>如果我们提交过后发现有个文件改错了，或者只是想修改提交说明，这时可以对相应文件做出修改，将修改过的文件通过”git add”添加到暂存区，然后执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修订提交</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h3 id="撤销提交（commit）"><a href="#撤销提交（commit）" class="headerlink" title="撤销提交（commit）"></a>撤销提交（commit）</h3><p>原理就是放弃工作区和 index 的改动，同时 HEAD 指针指向前一个 commit 对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#撤销上一次的提交</span><br><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure><p>要通过 git log 查看提交日志，也可直接指定提交编号或序号</p><h2 id="日志与历史"><a href="#日志与历史" class="headerlink" title="日志与历史"></a>日志与历史</h2><p>查看提交日志可以使用 git log 指令，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看提交日志</span><br><span class="line">git log [&lt;options&gt;] [&lt;revision range&gt;] [[\--] &lt;path&gt;…]</span><br></pre></td></tr></table></figure><h2 id="查看所有分支日志"><a href="#查看所有分支日志" class="headerlink" title="查看所有分支日志"></a>查看所有分支日志</h2><p>“git reflog”中会记录这个仓库中所有的分支的所有更新记录，包括已经撤销的更新。</p><h2 id="查看文件列表"><a href="#查看文件列表" class="headerlink" title="查看文件列表"></a>查看文件列表</h2><p>使用 git ls-files 指令可以查看指定状态的文件列表，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看指定状态的文件</span><br><span class="line">git ls-files [-z] [-t] [-v] (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])* (-[c|d|o|i|s|u|k|m])*</span><br></pre></td></tr></table></figure><h2 id="撤销更新"><a href="#撤销更新" class="headerlink" title="撤销更新"></a>撤销更新</h2><h3 id="撤销暂存区更新"><a href="#撤销暂存区更新" class="headerlink" title="撤销暂存区更新"></a>撤销暂存区更新</h3><p>使用”git add”把更新提交到了暂存区。这时”git status”的输出中提示我们可以通过”git reset HEAD …”把暂存区的更新移出到 WorkSpace 中</p><h3 id="撤销本地仓库更新"><a href="#撤销本地仓库更新" class="headerlink" title="撤销本地仓库更新"></a>撤销本地仓库更新</h3><p>使用 git log 查看提交日志</p><p>撤销提交有两种方式：使用 HEAD 指针和使用 commit id</p><p>在 Git 中，有一个 HEAD 指针指向当前分支中最新的提交。当前版本，我们使用”HEAD^“，那么再钱一个版本可以使用”HEAD^^”，如果想回退到更早的提交，可以使用”HEAD<del>n”。（也就是，HEAD^&#x3D;HEAD</del>1，HEAD^^&#x3D;HEAD~2）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line">git reset --hard 59cf9334cf957535cb328f22a1579b84db0911e5</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><h3 id="删除未跟踪文件"><a href="#删除未跟踪文件" class="headerlink" title="删除未跟踪文件"></a>删除未跟踪文件</h3><p>如果文件还是未跟踪状态，直接删除文件就可了，bash 中使用 rm 可以删除文件，示例如下：</p><p><img src="/img/md/git60.png"></p><h3 id="删除已提交文件"><a href="#删除已提交文件" class="headerlink" title="删除已提交文件"></a>删除已提交文件</h3><p><img src="/img/md/git61.png"></p><p>-f 强制删除，物理删除了，同时删除工作区和暂存区中的文件</p><h4 id="撤销删除"><a href="#撤销删除" class="headerlink" title="撤销删除"></a>撤销删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#to discard changes in working directory</span><br><span class="line">git checkout -- &lt;file&gt;...</span><br></pre></td></tr></table></figure><p><img src="/img/md/git62.png"></p><h3 id="删除暂存区的文件，不删除工作区的文件"><a href="#删除暂存区的文件，不删除工作区的文件" class="headerlink" title="删除暂存区的文件，不删除工作区的文件"></a>删除暂存区的文件，不删除工作区的文件</h3><p><img src="/img/md/git63.png"></p><p>使用 git reset HEAD …同样可以实现上面的功能</p><h2 id="文件操作小结"><a href="#文件操作小结" class="headerlink" title="文件操作小结"></a>文件操作小结</h2><p><img src="/img/md/git64.png"></p><p>Git 很强大，很灵活，这是毋庸置疑的。但也正因为它的强大造成了它的复杂，因此会有很多奇奇怪怪的问题出现，多用就好了。</p><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>分支在 GIT 中相对较难</p><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习 Git 的时候，另一个你正在另一个平行宇宙里努力学习 SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了 Git 又学会了 SVN！</p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了 50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>Git 分支的速度非常快。截止到目前，只有一条时间线，在 Git 里，这个分支叫主分支，即 master 分支。HEAD 严格来说不是指向提交，而是指向 master，master 才是指向提交的，所以，HEAD 指向的就是当前分支。</p><p><img src="/img/md/git65.png"></p><p><img src="/img/md/git66.png"></p><p><img src="/img/md/git67.png"></p><h3 id="git-分支中常用指令："><a href="#git-分支中常用指令：" class="headerlink" title="git 分支中常用指令："></a>git 分支中常用指令：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="新建分支与切换分支"><a href="#新建分支与切换分支" class="headerlink" title="新建分支与切换分支"></a>新建分支与切换分支</h3><p>默认分支是这样的，master 是主分支</p><ol><li>新建一个分支，但依然停留在当前分支，使用：git branch [branch-name]</li></ol><p><img src="/img/md/git68.png"></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424">关于分支廖雪峰解释的比较清楚，我们引用一下。</a></p><p>当我们创建新的分支，例如 dev 时，Git 新建了一个指针叫 dev，指向 master 相同的提交，再把 HEAD 指向 dev，就表示当前分支在 dev 上：</p><p>你看，Git 创建一个分支很快，因为除了增加一个 dev 指针，改改 HEAD 的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对 dev 分支了，比如新提交一次后，dev 指针往前移动一步，而 master 指针不变：</p><p>假如我们在 dev 上的工作完成了，就可以把 dev 合并到 master 上。Git 怎么合并呢？最简单的方法，就是直接把 master 指向 dev 的当前提交，就完成了合并：</p><p>所以 Git 合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除 dev 分支。删除 dev 分支就是把 dev 指针给删掉，删掉后，我们就剩下了一条 master 分支：</p><ol start="2"><li>切换分支，git branch ，如果 name 为-则为上一个分支</li></ol><p><img src="/img/md/git69.png"></p><p>切换为上一个分支</p><p><img src="/img/md/git70.png"></p><ol start="3"><li>新建一个分支，并切换到该分支，git checkout -b [branch]</li></ol><p><img src="/img/md/git71.png"></p><ol start="4"><li>新建一个分支，指向指定 commit 使用命令：git branch [branch] [commit]</li></ol><p><img src="/img/md/git72.png"></p><p>上面创建了 dev3 分支且指向了 master 中首次提交的位置，切换到 dev3 查看日志如下：</p><p><img src="/img/md/git73.png"></p><p>master 上本来有两个提交记录的，此时的 dev3 指向的是第 1 次提交的位置</p><ol start="5"><li>新建一个分支，与指定的远程分支建立追踪关系使用命令：git branch –track [branch] [remote-branch]</li></ol><p><img src="/img/md/git74.png"></p><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><ol><li>列出所有本地分支使用 git branch</li></ol><p><img src="/img/md/git75.png"></p><ol start="2"><li>列表所有远程分支使用 git branch -r</li></ol><p><img src="/img/md/git76.png"></p><ol start="3"><li>列出所有本地分支和远程分支使用 git branch -a</li></ol><p><img src="/img/md/git77.png"></p><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p>合并指定分支到当前分支使用指令$ git merge [branch]</p><p>这里的合并分支就是对分支的指针操作，我们先创建一个分支再合并到主分支：</p><p><img src="/img/md/git78.png"></p><p>这里的file11.txt主分支与dev6的内容现在是不同的，因为在dev6中已被修改过，我们可以使用指令查看：</p><p><img src="/img/md/git79.png"></p><p>现在我们将dev6合并到主分支中去，从下图中可以看出dev6中有一次提交，而master并没有</p><p><img src="/img/md/git80.png"></p><p>合并后在master上查看file11.txt文件内容与dev6上的内容就一样了，合并后dev6中多出的提交在master也拥有了。</p><h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>删除本地分支可以使用命令：$ git branch -d [branch-name]，-D（大写）强制删除</p><p><img src="/img/md/git81.png"></p><p>删除远程分支可以使用如下指令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete [branch-name]</span><br><span class="line"> </span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><p>-d表示删除分支。分支必须完全合并在其上游分支，或者在HEAD上没有设置上游</p><p>-r表示远程的意思remotes，如果-dr则表示删除远程分支</p><p><img src="/img/md/git82.png"></p><h1 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h1><p>申请到了Git远程仓库的帐号并创建了一个空的远程仓库现在我们就可以结合本地的仓库与远程仓库一起协同工作了，模拟多人协同开发，这里我们全部使用命令完成。</p><h2 id="常用操作指令"><a href="#常用操作指令" class="headerlink" title="常用操作指令"></a>常用操作指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br><span class="line"></span><br><span class="line">#简单查看远程---所有仓库</span><br><span class="line">git remote  （只能查看远程仓库的名字）</span><br><span class="line">#查看单个仓库</span><br><span class="line">git  remote show [remote-branch-name]</span><br><span class="line"></span><br><span class="line">#新建远程仓库</span><br><span class="line">git remote add [branchname]  [url]</span><br><span class="line"></span><br><span class="line">#修改远程仓库</span><br><span class="line">git remote rename [oldname] [newname]</span><br><span class="line"></span><br><span class="line">#删除远程仓库</span><br><span class="line">git remote rm [remote-name]</span><br><span class="line"></span><br><span class="line">#获取远程仓库数据</span><br><span class="line">git fetch [remote-name] (获取仓库所有更新，但不自动合并当前分支)</span><br><span class="line">git pull (获取仓库所有更新，并自动合并到当前分支)</span><br><span class="line"></span><br><span class="line">#上传数据，如git push origin master</span><br><span class="line">git push [remote-name] [branch]</span><br></pre></td></tr></table></figure><h2 id="git-clone-克隆"><a href="#git-clone-克隆" class="headerlink" title="git clone 克隆"></a>git clone 克隆</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure><p>比如，克隆一个上课示例的版本库。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/zhangguo5/AngularJS04_BookStore.git</span><br></pre></td></tr></table></figure><p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone http[s]://example.com/path/to/repo.git/</span><br><span class="line">$ git clone ssh://example.com/path/to/repo.git/</span><br><span class="line">$ git clone git://example.com/path/to/repo.git/</span><br><span class="line">$ git clone /opt/git/project.git </span><br><span class="line">$ git clone file:///opt/git/project.git</span><br><span class="line">$ git clone ftp[s]://example.com/path/to/repo.git/</span><br><span class="line">$ git clone rsync://example.com/path/to/repo.git/</span><br></pre></td></tr></table></figure><p>SSH协议还有另一种写法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone [user@]example.com:path/to/repo.git/</span><br></pre></td></tr></table></figure><p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考 <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">官方文档</a>。</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p><p>不带选项的时候，git remote命令列出所有远程主机。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br></pre></td></tr></table></figure><p>使用-v选项，可以参看远程主机的网址。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git fetch &lt;远程主机名&gt;</span><br></pre></td></tr></table></figure><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull origin next:master</span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p><p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 2.0</title>
      <link href="/2021/05/27/vue/Vue2/"/>
      <url>/2021/05/27/vue/Vue2/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE-js框架是什么？为什么要学它"><a href="#VUE-js框架是什么？为什么要学它" class="headerlink" title="VUE.js框架是什么？为什么要学它"></a>VUE.js框架是什么？为什么要学它</h1><ul><li>vue作为国人开发的一款前端框架，不仅有强大的社区支持，很多API都是中文的，学习难度相对较小</li><li>接收用户输入的同时，很可能要及时更新视图，比如用户输入不同的内容，页面就会相对应进行更新，点击不同的选项，显示不同的状态等交互效果。（用vue更便捷）</li></ul><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><p>视图数据混在一起冗繁复杂，把html中的dom与其他部分独立开来划分出一个层次，这个层次就叫做视图层，vue的核心库只关注视图层</p><h2 id="BTW——API"><a href="#BTW——API" class="headerlink" title="BTW——API"></a>BTW——API</h2><ul><li>例：电脑需要调用手机里的信息，用数据线进行连接，电脑和手机连接数据线的接口就是API</li></ul><h3 id="API与上述例子类似又不尽相同"><a href="#API与上述例子类似又不尽相同" class="headerlink" title="API与上述例子类似又不尽相同"></a>API与上述例子类似又不尽相同</h3><ul><li>定义：应用程序接口，是一些预先定义的接口（如函数，http接口），或软件系统不同组成部分衔接的约定）</li><li>应用场景：<ul><li>接口：前后端交互</li><li>提供应用程序与开发人员基于某软件或硬件得以访问的一组历程，而又无需访问源码<br>  例：程序员B想调用A中的部分功能又不想从头看一遍A的源码和功能实现过程，这时候把A需要的功能打包好，写成一个函数！！！按照B说的流程把函数放在B中就可以直接使用功能了</li></ul></li></ul><h1 id="vue是什么？"><a href="#vue是什么？" class="headerlink" title="vue是什么？"></a>vue是什么？</h1><ul><li>定义：以数据驱动视图的MVVM渐进式框架<ul><li>数据：对象</li><li>视图：dom标签 –&gt; 虚拟dom</li><li>MVVM：M model模型，V view视图。就是一种框架架构，model-view view-model， 这样的结构，主要优势在于监控者数据双向绑定的特性，vue和model之间是双向数据传递的。视图改变数据就可以改变，数据改变视图就可以改变。</li><li>渐进式：轻量级框架，可以选择性的，只使用vue中很少的一部分，而不是必须使用全部</li></ul></li></ul><h2 id="BTW——MVC和MVVM"><a href="#BTW——MVC和MVVM" class="headerlink" title="BTW——MVC和MVVM"></a>BTW——MVC和MVVM</h2><ul><li>MVVM有两个方向：<ol><li>将model（模型）转化成 view（视图），即后端传递的数据转化成所看到的页面。实现方式为数据绑定</li><li>将view（视图）转化成 model（模型），即将所看的页面转化成后端的数据。实现方式为dom监听事件</li></ol></li><li>什么是mvc?<ul><li>MVC是model-view-controller的缩写，即模型——视图——控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。使用MVC的目的就是将M和V的代码分离。MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。</li></ul></li><li>区别：<ul><li>MVC和MVVM的区别并不是VM完全取代了C，只是在MVC的基础上增加了一层VM，只不过是弱化了C的概念，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。</li><li>View更新的时候，必须要通过Controller去更新一遍Model；同样的Model更新的时候，也要去更新一遍视图。<br>[!MVVM优点]:<br>实现的是业务逻辑组件的重用，使开发更高效，结构更清晰，增加代码的复用性。</li></ul></li></ul><h2 id="vue-js核心？"><a href="#vue-js核心？" class="headerlink" title="vue.js核心？"></a>vue.js核心？</h2><ul><li>官方定义：通过尽可能简单的API实现响应的数据绑定和组合的视图组件</li></ul><h2 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h2><ul><li>传统js手动改变DOM来改变视图，vue.js只需要改变数据就会自动改变视图，就是MVVM思想的实现</li></ul><h2 id="视图组件化"><a href="#视图组件化" class="headerlink" title="视图组件化"></a>视图组件化</h2><ul><li>定义：把网页拆分一个个区块，每个区块我们可以看成一个组件。网页由多个组件拼接或嵌套组成</li></ul><h2 id="vue的特点"><a href="#vue的特点" class="headerlink" title="vue的特点"></a>vue的特点</h2><ul><li>响应式编程：编写代码基于对变化的反应</li><li>组件化</li></ul><h3 id="组件和模块"><a href="#组件和模块" class="headerlink" title="组件和模块"></a>组件和模块</h3><ul><li>组件：把重复代码提取出来合并成为一个组件，组件最重要的是复用，位于框架最底层，其他功能依赖于组件，可供不同功能使用，独立性强</li><li>模块：分属同一功能&#x2F;业务的代码进行隔离（分装）成独立的模块，可以独立运行，以页面、功能或其他不同粒度划分程度不同的模块。位于业务框架层，模块间通过接口调用，目的是降低模块间的耦合，由之前的主应用与模块耦合，变为主应用与接口耦合，接口与模块耦合<br>[比喻]模块就像有多个USB插口的充电宝，可以和多部手机充电，接口可以随意插拔。复用性很强，可以独立管理。</li><li>组件化模块化区别？<ul><li><ol><li>组件相当于库，把一些能在项目里或者不同类型项目中可复用的代码进行封装</li></ol></li><li><ol start="2"><li>而模块相当于业务逻辑模块，把同一类型项目里的功能逻辑进行需求性的封装</li></ol></li></ul></li><li>为什么要用组件和模块<ul><li>开发和调式效率高</li><li>可维护性强</li><li>避免阻断</li><li>版本管理更容易</li></ul></li></ul><h2 id="vue的优缺点？"><a href="#vue的优缺点？" class="headerlink" title="vue的优缺点？"></a>vue的优缺点？</h2><ul><li>优点：轻量级框架，数据双向绑定，组件化，虚拟dom，运行速度快</li><li>缺点：<ul><li>不支持ie678</li><li>生态环境差不如angular和react</li><li>社区不大</li><li>无高阶书籍</li><li>首屏加载速度满，加载时，将所有的css,js文件进行加载</li></ul></li></ul><h3 id="BTW——首屏加载慢解决方式"><a href="#BTW——首屏加载慢解决方式" class="headerlink" title="BTW——首屏加载慢解决方式"></a>BTW——首屏加载慢解决方式</h3><ul><li>减少入口文件体积</li><li>UI框架按需引入</li><li>静态资源本地缓存</li><li>图片资源压缩</li><li>组件重复打包</li><li>使用SSR（通过对文件、目录、进程、注册表和服务的强制访问控制，有效的制约和分散了原有系统管理员的权限）</li></ul><h3 id="BTW——粒度和耦合"><a href="#BTW——粒度和耦合" class="headerlink" title="BTW——粒度和耦合"></a>BTW——粒度和耦合</h3><ul><li>粒度：计算机中常指系统内存扩展增量的最小值。粒度问题是设计数据仓库的一个最重要方面。粒度是指数据仓库的数据单位中保存数据的细化或综合程度的级别。细化程度越高，粒度级就越小；相反，细化程度越低，粒度级就越大。数据的粒度一直是一个设计问题。</li><li>耦合：两个东西通过某种作用连接在了一起</li></ul><h1 id="vue核心的底层原理"><a href="#vue核心的底层原理" class="headerlink" title="vue核心的底层原理"></a>vue核心的底层原理</h1><ul><li><p>Object.defineProperty数据劫持的API</p></li><li><p>Object.defineProperty定义新属性或修改原有的属性，vue的数据双向绑定原理就是Object.defineProperty，里面定义了setter和getter方法，通过观察者模式(发布订阅模式)来监听数据变化，从而做相应的逻辑处理</p></li><li><p>监听对象属性变化，只关心数据不关心视图</p></li><li><p>三个参数- 三个参数Object.defineProperty(object,propName,descriptor)</p><ul><li>object 对象&#x3D;&gt;给谁加</li><li>propName 属性名&#x3D;&gt;需要加的属性的名字[类型:String]</li><li>descriptor 属性描述&#x3D;&gt;加的这个属性有什么特性[类型：Object]</li><li>方法就是直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</li></ul></li><li><p>属性描述符</p><ul><li>configurable: true 配置可删除，默认false<ul><li>两个作用：<ol><li>目标属性是否可以使用delete删除</li><li>目标属性是否可以再次设置特性</li></ol></li></ul></li><li>writable：true 配置可修改，默认false</li><li>enumerable:true 可枚举，使用(for…in或Object,keys())默认false</li><li>value属性对应的值，可以是任意类型的值，默认undefined</li><li>缺点：数组的长度</li></ul></li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// writable应用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Person</span> = &#123;&#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Person</span>,<span class="string">&#x27;name&#x27;</span>,&#123;<span class="attr">value</span>:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">        <span class="comment">// writable:true // 加上这个就可以输出&#123;name:&#x27;Rose&#x27;&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>) <span class="comment">// &#123;name:&#x27;Jack&#x27;&#125;</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property">name</span> = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>) <span class="comment">//undefined,因为writable默认false</span></span><br><span class="line"><span class="comment">// enumerable应用</span></span><br><span class="line">    <span class="keyword">var</span> user=&#123;<span class="attr">name</span>:<span class="string">&#x27;小五&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;24&#x27;</span>&#125;;</span><br><span class="line">    <span class="comment">// es6</span></span><br><span class="line">        <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(user)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(keys) <span class="comment">// [&#x27;name&#x27;,&#x27;age&#x27;]</span></span><br><span class="line">    <span class="comment">// es5</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Key</span> = []</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> user) &#123;</span><br><span class="line">            <span class="title class_">Key</span>.<span class="title function_">push</span>(<span class="title class_">Key</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Key</span>) <span class="comment">// [&#x27;name&#x27;,&#x27;age&#x27;]</span></span><br><span class="line"><span class="comment">// configurable应用</span></span><br><span class="line">    <span class="keyword">var</span> human=&#123;<span class="attr">name</span>:<span class="string">&#x27;李白&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;不详&#x27;</span>&#125;；</span><br><span class="line">    <span class="comment">// 定义一个性别，不可被删除和重新定义特性</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(human,<span class="string">&#x27;gender&#x27;</span>,&#123;</span><br><span class="line">            <span class="attr">value</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">            <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">configurable</span>:<span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">// 删除一下</span></span><br><span class="line">        <span class="keyword">delete</span> human.<span class="property">gender</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(human)<span class="comment">//&#123;name:&quot;李白&quot;,age:&quot;不详&quot;,gender:&quot;男&quot;&#125; 并没有删除</span></span><br><span class="line">    <span class="comment">// 重新定义特性</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(human,<span class="string">&#x27;gender&#x27;</span>,&#123;</span><br><span class="line">            <span class="attr">value</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">            <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">configurable</span>:<span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">delete</span> human.<span class="property">gender</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(human) <span class="comment">// &#123;name:&quot;李白&quot;,age:&quot;不详&quot;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>存取描述符<br>  get<br>  一个给属性提供 getter 的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。getter就是获取属性值<br>  set<br>  一个给属性提供 setter 的方法，如果没有setter则为undefined。该方法将接收唯一参数，并将该参数的新值分配给属性。默认为undefined。setter就是设置属性值<br>[!注意]：1. 当使用getter或setter方法，不允许使用writable和value这两个属性<br>  2. get或set不是必须成对出现，任写其一就行。如果不设置方法，get和set默认undefined</li></ul><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> username = &#123;<span class="attr">name</span>:<span class="string">&quot;不想起名了&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span></span><br><span class="line"><span class="comment">// 定义一个age获取值时返回定义好的变量</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(username,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">age</span>);<span class="comment">//12</span></span><br><span class="line"><span class="comment">// 定义一个age获取值时返回定义好的变量num</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(username,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            num = newVal</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">age</span>);<span class="comment">// 12</span></span><br><span class="line">    username.<span class="property">age</span> = <span class="number">145</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">age</span>); <span class="comment">// 145</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 145</span></span><br></pre></td></tr></table></figure><ul><li>兼容性：IE8以下不行</li><li>使用Object.defineProperty的优点<ol><li>减少代码（少了dom,不需要写很多dom）</li><li>开发速度快</li></ol></li></ul><h3 id="BTW——数据劫持"><a href="#BTW——数据劫持" class="headerlink" title="BTW——数据劫持"></a>BTW——数据劫持</h3><ul><li>定义：修改或访问对象的属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果</li></ul><h1 id="vue环境搭建"><a href="#vue环境搭建" class="headerlink" title="vue环境搭建"></a>vue环境搭建</h1><ul><li>环境需要:nodejs 检测cmd:node-v</li><li>安装全局脚手架:<code>npm i -g @vue/cli</code> 检测：vue-V<code>yarn global add @vue/cli</code></li><li>脚手架网站:cli.vuejs.org</li><li>vue官网: vuejs.org</li></ul><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><p>【注意】:项目名称不能是中文，不能是大写字母，不能用vue做名字</p><h3 id="命令运行方式"><a href="#命令运行方式" class="headerlink" title="命令运行方式"></a>命令运行方式</h3><p><code>vue create name</code></p><h3 id="gui图形化方式"><a href="#gui图形化方式" class="headerlink" title="gui图形化方式"></a>gui图形化方式</h3><p><code>vue ui</code></p><h2 id="vue脚手架"><a href="#vue脚手架" class="headerlink" title="vue脚手架"></a>vue脚手架</h2><ul><li>定义:vue的cli脚手架底层是webpack,也就是基于webpack封装的<br>  [官网]（<a href="http://cli.vuejs.org)/">http://cli.vuejs.org）</a></li></ul><h2 id="BTW——是脚手架？"><a href="#BTW——是脚手架？" class="headerlink" title="BTW——是脚手架？"></a>BTW——是脚手架？</h2><ol><li>什么是脚手架？<ul><li>构建基于数据库的应用，进行增、删、改、查数据库的操作</li></ul></li><li>Vue-CLi是什么？<ul><li>是vuejs脚手架工具，就是自动帮你生成好项目目录，配置好webpack，以及各种依赖包工具</li><li>为什么要用？可以帮助你快速开启一个vue项目，给你一套文件结构，包含基础的依赖库，只需要npm install 一下就可以安装，不需要为编译或其他琐碎事而浪费时间，而且不会限制到你发挥</li></ul></li></ol><h2 id="脚手架配置"><a href="#脚手架配置" class="headerlink" title="脚手架配置"></a>脚手架配置</h2><ul><li>vue.config.js文件是脚手架配置文件，该文件必须放在项目的根目录里</li></ul><h3 id="请求代理【跨域方案】"><a href="#请求代理【跨域方案】" class="headerlink" title="请求代理【跨域方案】"></a>请求代理【跨域方案】</h3><p>脚手架-&gt;webpack-&gt;nodejs【后端】<br>使用后端转发请求<br>【注意】只能在开发环境中使用<br>【使用场景】在公司里和后端的测试接口进行接口调式使用</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="comment">// 浏览器自动打开</span></span><br><span class="line">        <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 代理</span></span><br><span class="line">        <span class="attr">proxy</span>:&#123;</span><br><span class="line">            <span class="string">&quot;/api&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">target</span>:<span class="string">&quot;http://xx.com&quot;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;^/api&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭源码映射【性能优化】"><a href="#关闭源码映射【性能优化】" class="headerlink" title="关闭源码映射【性能优化】"></a>关闭源码映射【性能优化】</h3><ul><li>productionSourceMap:false<br>  打包的时候，每一个js文件对应生成一个map源码映射文件，它在生产环境中时没有用的。它会增加打包时间，浪费磁盘空间，以及容易造成代码泄漏等问题，因此需要在生产环境中关闭，只允许开发环境中开启</li></ul><h3 id="关闭eslint代码校验"><a href="#关闭eslint代码校验" class="headerlink" title="关闭eslint代码校验"></a>关闭eslint代码校验</h3><ul><li>lintOnSave:false</li></ul><h2 id="AIA：脚手架配置有哪些？"><a href="#AIA：脚手架配置有哪些？" class="headerlink" title="AIA：脚手架配置有哪些？"></a>AIA：脚手架配置有哪些？</h2><ol><li>代码校验</li><li>代码映射的开启与关闭</li><li>请求代理vue.config.js</li></ol><h1 id="vue项目结构"><a href="#vue项目结构" class="headerlink" title="vue项目结构"></a>vue项目结构</h1><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><ul><li>项目根目录里有一个package.json文件，该文件有一个script对象，里面就是自定义运行命令。（是这三个里唯一一个可以删的）</li><li>serve开发环境，写代码时的环境</li><li>build生产环境，打包发布时的环境</li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><ul><li>node_modules它是项目运行时必须依赖</li></ul></li><li>public公共目录，存放着唯一的html模板</li><li>src【核心-源码】项目所有代码</li><li>.gitignore过滤掉git仓库里不需要的文件清单</li><li>babel.config.js把es6转成es5</li><li>package.lock.json(可以删但一般留着)，锁定依赖版本号</li><li>package.json【核心】依赖包管理文件</li><li>README.md说明书</li></ul><h3 id="src源码结构"><a href="#src源码结构" class="headerlink" title="src源码结构"></a>src源码结构</h3><ul><li>assets存放静态资源：图片，css,js脚本</li><li>component放组件</li><li>App.vue根组件，第一个被加载的组件</li><li>main.js入口文件，第一个被执行的文件</li></ul><h2 id="模块化开发【vue核心亮点】"><a href="#模块化开发【vue核心亮点】" class="headerlink" title="模块化开发【vue核心亮点】"></a>模块化开发【vue核心亮点】</h2><p>把一切重复使用的资源，无论是图片，样式还是js代码抽离出来，作为单独的’模块’进行复用</p><ul><li>模块包含：vue 组件，图片，js 脚本，css 样式，字体等都可以是模块。</li></ul><h2 id="vue里的模块化组件开发"><a href="#vue里的模块化组件开发" class="headerlink" title="vue里的模块化组件开发"></a>vue里的模块化组件开发</h2><ul><li><ol><li>组件必须使用import引入到当前组件</li></ol></li><li><ol start="2"><li>当前组件的components必须挂载引入的组件</li></ol></li><li><ol start="3"><li>在当前组件的template里用标签的形式使用挂载的组件</li></ol></li></ul><h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><ul><li>渲染文本</li><li>写在两个大括号中间</li></ul><h2 id="插值语法可以写哪些值"><a href="#插值语法可以写哪些值" class="headerlink" title="插值语法可以写哪些值"></a>插值语法可以写哪些值</h2><ul><li>对象、字符串、数字、数组、布尔值、三元表达式、自执行函数等，凡是具有返回值的都可以，全部变成文本渲染出来</li></ul><h2 id="BTW——自执行函数和快速删除文件"><a href="#BTW——自执行函数和快速删除文件" class="headerlink" title="BTW——自执行函数和快速删除文件"></a>BTW——自执行函数和快速删除文件</h2><h4 id="自执行函数后面-（）"><a href="#自执行函数后面-（）" class="headerlink" title="自执行函数后面+（）"></a>自执行函数后面+（）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="number">1000</span>()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么用自执行函数而不是函数"><a href="#为什么用自执行函数而不是函数" class="headerlink" title="为什么用自执行函数而不是函数"></a>为什么用自执行函数而不是函数</h2><p>用函数也可以，只不过返回时function(){return 1000},而不是1000</p><h2 id="插值语法的作用"><a href="#插值语法的作用" class="headerlink" title="插值语法的作用"></a>插值语法的作用</h2><ol><li>四则运算 100+(200*300)&#x2F;2</li><li>插值里存放变量 (详情请找baseVue.html)</li></ol><h4 id="npkill和rimraf快速删除node-modules包"><a href="#npkill和rimraf快速删除node-modules包" class="headerlink" title="npkill和rimraf快速删除node_modules包"></a>npkill和rimraf快速删除node_modules包</h4><ol><li>全局安装npm i -g npkill</li><li>进入想清理的文件夹</li><li>cd文件路径</li><li>输入npkill</li><li>会自动查找文件中node_modules</li><li>光标上下移动来选择要清理的目录，释放宝贵的空间</li><li>按空格删除</li></ol><h1 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h1><h2 id="set添加或修改对象和数组"><a href="#set添加或修改对象和数组" class="headerlink" title="$set添加或修改对象和数组"></a><code>$set</code>添加或修改对象和数组</h2><p>添加&#x2F;修改对象的属性 <code>$set(obj,&#39;name&#39;,1)</code><br>添加或修改数组成员<code>$set(arr,index,val)</code></p><h2 id="delete删除对象和数组"><a href="#delete删除对象和数组" class="headerlink" title="$delete删除对象和数组"></a><code>$delete</code>删除对象和数组</h2><ul><li>删除对象属性<code>$delete(obj,name)</code></li><li>删除数组成员<code>$delete(arr,index)</code></li></ul><h2 id="emit派发一个动作向上级通信"><a href="#emit派发一个动作向上级通信" class="headerlink" title="$emit派发一个动作向上级通信"></a><code>$emit</code>派发一个动作向上级通信</h2><h2 id="mount手动挂载方法"><a href="#mount手动挂载方法" class="headerlink" title="$mount手动挂载方法"></a><code>$mount</code>手动挂载方法</h2><h1 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h1><ul><li>props接收上游绑定的属性</li></ul><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><ul><li>数组：<code>[&#39;list&#39;]</code></li><li>对象:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">list</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Array</span>,</span><br><span class="line">        <span class="comment">// 针对数组或对象需要函数</span></span><br><span class="line">        <span class="attr">default</span>:<span class="function">() =&gt;</span> [] <span class="comment">//default是没有任何值的时候默认的值，保证你需要该属性的时候不是undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>父组件要正向地向子组件传递数据或参数，子组件收到后，根据传递过来的数据不同，渲染不同的页面内容，或者执行操作。这个正向传递数据的过程是通过props来实现的。子组件使用props来声明需要从父组件接收的数据<br>[!注意]：</li></ul><ol><li><p>不应该在一个子组件内部改变 prop，这样会破坏单向的数据绑定，导致数据流难以理解。如果有这样的需要，可以通过 data 属性接收或使用 computed 属性进行转换。</p></li><li><p>如果 props 传递的是引用类型(对象或者数组)，在子组件中改变这个对象或数组，父组件的状态会也会做相应的更新，利用这一点就能够实现父子组件数据的“双向绑定”，虽然这样实现能够节省代码，但会牺牲数据流向的简洁性，令人难以理解，最好不要这样去做。</p></li><li><p>prop只读不可修改</p></li><li><p>想要实现父子组件的数据“双向绑定”，可以使用 v-model 或 .sync</p></li></ol><h2 id="两种常见的试图变更一个prop的情形"><a href="#两种常见的试图变更一个prop的情形" class="headerlink" title="两种常见的试图变更一个prop的情形"></a>两种常见的试图变更一个prop的情形</h2><ul><li>这个prop用来传递一个初始值这个子组件接下来希望将其作为一个本地的prop数据来使用。在这种情况下，最好定义一个本地的data property并将这个prop用作其初始值</li><li>这个prop以一种原始的值传入且需要转换。在这种情况下，最好使用这个prop的值来定义一个计算属性</li></ul><h1 id="scss动态生成类名（待写11-26scss动态生成类名-vue）"><a href="#scss动态生成类名（待写11-26scss动态生成类名-vue）" class="headerlink" title="scss动态生成类名（待写11.26scss动态生成类名.vue）"></a>scss动态生成类名（待写11.26scss动态生成类名.vue）</h1><p>例如：有一p标签，起一个class名为m-l-10<br>     <!-- 在export default中     @for $name from 1 through 100 {        .m-l-#{$name} {            margin-left:$name+px        }     } --></p><h1 id="v-指令"><a href="#v-指令" class="headerlink" title="v-指令"></a>v-指令</h1><h2 id="什么是指令？"><a href="#什么是指令？" class="headerlink" title="什么是指令？"></a>什么是指令？</h2><p>是带有v-前缀的特殊属性，通过属性来操作元素</p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>因为vue是单向数据流，所以v-model在input上只是语法糖而已<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一行代码是第二行的语法糖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;sth&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;sth&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;sth=$event.target.value&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 理解上述代码</span></span><br><span class="line"><span class="comment">    input本身有个oninput事件，这是h5新增，类似onchange,每当输入框内容发生变化的时候，就会触发oninput，把最新的value传递给sth</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 所以</span></span><br><span class="line"><span class="comment">在给&lt;input/&gt;元素添加v-model属性时，默认会把value作为元素的属性，然后把&#x27;input&#x27;事件作为实时传递value的触发事件 --&gt;</span></span><br></pre></td></tr></table></figure></li><li>用在组件上<br> 给组件加v-model，默认会把value作为组件的属性，然后把’input’值作为给组件绑定事件的事件名</li></ul><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">Cur-input</span> <span class="attr">v-model</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Cur-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;input&#x27;)$event.target.value&quot;</span>&gt;</span></span><br><span class="line">export default &#123;</span><br><span class="line">    data:&#123;price:100&#125;,</span><br><span class="line">    props:[&#x27;value&#x27;]<span class="comment">&lt;!-- 这里为什么用value？--&gt;</span></span><br><span class="line">&#125;</span><br><span class="line">【问题解答】：</span><br><span class="line"><span class="tag">&lt;<span class="name">Cur-input</span> <span class="attr">:value</span>=<span class="string">&quot;price&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;price=arguments[0]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Cur-input</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model缺点及解决办法"><a href="#v-model缺点及解决办法" class="headerlink" title="v-model缺点及解决办法"></a>v-model缺点及解决办法</h3><ul><li>在创建类似复选框或单选框这种常见的组件时，v-model就不好用了。因为不需要value属性而是checked属性，并且当你点击这个单选框的时候不会触发oninput事件，它只会触发onchange事件。<br>[解决办法]:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- input上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:checked</span>=<span class="string">&quot;status&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;status=$event.target.checked&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;$emit(&#x27;suibian&#x27;,$event.target.checked)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:checked</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    props:[&#x27;checked&#x27;]</span><br></pre></td></tr></table></figure><br><br>[!注意]v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。应通过 JavaScript 在组件的 data 选项中声明初始值。</li></ul><h3 id="表单的使用——专用指令-v-model"><a href="#表单的使用——专用指令-v-model" class="headerlink" title="表单的使用——专用指令:v-model"></a>表单的使用——专用指令:v-model</h3><p>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 value 属性和 input 事件；（默认）</li><li>radio单选框<ul><li>checkbox 和 radio 使用 checked 属性和 change 事件；(单个复选框，绑定到布尔值，多个复选框，绑定到同一个数组：)</li><li>语法：<code>&lt;input type=&#39;radio&#39; v-model=&#39;radio&#39; value=&#39;1&#39;/&gt;</code></li></ul></li><li>select下拉菜单<ul><li>select 字段将 value 作为 prop 并将 change 作为事件。</li><li>语法<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&#x27;selected&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;1000&#x27;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="BTW——语法糖-onchange-input"><a href="#BTW——语法糖-onchange-input" class="headerlink" title="BTW——语法糖 onchange @input"></a>BTW——语法糖 onchange @input</h2><ol><li>语法糖：用更简练的言语表达较复杂的含义</li><li>onchange事件<ul><li>定义：事件会在域的内容改变时发生</li><li>可用于单选框与复选框改变后触发的事件</li><li>语法:input type&#x3D;”text” onchange&#x3D;”myFunction()</li></ul></li><li>@input一般用于监听事件，只要输入的值变化了就会触发input，而@click是事件触发事件</li></ol><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><ul><li>控制元素显示与隐藏，但是元素的dom节点一直存在页面中的，他的底层原理是控制css的display属性</li><li>当频繁切换元素显示隐藏的时候，优先使用v-show<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 条件渲染v-show</span></span><br><span class="line"><span class="comment">    控制css display样式，dom节点是存在于页面中的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;flag()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;see&quot;</span>&gt;</span>我可以被显示吗<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">see</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">flag</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">see</span> =! <span class="variable language_">this</span>.<span class="property">see</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><ul><li>它是控制元素的加载(渲染)和销毁，底层是删除或者加载出dom</li><li>它还有v-else-if和v-else但是后面两个不能单独使用</li><li>它是条件控制语句，它只要有一个符合条件，则后面的v-else-if和v-else就不执行判断</li><li>适合用于多条件判断渲染<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 多条件切换的时候使用 v-if --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;index=1&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;index=2&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;index=3&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 面板 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;index==1&quot;</span>&gt;</span>我是首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;index==2&quot;</span>&gt;</span>我是新闻<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>我是关于<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//1.首页 2.新闻 3.关于</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">index</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul><li>定义：绑定属性的，可以绑定原生属性和自定义属性</li><li>缩写<code>:</code></li><li>修饰符<ul><li>prop把标签上的属性隐藏</li><li>sync把数据变成为双向绑定(与v-model类似，v-model只能用于对象否则会警告，这个可以解决基本数据类型不是双向绑定问题)</li></ul></li></ul> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;doc.title&quot;</span> <span class="attr">v-on:update:title</span>=<span class="string">&quot;doc.title=$event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上述代码用.sync可以写为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;doc.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在子组件中，可以通过下面代码实现对prop重新赋值 --&gt;</span></span><br><span class="line">this.$emit(&#x27;update:title&#x27;,newTitle)</span><br></pre></td></tr></table></figure><p>[AIA]</p><ul><li>父组件使用 sync 修饰绑定的属性<br>  <code>v-bind:prop.sync=data</code></li><li>子组件使用固定语法<br>  <code>$emit(&#39;update:prop&#39;,value)</code></li></ul><h3 id="BTW——-emit-mount"><a href="#BTW——-emit-mount" class="headerlink" title="BTW——$emit $mount"></a>BTW——$emit $mount</h3><ul><li><p><code>$emit</code>  派发一个动作向上级通信</p></li><li><p><code>$mount</code> 手动挂载方法</p></li><li><p>语法</p><ul><li>绑定样式  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#123;name:true|false&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>绑定自定义  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Son</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>样例</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind:绑定属性的指令 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">kkk</span>=<span class="string">&quot;hahah&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            img标签?dom元素=dom对象</span></span><br><span class="line"><span class="comment">            src 对于img原始的属性</span></span><br><span class="line"><span class="comment">            kkk 对于img，自定义属性</span></span><br><span class="line"><span class="comment">            v-bind:既可以绑定原始和自定义属性     </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定背景图 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height:500px;border:1px solid red&quot;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;background:`url($&#123;logo&#125;)`&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定class类名</span></span><br><span class="line"><span class="comment">        v-on:click=&#x27;回调函数/表达式&#x27; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:class</span>=<span class="string">&#x27;&#123;active:n&#125;&#x27;</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;n=n ? false :1&#x27;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用对象包着是因为，对象里可以绑定很多class名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//引入图片</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> src <span class="keyword">from</span> <span class="string">&#x27;../../assets/logo.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(src)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//若引入很多张图片 脚手架-&gt;基于webpack-&gt;基于nodejs 所以可以使用nodejs里的require</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> img= <span class="built_in">require</span>(<span class="string">&#x27;../../assets/logo.png&#x27;</span>);<span class="comment">// 直接在export中输出require(&#x27;../../assets/logo.png&#x27;)不用写这个</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 任何文件都是模块</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n</span>:<span class="literal">false</span>,<span class="comment">//true是绑定，false是不要</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// logo:&#x27;../../assets/logo.pn&#x27;,这个卸载这里出不来放到import中，这里logosrc</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">logo</span>:src,<span class="comment">// 对应import</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">logo</span>:<span class="built_in">require</span>(<span class="string">&#x27;../../assets/logo.pn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 高亮颜色 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ul><li>定义：事件绑定指令，可以绑定原生事件和自定义事件</li><li>缩写：<code>@</code></li><li>语法：<code>v-on:click=&#39;callBack&#39;</code></li><li>修饰符：<ul><li>.stop 清除事件冒泡</li><li>.prevent 阻止默认行为</li><li>.once 绑定一次函数</li><li>.native 绑定原始事件</li><li>.passive 告诉浏览器不想阻止默认行为</li></ul></li><li>event事件对象<ul><li>target 事件触发的元素</li><li>currentTarget 事件绑定的元素</li></ul></li></ul><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><ul><li>由程序决定触发时机的自定义事件</li><li>语法:绑定：<code>@myEvent=&#39;callBack&#39;</code><br>调用：<code>$emit(&#39;callBack&#39;,参数)</code></li><li>应用场景：父子组件通信的时候</li></ul><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><ul><li>底层是innerText</li><li>定义：渲染文本内容，无论写入什么值，最后都被渲染成文本内容</li><li>和插值<code>&#123;&#123;&#125;&#125;</code>基本一致</li><li>为什么有v-text还要有插值语法？<br>v-text覆盖内容，插值语法就是个占位符，用插值偏多</li></ul><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><ul><li>定义：用于渲染dom片段的</li><li>底层：innerHTML<br>二者区别：v-html可以转义标签和渲染数据，v-text不能转义标签只能渲染数据<br>  v-html 你好<br>  v-text $lth2$gt你好$lt&#x2F;h2$gt</li></ul><h2 id="v-for循环渲染"><a href="#v-for循环渲染" class="headerlink" title="v-for循环渲染"></a>v-for循环渲染</h2><ul><li>基础语法:<code>v-for=&#39;val in data&#39; key=&#39;val&#39;</code></li><li>获取下标:<code>v-for=&#39;(val,index) in data&#39; :key=&#39;index&#39;</code></li><li>遍历对象：<code>v-for=(val,key,index) in obj</code></li><li>[!注意]key一定不可以是随机数，时间戳，因为值不固定，随时发生改变，key的值必须唯一。随机数时间戳不固定，刷新一次改变一次</li><li>data:对象，数组，数字，字符串</li><li>key&#x3D;’值必须唯一’当前元素的身份，标识，用来优化diff算法进行dom修改</li><li>虚拟dom和diff算法<ul><li>虚拟dom是js动态生成的，是js根据算法得出的</li><li>diff算法，执行规则：同层对比，新旧dom对比，当发现有不同之处，直接用新的dom替换旧的dom部分，diff算法超级快</li></ul></li></ul><h2 id="v-slot-详情搜索插槽"><a href="#v-slot-详情搜索插槽" class="headerlink" title="v-slot(详情搜索插槽)"></a>v-slot(详情搜索插槽)</h2><ul><li>绑定插槽的指令</li><li>作用域插槽、具名插槽和默认插槽</li><li>缩写：<code>#</code></li></ul><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p>永远只显示第一次渲染的值，让数据失去双向响应。它会让被绑定的元素不再进入diff对比，不更新。从而节省了虚拟dom的计算</p><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>原格式输出内容，不会让元素内的内容解析</p><h2 id="v-clock"><a href="#v-clock" class="headerlink" title="v-clock"></a>v-clock</h2><p>防止插值语法的闪烁问题，插值里的数据如果默认是空的，需要等接口返回才显示的话，页面内容的高随着内容撑开导致页面抖动</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-clock</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-clock]</span> &#123;<span class="attribute">display</span>:none;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>广义：事物发展的阶段</li><li>具体例子：人的生老病死</li><li>页面加载的过程：初始化，渲染，更新，销毁</li><li>官方定义：钩子函数(生命周期就等于钩子函数)</li></ul><h2 id="页面加载的过程：初始化，渲染，更新，销毁"><a href="#页面加载的过程：初始化，渲染，更新，销毁" class="headerlink" title="页面加载的过程：初始化，渲染，更新，销毁"></a>页面加载的过程：初始化，渲染，更新，销毁</h2><pre><code>诞生：入口函数，当页面完全加载出来，才执行    window.onload去世：当页面被关闭的时候执行，卸载    window.onunload更新：重新加载，页面要发生变化    window.onreload</code></pre><h2 id="生命周期作用是什么？"><a href="#生命周期作用是什么？" class="headerlink" title="生命周期作用是什么？"></a>生命周期作用是什么？</h2><p>Vue 所有的功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和DOM渲染两大重要功能。</p><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><p>预加载资源，骨架屏，上传日志等操作</p><h4 id="创建前-beforeCreate"><a href="#创建前-beforeCreate" class="headerlink" title="创建前 beforeCreate"></a>创建前 beforeCreate</h4><ul><li>vue对象创建之前触发的函数</li><li>此阶段为实例化初始后，this指向创建的实例，数据观察，数据监听事件机制都未形成，不能获dom节点。data，computed，watch，methods上的方法和数据都不能访问</li><li>因为data和methods数据都还未初始化</li></ul><h4 id="创建后-created"><a href="#创建后-created" class="headerlink" title="创建后 created"></a>创建后 created</h4><ul><li>vue对象创建完成触发的函数</li><li>实例初始化之后，data，props，computed导入完成</li><li>要调用methods方法，或者操作data的数据最早只能在created中操作</li><li>可以访问watch、methods、computed、data上的数据和方法</li></ul><h3 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h3><!-- 挂载是眼睛可以看见了，就代表已经挂载 --><h4 id="挂载前-beforeMount"><a href="#挂载前-beforeMount" class="headerlink" title="挂载前 beforeMount"></a>挂载前 beforeMount</h4><ul><li>vue对象开始挂载数据的时候触发的函数</li><li>这个阶段是过渡性的，一般一个项目只能用到一两次。</li></ul><h4 id="挂载后-mounted"><a href="#挂载后-mounted" class="headerlink" title="挂载后 mounted"></a>挂载后 mounted</h4><ul><li>vue对象挂载完成的时候触发的函数</li><li>完成创建vm.$el，和双向绑定只要执行完mounted,就表示整个Vue实例已经初始化完成了，此时组件已经脱离里了创建阶段， 进入到了运行阶段。</li><li>这个时候dom在页面呈现了，你可以获取dom，一般用于ajax自动发起请求数据</li></ul><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3><p>更新前还可以对数据进行二次修改，更新后只能是观察数据变化。当data或者props更新或者上游组件更新的时候触发</p><h4 id="更新前-beforeUpdate"><a href="#更新前-beforeUpdate" class="headerlink" title="更新前 beforeUpdate"></a>更新前 beforeUpdate</h4><ul><li>vue对象中的data数据发生改变之前触发的函数</li><li>当执行beforeUpdate的时候，页面中显示的数据还是旧的，此时date数据是最新的，页面尚未和最新数据数据保持同步。但是DOM中的数据会改变，这是vue双向数据绑定的作用，可在更新前访问现有的DOM，如手动移出添加的事件监听器。</li></ul><h4 id="更新后-updated"><a href="#更新后-updated" class="headerlink" title="更新后 updated"></a>更新后 updated</h4><ul><li>vue对象中的data数据发生改变完成触发的函数</li><li>Updated执行时数据已经保持同步了，都是最新的，完成虚拟DOM的重新渲染和打补丁。</li><li>组件DOM已完成更新，可执行依赖的DOM操作。</li><li>不要在此函数中操作数据（修改属性），否则就会陷入死循环。</li></ul><h4 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h4><p>主要用于销毁常驻内存的垃圾，比如定时器，或者全局变量</p><h4 id="销毁前-beforeDestroy"><a href="#销毁前-beforeDestroy" class="headerlink" title="销毁前 beforeDestroy"></a>销毁前 beforeDestroy</h4><ul><li>vue对象销毁之前触发的函数</li><li>该组件还存在</li><li>当执行beforeDestroy的时候，Vue实例就已经从运行阶段进入到销毁阶段了。实例上的所有date和methods以及过滤器和指令都是处于可用状态，此时还没有真正的执行销毁过程。</li></ul><h4 id="销毁后-destroyed"><a href="#销毁后-destroyed" class="headerlink" title="销毁后 destroyed"></a>销毁后 destroyed</h4><ul><li>vue对象销毁完成触发的函数</li><li>指令解绑和事件解绑以及子组件销毁完毕</li></ul><h4 id="errorCaptured捕获后代组件错误"><a href="#errorCaptured捕获后代组件错误" class="headerlink" title="errorCaptured捕获后代组件错误"></a>errorCaptured捕获后代组件错误</h4><ul><li>当组件发生错误时，会被该函数捕获</li><li>该函数有三个参数，第一个错误本身信息，第二个是发生错误的组件实例对象，第三个是发生错误的触发信息</li><li>该函数如果写return false则阻止错误继续向上传递</li></ul><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><ul><li>什么是插槽？<br>vue为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽</li><li>更高级的组件复用方式。接收dom片段或内容，加工处理后返回显示</li></ul><h2 id="Vue插槽的作用"><a href="#Vue插槽的作用" class="headerlink" title="Vue插槽的作用"></a>Vue插槽的作用</h2><h3 id="vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置"><a href="#vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置" class="headerlink" title="vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置"></a>vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过<slot></slot>标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置</h3><h2 id="三种插槽的定义"><a href="#三种插槽的定义" class="headerlink" title="三种插槽的定义"></a>三种插槽的定义</h2><h3 id="默认插槽（匿名插槽）"><a href="#默认插槽（匿名插槽）" class="headerlink" title="默认插槽（匿名插槽）"></a>默认插槽（匿名插槽）</h3><ul><li>定义：默认插槽是将父组件的结构和数据插入子组件中，默认插槽只有一个插入位置，要插入的html结构和data数据必须在父组件中，不过css可以在子组件中</li><li>特点： 父组件决定结构和数据</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">    &lt;template&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">            &#123;/* Child为子组件标签 </span></span><br><span class="line"><span class="language-xml">            插槽内容，可以是template标签也可以是其他标签,比如<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span> /&gt;</span>  */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span>&gt;</span>要插入的html内容<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 插槽位置</span></span><br><span class="line"><span class="language-xml">            插槽通俗的说就是：挖个坑，等组件的使用者进行填充 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>这里可以写默认值，当使用者没有传递具体结构时，会显示此内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><ul><li>定义：简单地说就是具有名字的插槽，只是默认插槽只有一个插入位置，具名插槽可以有多个插入位置，根据名字来识别对应的插槽</li><li>特点： 父组件决定结构和数据</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        &#123;/* Child为子组件标签</span></span><br><span class="line"><span class="language-xml">        插槽内容 */&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:one</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">testchart</span>&gt;</span><span class="tag">&lt;/<span class="name">testchart</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        //这是为了验证，子组件中的插槽可以填充任何结构的内容，所以在one插槽中插入一个组件</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:two</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            我是要给two插槽的信息</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        testchart,</span><br><span class="line">        child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li>定义：作用域插槽的data数据固定写在子组件中，数据的html结构根据父组件传入的html结构来决定</li><li>简述： 根据父组件中不同的html结构解析data中的数据</li><li>特点： 子组件决定数据，父组件决定结构</li><li>父组件中的插槽模版template里，其作用域属于插槽组件<br>&lt;slot :自定义name&#x3D;data中的属性或者对象&gt;</slot></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 父组件</span></span><br><span class="line">  &lt;template&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">          &#123;/* Child为子组件标签 </span></span><br><span class="line"><span class="language-xml">          插槽内容，作用域插槽必须要写template   */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;m in data.msg&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;m in data.msg&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">&quot;m in data.msg&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;m&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子组件</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 插槽位置 </span></span><br><span class="line"><span class="language-xml">插槽的结构是由使用者决定的 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>插槽未被调用时会显示此内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 公用数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">msg</span>: [<span class="string">&quot;火锅&quot;</span>, <span class="string">&quot;红烧肉&quot;</span>, <span class="string">&quot;烤羊腿&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>父传子：父组件使用v-bind 向插槽组件传参</li><li>子传父：插槽组件在slot组件上使用v-bind 反向传参<br>父组件使用<code>v-slot=&#39;参数&#39;</code> 接收数据<br>[AIA]一句话概括就是v-slot:后边是插槽名称，&#x3D;后边是组件内部绑定作用域值的映射</li></ul><h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><ul><li>凡是以<code>.vue</code>做文件后缀的都是组件</li></ul><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><ul><li>作用域只限于当前使用该组件的环境中生效</li></ul><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Com</span> <span class="keyword">from</span> <span class="string">&quot;./Com.vue&quot;</span></span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">Com</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">Com</span>&gt;&lt;/<span class="title class_">Com</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ul><li>该组件生效环境为整个项目，任何组件内使用都可以直接使用该组件，且不用单独导入</li></ul><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MySon</span> <span class="keyword">from</span> <span class="string">&quot;./MySon.vue&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-son&quot;</span>,<span class="title class_">MySon</span>);</span><br><span class="line"><span class="comment">// 每次只能挂载一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全局组件局部组件对比"><a href="#全局组件局部组件对比" class="headerlink" title="全局组件局部组件对比"></a>全局组件局部组件对比</h2><ol><li>全局组件在使用上比局部组件更简单，更快，更省代码</li><li>全局组件可能会污染全局环境，比如命名重复，被替换覆盖等问题，并且造成代码冗余，后期维护不方便</li><li>所以要合理的使用全局组件，当一个组件被重复使用3次及以上则考虑全局组件</li></ol><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><ul><li>定义：两个组件及以上进行数据交互，叫做组件通信</li><li>分为两类</li></ul><ol><li>父子之间通信</li><li>非父子之间的通信</li></ol><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><ul><li>父组件使用 v-bind 给子组件绑定属性</li><li>子组件使用 <code>$emit</code>接收父组件给的属性</li></ul><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><ul><li>父组件使用 v-on 给子组件绑定自定义事件函数</li><li>子组件使用 <code>$emit</code>调用父组件传递的函数</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:msg</span>=<span class="string">&quot;articleList&quot;</span> @<span class="attr">changeMsg</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>:<span class="string">&#x27;巧克力&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeMsg</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">msg</span> = msg</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里两个大括号中间放msg --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>改变字符串<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changeMsg&#x27;</span>,<span class="string">&#x27;蛋挞&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟"><a href="#兄弟" class="headerlink" title="兄弟"></a>兄弟</h3><ul><li>使用父组件作为媒介，父组件充当中转站</li></ul><h3 id="parent和-children-不可控不推荐"><a href="#parent和-children-不可控不推荐" class="headerlink" title="$parent和$children(不可控不推荐)"></a>$parent和$children(不可控不推荐)</h3><ul><li>通过$parent和$children可以访问组件实例，拿到实例代表什么？代表可以访问此组件的所有方法和data</li><li>parent 获取直接父组件实例对象</li><li>children 获取所有渲染的(必须要渲染在template里才能获取到)子组件集合</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里两个大括号中间放msg --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>:<span class="string">&#x27;Welcome&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeA</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 获取到子组件A</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">messageA</span> = <span class="string">&#x27;this is a new value&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>两个大括号中间写messageA<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>获取父组件的值为:两个大括号中间写parentVal<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">messageA</span>:<span class="string">&#x27;this is old&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">parentVal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">msg</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[!注意]：注意边界，如果在#app上拿$parent得到的是new Vue()的实例，在这实例上再拿$parent得到的是undefined，而在最底层的子组件拿$children是个空数组。也要注意得到parent和parent和parent和children的值不一样，$children 的值是数组，而$parent是个对象。<br>$children获取到的实例不保证顺序，因此当有多个子组件时可能获取到的不是自己想要的那一个。当组件嵌套多级时，可能会出现$parent.$parent.$parent…的情况，对于后续维护不友好。</p><ul><li>props $emit 、 $parent $children两种方式用于父子组件之间的通信， 而使用props进行父子组件通信更加普遍，二者皆不能用于非父子组件之间的通信。</li></ul><h3 id="跨层级"><a href="#跨层级" class="headerlink" title="跨层级"></a>跨层级</h3><h4 id="attrs-跨层级传递数据"><a href="#attrs-跨层级传递数据" class="headerlink" title="$attrs 跨层级传递数据"></a><code>$attrs</code> 跨层级传递数据</h4><ul><li>通过v-bind&#x3D;”$attrs”传入内部组件——在创建高级别的组件时非常有用</li><li>$attrs可以收集父组件中的所有传过来的属性除了那些在组件中没有通过props定义的。不包括样式class 和 style。<br>【Tip】什么时候用它以及为什么用它？<br>我们如果使用props的话，最里面的组件想要获取最外层组件的数据，就要通过中间的组件的props来传递，但是这个props对于中间的这个组件没啥用处，它就是做了一个桥梁而已。所以就有了这个$attrs来帮助我们，不必在中间组件中写props就可以让最里面的组件拿到最外面组件传进来的数据。</li><li>具体使用</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//grandfather</span></span><br><span class="line">    <span class="keyword">import</span> father <span class="keyword">from</span> <span class="string">&#x27;./father&#x27;</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            father</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- father --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background: red&quot;</span>&gt;</span></span><br><span class="line">    child in father</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>father age:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 两个大括号包着fatherAge --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        child</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fatherAge</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- child --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background: green&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>time: </span><br><span class="line">        <span class="comment">&lt;!-- 双括号中包着childTime --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">childTime</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="listeners跨层级传递事件"><a href="#listeners跨层级传递事件" class="headerlink" title="$listeners跨层级传递事件"></a><code>$listeners</code>跨层级传递事件</h4><p>vue1.0以前，没有vuex，想全局管理共享的数据，需要使用“黑魔法”，单独的new一个vue实例对象，基于该对象做数据通信</p><ul><li>通过v-on&#x3D;”$listeners”传入内部组件时非常有用</li><li>它是一个对象，里面包含了作用在这个组件上的所有监听器</li><li>适用场景<br>用.native修饰符可以把”focus”这个原生事件绑定在这个组件上。如果组件的根元素不能使用focus事件时，这个绑定会失效。<br>比如:input 所以为了在input元素上绑定”focus”这个事件，必须在input上用v-on绑定原生事件<input v-on:input="$emit('input',$event.target.value)"/></li></ul><h3 id="inheritAttr"><a href="#inheritAttr" class="headerlink" title="inheritAttr"></a>inheritAttr</h3><p>默认情况下被父作用域的不被认作props的特性绑定，将会“回退”且作为普通的HTML特性应用在子组件的根元素上</p><ul><li>当设置inheritAttrs: true（默认）时，子组件的顶层标签元素中会渲染出父组件传递过来的属性</li><li>不管inheritAttrs为true或者false，子组件中都能通过$attrs属性获取到父组件中传递过来的属性。</li></ul><h3 id="bus中央事件总线"><a href="#bus中央事件总线" class="headerlink" title="bus中央事件总线"></a>bus中央事件总线</h3><h4 id="on和-event"><a href="#on和-event" class="headerlink" title="$on和$event"></a><code>$on</code>和<code>$event</code></h4><ul><li>$on是事件派发</li><li>$event事件监听</li><li>bus无论是嵌套还是兄弟，他们都可以互相通信<br>  A -&gt; A1<br>  B和A1通信</li></ul><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li>全局定义bus:新建src&#x2F;eventBus.js文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventBus</span>= <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure></li><li>在组件中引入bus的引用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;./bus/eventBus&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$eventBus</span> = eventBus</span><br></pre></td></tr></table></figure></li><li>通过$emit触发事件传值，在另一个组件中的mounted中用on监听事件从而获取值<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件1</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Event</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()<span class="comment">// 准备一个空的实例对象，相当于又new了一个vue实例，Event中含有vue的全部办法</span></span><br><span class="line"><span class="title class_">Event</span>.$emit(<span class="string">&#x27;msg&#x27;</span>,<span class="variable language_">this</span>.<span class="property">msg</span>);<span class="comment">// 发送数据，触发当前实例上的事件，要传递的数据会传递给监听器。第一个参数是发送数据名称，接收时还用这个名字接收，第二个参数是这个数据现在的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件2</span></span><br><span class="line"><span class="attr">mounted</span>:&#123;</span><br><span class="line">    <span class="title class_">Event</span>.$on(<span class="string">&#x27;msg&#x27;</span>,<span class="keyword">function</span>(<span class="params">msg</span>)&#123;<span class="comment">// 接收数据，第一个参数是数据的名字，与发送时的名字对应，第二个参数是一个方法，要对数据进行操作</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>[AIA]</p><ol><li>vue原型挂载总线<br>Vue.prototype.bus &#x3D; new Vue()</li><li>子组件发送数据<br>this.bus.$emit(“change”,data)</li><li>子组件接收数据<br>this.bus.$on(“change”,function(data){})</li></ol><h3 id="ref-x2F-refs"><a href="#ref-x2F-refs" class="headerlink" title="ref&#x2F;$refs"></a>ref&#x2F;$refs</h3><ul><li>ref:如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据，被用来给元素或子组件注册信息，引用信息将会注册在父组件的 $refs 对象上。</li><li>适用场景：当使用element-ui组件时，可用于调用组件方法，例如el-table组件的选择表格项，排序等等。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;vue.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">sayHello</span>:() &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 app.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">ref</span>=<span class="string">&quot;comA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> comA = <span class="variable language_">this</span>.<span class="property">$ref</span>.<span class="property">comA</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(comA.<span class="property">name</span>);<span class="comment">//vue.js</span></span></span><br><span class="line"><span class="language-javascript">            comA.<span class="title function_">sayHello</span>(); <span class="comment">//hello</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ref 这种方式，就是获取子组件的实例，然后可以直接子组件的方法和访问操作data的数据，就是父组件控制子组件的一种方式，子组件想向父组件传参或操作，只能通过其他的方式了</p><h3 id="provide-x2F-inject"><a href="#provide-x2F-inject" class="headerlink" title="provide&#x2F;inject"></a>provide&#x2F;inject</h3><ul><li>官方描述：选项需一起使用，允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效</li><li>父组件中通过provide来提供变量，然后在子组件中通过inject来注入变量</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>provide</p><ul><li>一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。<br>inject</li><li>一个字符串数组</li><li>一个对象</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//祖先组件 提供foo</span></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;father&quot;</span>,</span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">foo</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;father&quot;</span>,</span><br><span class="line">    <span class="attr">provide</span>:&#123;</span><br><span class="line">        <span class="attr">foo</span>:<span class="string">&#x27;hello~&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后代组件注入foo,直接当作this.foo来用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">inject</span>:[<span class="string">&#x27;foo&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一二种区别在哪儿？</span></span><br><span class="line"><span class="comment">        如果需要this对象属性的值，</span></span><br><span class="line"><span class="comment">        例如：</span></span><br><span class="line"><span class="comment">            provide() &#123;</span></span><br><span class="line"><span class="comment">                return &#123;</span></span><br><span class="line"><span class="comment">                    test:this.msg</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        那么第二种是传不了的，后代组件拿不到数据。所以建议只写第一种</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>[注意]一旦注入了某个数据，比如上面示例中的 foo，那这个组件中就不能再声明 foo 这个数据了，因为它已经被父级占有。</p><h3 id="provide-和-inject-绑定并不是可响应的"><a href="#provide-和-inject-绑定并不是可响应的" class="headerlink" title="provide 和 inject 绑定并不是可响应的"></a>provide 和 inject 绑定并不是可响应的</h3><p>这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。因为对象是引用类型。</p><ul><li>先来个值类型的数据（也就是字符串）例子，不会响应</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">test</span>:<span class="variable language_">this</span>.<span class="property">msg</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&quot;Welcome to Your Vue.js App&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">_provided</span>.<span class="property">msg</span>) <span class="comment">//Welcome to Your Vue.js App</span></span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样做是不行的，打印出来的 _provided 中的数据并没有改，子组件取得值也没变。若直接给 this._provided.msg 赋值，但是即使是_provided.msg 里面的值改变了，子组件的取值，依然没有变。</span></span><br></pre></td></tr></table></figure><ul><li>但参数如果是对象，就可以响应了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="variable language_">this</span>.<span class="property">activeData</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">activeData</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;xxxx&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">activeData</span>.<span class="property">name</span> = <span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="用project与inject实现全局变量"><a href="#用project与inject实现全局变量" class="headerlink" title="用project与inject实现全局变量"></a>用project与inject实现全局变量</h4><ul><li>将其绑定到最顶层的组件app.vue，所有后代都接收到了，就是当做全局变量来用了。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">app</span>:<span class="variable language_">this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">text</span>:<span class="string">&quot;weiweiwei&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;enenen&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他所有子组件，需要全局变量的，只需按需注入app即可</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">inject</span>:[<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;app&#x27;</span>],</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">text</span>);<span class="comment">// 获取app中的变量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">say</span>();<span class="comment">// 可以执行app中的方法，变身为全局方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="provide-x2F-inject实现页面刷新，不闪烁"><a href="#provide-x2F-inject实现页面刷新，不闪烁" class="headerlink" title="provide&#x2F;inject实现页面刷新，不闪烁"></a>provide&#x2F;inject实现页面刷新，不闪烁</h4><ol><li>用vue-router重新路由到当前页面，页面是不进行刷新的</li><li>采用window.reload()，或者router.go(0)刷新时，整个浏览器进行了重新加载，闪烁，体验不好<br>上述办法都太行，那怎么办？</li></ol><ul><li>控制路由的组件中写一个函数（使用v-if控制router-view的显示隐藏），然后把这个函数传递给后代，然后在后代组件中调用这个方法即可刷新路由啦。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;isShowRouter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">reload</span>:<span class="variable language_">this</span>.<span class="property">reload</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShowRouter</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isShowRouter</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShowRouter</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 后代组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inject</span>:[<span class="string">&#x27;reload&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这里 provide 使用了函数传递给后代，然后后代调用这个函数，这种思路，也是可以做子后代向父组件传参通讯的思路了。这里的原理，和 event 事件订阅发布就很像了</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><ul><li>定义：除了原生标签是纯小写以外，非自定义组件纯小写标签都是内置组件</li></ul><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>vue内置模板组件，它不会渲染成任何真实的dom</p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p>插槽组件，它也不会渲染成任何真实的dom,只是用于接收渲染插入的内容</p><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>缓存状态组件，不会渲染成真实dom，只是将被包裹的自定义组件的状态缓存到内存中</p><ul><li>多用与缓存表单填写的组件</li><li>它不能缓存v-for循环渲染出来的组件</li><li>如果它包含多个子元素的话，需要使用v-if控制显示一个子元素【props】</li><li>include 该属性控制keep-alive只缓存被指定的组件，不被指定的不缓存</li><li>exclude 该属性控制keep-alive不缓存被指定的组件，不被指定的组件缓存</li><li>max 数字，限制keep-alive缓存组件的最大个数<br>【生命周期】<br>被keep-alive包裹的组件，才拥有该生命周期</li><li>activated被keep-alive激活的生命周期</li><li>deactivated被keep-alive销毁时候的生命周期</li></ul><h4 id="keep-alive使用"><a href="#keep-alive使用" class="headerlink" title="keep-alive使用"></a>keep-alive使用</h4><ol><li><p>几种常见用法</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;test-keep-alive&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">includedComponents</span>:<span class="string">&quot;test-keep-alive&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一种 将缓存name为test-keep-alive的组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;test-keep-alive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二种 将缓存name为a或b的组件，结合动态组件使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三种 使用正则表达式，需使用v-bind --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第四种 动态判断 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;includeComponents&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第五种 将不缓存name为test-keep-alive的组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;test-keep-alive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结合router，缓存部分页面<br>[使用$route.meta的keepAlive属性]</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// router/index.js</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>:[</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;Hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">component</span>:<span class="title class_">Hello</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">meta</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">keepAlive</span>:<span class="literal">false</span> <span class="comment">// 不需要缓存</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>:<span class="string">&#x27;/page1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;Page1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">component</span>:<span class="title class_">Page1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">meta</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">keepAlive</span>:<span class="literal">true</span> <span class="comment">// 需要被缓存</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- page1页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>两个大括号包着msg<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入框&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hello页面 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>两个大括号包着msg<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    结果：在page1页面输入框输入sss,然后手动跳转到hello页面，回到page1页面之前输入的sss依然保留，说明页面信息成功保存在内存中</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><p>或者也可以通过动态设置route.meta的keepAlive属性来实现其他需求<br>【要求】：首页是A页面 B页面跳转到A，A页面需要缓存，C页面跳转到A，A页面不需要被缓存<br> [思路]：思路是在每个路由的beforeRouteLeave(to, from, next)钩子中设置to.meta.keepAlive：</p><ul><li>to:Route 即将要进入目标路由对象</li><li>from:Route 当前导航正要离开的路由</li><li>next：Function 一定要调用该方法来resolve这个钩子。执行效果依赖 next 方法的调用参数<ul><li>next() 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed(确认的)</li><li>next(false) 中断当前的导航。如果浏览器的URL改变了(可能是用户手动或者浏览器后退按钮)，那么URL地址会重置到from路由对应的地址</li><li>next(‘&#x2F;‘) 或者next({path:’&#x2F;‘}):跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航</li><li>next(error) 如果传入next的参数是一个error实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// A的路由</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:A,</span><br><span class="line">    <span class="attr">meta</span>:&#123;</span><br><span class="line">        <span class="attr">keepAlive</span>:<span class="literal">true</span> <span class="comment">// 需要缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置下一个路由的meta</span></span><br><span class="line">        to.<span class="property">meta</span>.<span class="property">keepAlive</span> = <span class="literal">true</span>; <span class="comment">//B跳转到A时，让A缓存，即不刷新</span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置下一个路由的meta</span></span><br><span class="line">        to.<span class="property">meta</span>.<span class="property">keepAlive</span> = <span class="literal">false</span>; <span class="comment">// C 跳转到 A 时让A不缓存，即刷新</span></span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="component动态加载组件"><a href="#component动态加载组件" class="headerlink" title="component动态加载组件"></a>component动态加载组件</h3><ul><li>特点<ol><li>必须使用动态绑定的is属性来加载组件</li><li>is属性值必须是components里注册组件的名字</li><li>让代码更简洁，更可控</li><li>它的工作形式和v-if一致，使组件加载与销毁</li></ol></li><li>实现两个子组件动态切换<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- son1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>子组件1的默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- son2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>子组件2的默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change1&quot;</span>&gt;</span>son1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change2&quot;</span>&gt;</span>son2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&#x27;state&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;<span class="attr">state</span>:<span class="string">&#x27;son1&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">change1</span>(<span class="params"></span>) &#123;<span class="variable language_">this</span>.<span class="property">state</span>=<span class="string">&#x27;son1&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">change2</span>(<span class="params"></span>) &#123;<span class="variable language_">this</span>.<span class="property">state</span>=<span class="string">&#x27;son2&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        son1,son2</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>【Tip】</p><ol><li>son1,son2切换时，另一组件被销毁，所以，当两个组件进行动态切换时，组件的状态是：不断创建与销毁的过程</li><li>如果想把组件缓存下来，可以在动态组件上使用vue另一个内置组件keep-alive <keep-alive>     <component :is="state"></component> </keep-alive></li></ol><h4 id="父子组件执行顺序的问题："><a href="#父子组件执行顺序的问题：" class="headerlink" title="父子组件执行顺序的问题："></a>父子组件执行顺序的问题：</h4><ul><li>问：我们在父组件和子组件son中分别定义个生命周期钩子mounted，页面加载到完成，父组件先渲染完成还是子组件先渲染完成呢？</li><li>答：结果是父组件挂载完成前提：需等到子组件挂载完成后</li><li>问：子组件先挂载完成，父组件才能挂载完成，下边代码我们在父组件中获取子组件的dom元素</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">son</span> <span class="attr">ref</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> son = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>双括号里包着name<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        ,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;hhh&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lll&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 父组件(根实例)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">son</span>.<span class="property">$el</span>.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;son&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 上边代码，在子组件的mounted中我们修改了原来data对象中的数据，页面渲染完全没问题，但是在父组件mouted中输出子组件dom元素的内容时，不是新数据 &quot;lll&quot;，而是原来的数据 &quot;hhh&quot;  --&gt;</span></span><br></pre></td></tr></table></figure><p>【结论】子组件生命周期钩子mounted和父组件的mounted都是同步执行的，但是子组件渲染却是异步渲染的，所以在父组件的mounted中获取dom元素是原来的子组件数据！！<br>[解决上述bug] 用vm.$nextTick中去获取dom元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">    .......</span><br><span class="line"><span class="comment">// 父组件(根实例)</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">son</span>.<span class="property">$el</span>.<span class="property">innerText</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">components</span>:&#123;son&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="BTW——el和-el"><a href="#BTW——el和-el" class="headerlink" title="BTW——el和$el"></a>BTW——el和$el</h3><ul><li>el是Vue实例的挂载目标，实例挂载后，元素可以用xx.$el访问。挂载阶段还没开始的时候,$el属性是不可见的。vue生命周期mounted阶段，el被新创建的xx.$el替换，这个时候Vue实例的挂载目标确定，DOM渲染完毕</li></ul><h3 id="transition动画组件"><a href="#transition动画组件" class="headerlink" title="transition动画组件"></a>transition动画组件</h3><h4 id="组件出现过度-x2F-动画效果的原因"><a href="#组件出现过度-x2F-动画效果的原因" class="headerlink" title="组件出现过度&#x2F;动画效果的原因"></a>组件出现过度&#x2F;动画效果的原因</h4><p>【当插入或删除包含在transition组件中的元素时，Vue将会做以下处理】：</p><ol><li>自动嗅探目标元素是否应用里css过度或动画，如果是，在恰当的时机添加&#x2F;删除css类名</li><li>如果过度组件提供了JS钩子函数，这些钩子函数将在恰当时机被调用</li><li>如果没有找到JS钩子函数也没有检测到css过渡&#x2F;动画，DOM操作(插入&#x2F;删除)在下一帧中立即执行。(注意：此浏览器逐帧动画机制，和Vue的nextTick概念不同)</li></ol><h4 id="transition组件在什么情况下可以生成动画效果？"><a href="#transition组件在什么情况下可以生成动画效果？" class="headerlink" title="transition组件在什么情况下可以生成动画效果？"></a>transition组件在什么情况下可以生成动画效果？</h4><p>【Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入&#x2F;离开过渡动画效果】</p><ol><li>条件渲染(使用v-if)，可以使用key代替v-if</li><li>条件展示(使用v-show)</li><li>动态组件<br> <component :is='currentTabComponent'></component></li><li>组件根节点<br> transition&#x2F;transition-group作为跟组件，形成可服用动态组件</li></ol><h4 id="transition组件生成动画效果的方式"><a href="#transition组件生成动画效果的方式" class="headerlink" title="transition组件生成动画效果的方式"></a>transition组件生成动画效果的方式</h4><p>【Vue在插入、更新或者移除DOM 时，提供了以下不同方式的应用过渡效果】：</p><ol><li>在css过渡和动画中自动应用class</li><li>可以配合使用第三方css动画库，如animate.css</li><li>在过渡钩子函数中使用javascript 直接操作 dom</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ol><h4 id="分别详细介绍"><a href="#分别详细介绍" class="headerlink" title="分别详细介绍"></a>分别详细介绍</h4><ol><li>【css过渡】：常用的过渡都是使用 CSS 过渡，也就是 组件和css3属性transition连用</li></ol><h5 id="api"><a href="#api" class="headerlink" title="api"></a>api</h5><ul><li>name 指定自己写的动画类名前缀</li><li>v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。</li><li>enter-class-active 进入动画的类名</li><li>leave-class-active 离开动画的类名</li><li>duration 设置动画执行的间隔时间</li><li>v-enter-active: 定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition&#x2F;animation 完成之后移除。 这个类可以被用来定义过渡的过程时间，延迟和曲线函数。</li><li>v-enter-to: 定义进入过渡的结束状态。在元素被插入一帧后生效（于此同时 v-enter 被删除），在 transition&#x2F;animation 完成之后移除。</li><li>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。</li><li>v-leave-active: 定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition&#x2F;animation 完成之后移除。 这个类可以被用来定义过渡的过程时间，延迟和曲线函数。</li><li>v-leave-to: 定义离开过渡的结束状态。在离开过渡被触发一帧后生效（于此同时 v-leave 被删除），在transition&#x2F;animation 完成之后移除。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">        toggle coustom class</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enter-active-class</span>=<span class="string">&quot;animated tada&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>自定义过渡类名<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 样式如此设置，只需要控制show是false还是true，即可有淡入淡出效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fade-enter-active</span>,<span class="selector-class">.fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: opacity <span class="number">0.5s</span>;       </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fade-enter</span>,<span class="selector-class">.fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对于这些enter/leave过渡中切换的类名，v-是这些类名的前缀。使用使用&lt;transition name=&quot;my-transition&quot; 可以重置前缀，比如 v-enter 替换为 my-transition-enter。 --&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>【过渡可以和其他第三方 CSS 动画库连用】</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;transition </span><br><span class="line">    name=<span class="string">&quot;bounce&quot;</span></span><br><span class="line">    enter-active-<span class="keyword">class</span>=<span class="string">&quot;animated tada&quot;</span></span><br><span class="line">    leave-active-<span class="keyword">class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>自定义过渡类名<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">show</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 不需要设置样式，只需要控制show是false还是true，即可有动画效果</span></span><br></pre></td></tr></table></figure><ol start="3"><li>【CSS 动画】</li></ol><ul><li>CSS 动画是transition组件和css3属性animation连用，用法和 CSS 过渡相同</li><li>区别是：在动画中 v-enter 类名在节点插入DOM后不会立即删除，而是在 animationend 事件触发时删除。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>使用animation做动画效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">     <span class="selector-class">.bounce-enter-active</span>&#123;<span class="attribute">animation</span>:bounce-in <span class="number">0.5s</span>&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bounce-leave-active</span>&#123;<span class="attribute">animation</span>:bounce-in <span class="number">0.5s</span> reverse&#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> bounce-in&#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0</span>)&#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">50%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.5</span>)&#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>【transition组件和JavaScript 钩子连用】</li></ol><ul><li>当只用js过渡的时候，在enter和leave中必须使用done进行回调。否则，它们将被同步调用，过渡会立即完成</li><li>推荐对于仅使用JS过渡的元素v-bind:css&#x3D;”false”,Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span><br><span class="line"><span class="tag"> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//el 即操作的元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeEnter</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&#x27;translate(80px,80px)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">enter</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 必须下面加下面一行，否则不会出现应有的效果</span></span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">offsetWidth</span>;<span class="comment">//这里可以理解成强制浏览器刷新，也可以写成el.offsetHeight</span></span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">transition</span>=<span class="string">&#x27;all 1.5s ease&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&#x27;translate(0,0)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">afterEnter</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        cnosole.<span class="title function_">log</span>(<span class="string">&#x27;afterEnter&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// this.flag=false;//隐藏小球</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">beforeLeave</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&#x27;translate(0,0)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当与CSS结合时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 回调函数done是可选的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">leave</span>:<span class="keyword">function</span>(<span class="params">el,done</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">offsetWidth</span>;<span class="comment">//这里可以理解成强制浏览器刷新，也可以写el.offsetHeight</span></span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">transition</span>=<span class="string">&#x27;all 3s ease&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&#x27;translate(80px 80px)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这是直接调用done的话由于会立即删除元素导致动画不执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">done</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 解决办法</span></span></span><br><span class="line"><span class="language-javascript">        方法<span class="number">1</span>：不调用done可以进行动画，但是元素依旧存在，并且afterLeave函数钩子不执行</span></span><br><span class="line"><span class="language-javascript">        方法<span class="number">2</span>：</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//setTimeout可以解决这个问题，让done不立即执行，过几秒后再执行setTimeout(done,3000);//时间根据自己设定的动画时间确定</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">afterLeave</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterLeave&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>[注意]：在leave函数钩子中，直接调用done函数，会立即删除元素导致动画不执行</p><ul><li>和JS动画库Velocity一起使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;div id=&quot;app5&quot;&gt;</span></span><br><span class="line"><span class="comment">//     &lt;button @click=&quot;show = !show&quot;&gt;toggle hook&lt;/button&gt;</span></span><br><span class="line"><span class="comment">//     &lt;transition @before-enter=&quot;beforeEnter&quot;</span></span><br><span class="line"><span class="comment">//                 @enter=&quot;enter&quot;</span></span><br><span class="line"><span class="comment">//                 @leave=&quot;leave&quot;</span></span><br><span class="line"><span class="comment">//                 :css=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">//             &lt;p v-if=&quot;show&quot;&gt;javascript 钩子使用&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/transition&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">beforeEnter</span>:<span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(el);</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;beforeEnter&quot;</span>);</span><br><span class="line">            el.<span class="property">style</span>.<span class="property">opacity</span> = <span class="number">0</span></span><br><span class="line">            el.<span class="property">style</span>.<span class="property">transformOrigin</span> = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">enter</span>:<span class="keyword">function</span> (<span class="params">el, done</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;enter&quot;</span>);</span><br><span class="line">        <span class="comment">//    console.log(done);</span></span><br><span class="line">            <span class="title class_">Velocity</span>(el, &#123;<span class="attr">opacity</span>:<span class="number">1</span>, <span class="attr">fontSize</span>:<span class="string">&#x27;1.4em&#x27;</span>&#125;, &#123;<span class="attr">duration</span>:<span class="number">300</span>&#125;);</span><br><span class="line">            <span class="title class_">Velocity</span>(el, &#123;<span class="attr">fontSize</span>:<span class="string">&#x27;1em&#x27;</span>&#125;, &#123;<span class="attr">complete</span>:done&#125;);</span><br><span class="line">            <span class="title class_">Velocity</span>(el,<span class="string">&quot;reverse&quot;</span>, &#123; <span class="attr">duration</span>: <span class="number">6000</span> &#125;);</span><br><span class="line">            <span class="title class_">Velocity</span>(el,&#123;</span><br><span class="line">                        <span class="attr">borderBottomWidth</span>: [ <span class="string">&quot;2px&quot;</span>, <span class="string">&quot;spring&quot;</span> ], <span class="comment">// Uses &quot;spring&quot;</span></span><br><span class="line">                    <span class="attr">width</span>: [ <span class="string">&quot;100px&quot;</span>, [ <span class="number">250</span>, <span class="number">15</span> ] ], <span class="comment">// Uses custom spring physics</span></span><br><span class="line">                        <span class="attr">height</span>: <span class="string">&quot;100px&quot;</span> <span class="comment">// Defaults to easeInSine, the call&#x27;s default easing</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                            <span class="attr">easing</span>: <span class="string">&quot;easeInSine&quot;</span> <span class="comment">// Default easing</span></span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">leave</span>:<span class="keyword">function</span> (<span class="params">el, done</span>) &#123;</span><br><span class="line">            <span class="title class_">Velocity</span>(el, &#123;<span class="attr">translateX</span>:<span class="string">&#x27;15px&#x27;</span>, <span class="attr">rotateZ</span>:<span class="string">&#x27;50deg&#x27;</span>&#125;, &#123;<span class="attr">duration</span>:<span class="number">600</span>&#125;)</span><br><span class="line">            <span class="title class_">Velocity</span>(el, &#123;<span class="attr">rotateZ</span>:<span class="string">&#x27;100deg&#x27;</span>&#125;, &#123;<span class="attr">loop</span>:<span class="number">2</span>&#125;)</span><br><span class="line">            <span class="title class_">Velocity</span>(el,&#123;</span><br><span class="line">                <span class="attr">rotateZ</span>:<span class="string">&#x27;45deg&#x27;</span>,</span><br><span class="line">                <span class="attr">translateY</span>:<span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">                <span class="attr">translateX</span>:<span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">                <span class="attr">opacity</span>:<span class="number">0</span></span><br><span class="line">            &#125;, &#123;<span class="attr">complete</span>:done&#125;)</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>【组件间切换的动态效果实现】<br>组件的过渡-不需要使用key attribute。使用动态组件component，进行切换</li><li>【元素间切换的动态效果实现】</li></ol><ul><li>6.1原生标签可以使用 v-if&#x2F;v-else <transition>    <button v-if="isEdting" key="save">      Save    </button>    <button v-else key="edit">      Edit    </button>  </transition></li></ul><p>[注意]：当有相同标签名的元素切换时(比如两个div元素)，必须通过 key attribute 设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容（也就是不会有动画效果）。</p><ul><li><p>6.2设置key代替v-if&#x2F;v-else</p>  <transition>    <button v-bind:key="isEdting">    双括号中间包着isEdting ? 'Save':'Edit'    </button>  </transition></li><li><p>6.3两种过渡模式<br>多个元素间的过度动画（一个元素离开，一个元素进入），是同时生效的。这种情形不能满足所有要求，所以 Vue 提供了过渡模式。</p><ol><li>in-out：新元素先进行过渡，完成之后当前元素过渡离开。</li><li>out-in：当前元素先进行过渡，完成之后新元素过渡进入  <transition name="fade" mode="out-in">  <!-- ... the buttons ...-->  </transition></li></ol></li></ul><ol start="7"><li>【可复用过渡组件】<br>过渡可以通过 Vue 的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将  或者  作为根组件，然后将任何子组件放置在其中就可以了。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-special-transition&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;\ name=&quot;very-special-transition&quot;\</span></span><br><span class="line"><span class="string">        mode=&quot;out-in&quot;\</span></span><br><span class="line"><span class="string">        v-on:before-enter=&quot;beforeEnter&quot;\</span></span><br><span class="line"><span class="string">        v-on:after-enter=&quot;afterEnter&quot;\</span></span><br><span class="line"><span class="string">    &gt;\\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">&#x27;</span>,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;<span class="comment">// ...</span></span><br><span class="line">                        &#125;,</span><br><span class="line"><span class="attr">afterEnter</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;<span class="comment">// ...</span></span><br><span class="line">                        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">函数组件更适合完成这个任务：</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-special-transition&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">createElement, context</span>) &#123;<span class="keyword">var</span> data = &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;very-special-transition&#x27;</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;out-in&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">on</span>: &#123;</span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;<span class="comment">// ...</span></span><br><span class="line">                            &#125;,</span><br><span class="line"><span class="attr">afterEnter</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;<span class="comment">// ...</span></span><br><span class="line">                            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">&#x27;transition&#x27;</span>, data, context.<span class="property">children</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="BTW——当内置组件混合使用时的嵌套顺序"><a href="#BTW——当内置组件混合使用时的嵌套顺序" class="headerlink" title="BTW——当内置组件混合使用时的嵌套顺序"></a>BTW——当内置组件混合使用时的嵌套顺序</h3><p>transition&gt;keep-alive&gt;component</p><h3 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h3><p>用不同的输入参数一次又一次地执行相同的代码块，直到达到结束点<br>[注意点]</p><ol><li>数据源必须来自上游</li><li>递归组件必须要有”name”属性，且值与组件文件名一致</li><li>必须要有v-if的终止渲染条件<br>v-if &#x3D;”activeld” &amp;&amp; datalist[activeld].children<br>即需要 datalist[activeId] 存在 &amp;&amp; datalist[activeId] <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 假设我们在windows中绑定了一个arr --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;arr.length&gt;0||arr!=null&quot;</span>&gt;</span>hhh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 报错出现在我们的前半条判断中，在我们判断数组的长度是否大于零的时候，需要先判断我们是否有数组，如果没有数组的话，那么这条数据就会发生报错 --&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="BTW——自定义组件"><a href="#BTW——自定义组件" class="headerlink" title="BTW——自定义组件"></a>BTW——自定义组件</h3><p>要么首字母大写，要么用中划线的方式</p><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><ul><li>等所有dom更新完毕后触发(执行其指定的回调)，因为vue中dom更新是异步的才有这个东西</li><li>语法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取更新后的dom内容</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 获取更新后的dom内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>应用场景</li></ul><ol><li>created()进行DOM操作一定要放在Vue.nextTick()的回调函数</li><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中</li></ol><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>在不修改原始数据的情况下，对数据进行计算并返回新数据，该方法只能用在插值语法中</p><ul><li>双大括号插值和v-bind 表达式（后者从2.1.0+开始支持）</li></ul><h2 id="过滤器函数总接收表达式的值作为第一个参数"><a href="#过滤器函数总接收表达式的值作为第一个参数" class="headerlink" title="过滤器函数总接收表达式的值作为第一个参数"></a>过滤器函数总接收表达式的值作为第一个参数</h2><!-- 在双大括号中 -->   <p>两个大括号中间写着 message |</p><!-- 在v-bind 中 --><div v-bind:msg="message | filter"></div>在上述例子汇总，filter过滤器函数将会收到message的值作为第一个参数<h2 id="过滤器可以串联"><a href="#过滤器可以串联" class="headerlink" title="过滤器可以串联"></a>过滤器可以串联</h2><ul><li>两个大括号中间写着 message | filterA | filterB<br>在这个例子中，filterA被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将filterA的结果传递到filterB中</li></ul><h2 id="过滤器是javascript-函数可以接收参数"><a href="#过滤器是javascript-函数可以接收参数" class="headerlink" title="过滤器是javascript 函数可以接收参数"></a>过滤器是javascript 函数可以接收参数</h2><ul><li>两个大括号中间写着 message | filterA(‘arg1’,arg2<br>filterA被定义为接收三个参数的过滤器函数。其中message的值作为第一个参数，普通字符串’arg1’作为第二个参数，表达式arg2作为第三个参数</li></ul><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><p>filter 每次只能写一个</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;prefix&quot;</span>,<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="string">&quot;¥&quot;</span>+n)</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>|</code> 叫管道符号</p><ul><li>语法：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(filterName,<span class="function">() =&gt;</span> &#123;<span class="keyword">return</span> <span class="comment">//数据处理结果&#125;)</span></span><br></pre></td></tr></table></figure></li><li>实际开发使用</li><li>step1 用在数据修饰上，通常我们把函数抽离出去，统一放在个.js文件中</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filter.js</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">filterPrice</span>=(<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;已收款&#x27;</span> + value.<span class="string">&#x27;元&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">filterDate</span>=(<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="string">&#x27;天&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;filterPrice,filterDate&#125;</span><br></pre></td></tr></table></figure><ul><li>step2 在main.js中导入上边filter.js文件，也可以在任何组件中导入filter.js这个文件，但对于全局过滤器来说，最好是在main.js中定义，导入的是一个对象，所以使用Object.keys()方法，得到一个由key组成的数组，遍历数组，让key作为全局过滤器的名字，后面的是key对应的处理函数，这样在任何一个组件中都可以使用全局过滤器了</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">    <span class="comment">// 两种导入方式 推荐第一种</span></span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">&#x27;./filter&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> &#123;filterPrice,filterDate&#125; <span class="keyword">from</span> <span class="string">&#x27;./filter&#x27;</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(filters.<span class="property">default</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(item,filters.<span class="property">default</span>[item])</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        router,</span><br><span class="line">        store,</span><br><span class="line">        <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>step3<br>在组件中使用 全局过滤器</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;filterCount&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>两个大括号中间写 filterCount | filterPrice<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>两个大括号中间写 filterCount | filterDate<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">filterCount</span>:<span class="number">1500</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件过滤器"><a href="#组件过滤器" class="headerlink" title="组件过滤器"></a>组件过滤器</h2><p>filters可以写很多个</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters</span>:&#123;<span class="title function_">n1</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n+<span class="number">2</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;filterCount&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter&quot;</span>&gt;</span>两个大括号中间写 filterCount | changeCapitalLetter<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">filterCount</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeCapitalLetter</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// value是输入框的内容也是要显示的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(value) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> str = value.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 获取英文，以空格分组把字符串转为数组，遍历每一项第一项转为大写字母</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> newArr = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> ele.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUppeCase</span>()+ele.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> newArr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 数组转字符串以空格输出</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>常见使用场景：格式日期(时间)，金钱单位，保留小数位</li></ul><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><ul><li>定义:[简单来说]就是模块化就是将变量和函数,放入不同的文件中</li></ul><h2 id="模块的优点"><a href="#模块的优点" class="headerlink" title="模块的优点?"></a>模块的优点?</h2><ol><li>可维护性强:因为模块独立，代码依赖小，自己可以独立更新和改进</li><li>命名空间:一般一个变量在最顶级的函数外声明，可以全局使用，易出现命名冲突的情况。使用模块化开发来封装变量，可以避免全局污染</li><li>重用代码：通过模块引用的方式，来复用代码</li></ol><h2 id="CommonJS-AMD-x2F-CMD"><a href="#CommonJS-AMD-x2F-CMD" class="headerlink" title="CommonJS AMD&#x2F;CMD"></a>CommonJS AMD&#x2F;CMD</h2><ul><li>定义：CommonJS是一种规范语法，内容有很多种，nodejs是这种规范的实现<br>【扩展】：1.SeaJS是模块加载器，是用CMD规范<br>    2.AMD&#x2F;CMD是从 CommonJS 讨论中诞生的<br>    3.RequireJS 遵循 AMD（异步模块定义）规范<br>    4.Sea.js 遵循 CMD （通用模块定义）规范<br>  规范的不同，导致了两者 API 不同。<br>  [AMD] 提前执行：提前异步并行加载<br>      优点：尽早执行依赖可以尽早发现错误<br>      缺点：易产生浪费<br>  [CMD] 延迟执行：延迟按需加载<br>      优点：减少资源浪费<br>      缺点：等待时间长、出错时间延后<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CMD 依赖就近 </span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span></span>)&#123;<span class="comment">// 定义模块</span></span><br><span class="line">    <span class="keyword">var</span> demo=<span class="built_in">require</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> x=demo.<span class="title function_">demo</span>()</span><br><span class="line">    <span class="keyword">var</span> web=&#123;</span><br><span class="line">        <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> x+y</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">web</span>:web</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>  [RequireJS] 前端模块化管理工库<br>      详解：通过一个函数来将所有所需要的或者说所依赖的模块实现装载进来，然后返回一个新函数(模块)，我们所有关于新模块的业务代码都在这个函数内部操作，其内部也可以无限制的使用已经加载进来的模块<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">    <span class="attr">abc</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;boostrap&#x27;</span>:&#123;</span><br><span class="line">            <span class="attr">deps</span>:[<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line">            <span class="attr">exports</span>:<span class="string">&#x27;boostrap&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">paths</span>:&#123;</span><br><span class="line">        <span class="string">&quot;jquery&quot;</span>:<span class="string">&quot;路径&quot;</span>,</span><br><span class="line">        <span class="string">&quot;boostrap&quot;</span>:<span class="string">&quot;路径&quot;</span>,</span><br><span class="line">        <span class="string">&quot;index&quot;</span>:<span class="string">&quot;index&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;jquery&#x27;</span>,<span class="string">&#x27;boostrap&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],<span class="keyword">function</span>(<span class="params">$,bootstrap,index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index.<span class="property">web</span>.<span class="title function_">add</span>(<span class="number">11</span>));</span><br><span class="line">    $(<span class="string">&quot;.p1&quot;</span>).<span class="title function_">text</span>(index.<span class="property">web</span>.<span class="title function_">add</span>(<span class="number">11</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h2><ul><li>导入导出<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AI&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> phone = <span class="string">&#x27;3571678&#x27;</span></span><br><span class="line"><span class="keyword">var</span> hobby = <span class="string">&#x27;购物&#x27;</span>;</span><br><span class="line"><span class="comment">// 普通导出导入</span></span><br><span class="line">    <span class="keyword">export</span> &#123;name, phone, hobby&#125;;</span><br><span class="line">    <span class="comment">// 导入</span></span><br><span class="line">    <span class="keyword">import</span> &#123;name, phone, hobby&#125; <span class="keyword">from</span> <span class="string">&#x27;./views/moduleA&#x27;</span> </span><br><span class="line"><span class="comment">// 导出export别名</span></span><br><span class="line">    <span class="keyword">export</span> &#123; name <span class="keyword">as</span> v1, age <span class="keyword">as</span> v2, hobby <span class="keyword">as</span> v3&#125;;</span><br><span class="line">    <span class="comment">// 导入</span></span><br><span class="line">    <span class="keyword">import</span> &#123;v1, v2, v3&#125; <span class="keyword">from</span> <span class="string">&#x27;./views/moduleA&#x27;</span>;</span><br><span class="line"><span class="comment">//导出export default仅有一个</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;lll&#x27;</span>,<span class="attr">hobby</span>:<span class="string">&#x27;games&#x27;</span>&#125;</span><br><span class="line">    <span class="comment">// 导入</span></span><br><span class="line">    <span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&#x27;./views/moduleD&#x27;</span></span><br><span class="line"><span class="comment">// 定义公共数据</span></span><br><span class="line">    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> sexData=[</span><br><span class="line">        &#123;<span class="attr">key</span>:<span class="string">&#x27;man&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">key</span>:<span class="string">&#x27;woman&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">//用户</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> userData = [</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;name1&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;name2&#x27;</span>&#125; </span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 导入</span></span><br><span class="line">    <span class="keyword">import</span> &#123;sexData,userData&#125; <span class="keyword">from</span> <span class="string">&#x27;./views/moduleB&#x27;</span> </span><br></pre></td></tr></table></figure></li><li>图片的导入<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.直接导入 &lt;img src=&#x27;&#x27;&gt;</span></span><br><span class="line"><span class="comment">// 2.通过import</span></span><br><span class="line">    <span class="keyword">import</span> img1 <span class="keyword">from</span> <span class="string">&#x27;./assets/img/1.jpg&#x27;</span> <span class="comment">//导入图片</span></span><br><span class="line">    &lt;img :src=<span class="string">&quot;img1&quot;</span> /&gt;&lt;/div&gt; </span><br><span class="line"><span class="comment">// 3.通过require的方式</span></span><br><span class="line">   <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">return</span>&#123;</span><br><span class="line">           <span class="attr">img</span>:[</span><br><span class="line">               <span class="built_in">require</span>(<span class="string">&quot;@/assets/img/1.jpg&quot;</span>),</span><br><span class="line">               <span class="built_in">require</span>(<span class="string">&quot;@/assets/img/2.jpg&quot;</span>)</span><br><span class="line">           ]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="common-js和es6模块的区别？"><a href="#common-js和es6模块的区别？" class="headerlink" title="common.js和es6模块的区别？"></a>common.js和es6模块的区别？</h2><p>node使用的是commonjs 在使用模块的时候是运行时同步加载的，拷贝模块中的对象，模块可以多次加载，但只会在第一次加载，之后会被缓存，引入的是缓存中的值</p><ul><li>commonjs输出的是一个值的拷贝，而es6输出的是值的引用</li><li>commonjs是运行时加载，es6是编译时输出接口</li></ul><h1 id="混入mixins"><a href="#混入mixins" class="headerlink" title="混入mixins"></a>混入mixins</h1><ul><li>定义：将多个组件内重复使用的js部分抽离出来，作为混入文件，哪里复用插哪里</li></ul><h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mixins.js</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      <span class="comment">// ...组件内所有的配置，这里都有</span></span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">        <span class="attr">props</span>:[],</span><br><span class="line">        <span class="attr">methods</span>:&#123;&#125;,</span><br><span class="line">        <span class="comment">// 生命周期</span></span><br><span class="line">        <span class="attr">mixins</span>:[],</span><br><span class="line">        <span class="attr">components</span>:&#123;&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">    <span class="keyword">import</span> mixins <span class="keyword">from</span> <span class="string">&quot;./mixins&quot;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        <span class="attr">mixins</span>:[mixins,p,p]<span class="comment">//为什么要写成数组形式？因为这里面有顺序,若函数有重复会依次合并，</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了复用代码，复用js，三个组件，每个组件内都有同一个业务，同一个事件，并且事件的处理内容都一样</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>只能复用js，且组成部分与vue组件中的script完全一致</p><h2 id="混入的优缺点"><a href="#混入的优缺点" class="headerlink" title="混入的优缺点"></a>混入的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>节省代码量，让代码高复用，降低了代码的重复率。让vue组件’瘦身’</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>容易冲突，不好控制，后期维护成本高</p><h2 id="执行顺序及特性"><a href="#执行顺序及特性" class="headerlink" title="执行顺序及特性"></a>执行顺序及特性</h2><p>执行顺序是先执行混入文件后执行组件。如果mixins里有多个混入的话，会按照顺序依次执行</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>数据、函数，如果组件内和混入里的命名重复了则使用组件内的覆盖混入里的</li><li>如果混入里和组件内有相同的生命周期，则两个生命周期都会执行，先执行混入后执行组件</li></ol><h2 id="extends扩展"><a href="#extends扩展" class="headerlink" title="extends扩展"></a>extends扩展</h2><p>扩展执行表现形式和混入完全一样</p><h2 id="extends和mixins区别"><a href="#extends和mixins区别" class="headerlink" title="extends和mixins区别"></a>extends和mixins区别</h2><ul><li>扩展只能挂载一个</li><li>而混入可以使用数组的方式挂载很多个混入</li></ul><h1 id="数据监听"><a href="#数据监听" class="headerlink" title="数据监听"></a>数据监听</h1><h2 id="方法一：利用keyup事件来实现"><a href="#方法一：利用keyup事件来实现" class="headerlink" title="方法一：利用keyup事件来实现"></a>方法一：利用keyup事件来实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 定义一个getFullName函数</span></span><br><span class="line">        <span class="comment">// &lt;input type=&quot;text&quot; v-model=&quot;lastname&quot; @keyup =&quot;getFullName&quot;&gt; +</span></span><br><span class="line">        <span class="comment">// &lt;input type=&quot;text&quot; v-model=&quot;firstname&quot; @keyup=&quot;getFullName&quot;&gt; =</span></span><br><span class="line">        <span class="comment">// &lt;input type=&quot;text&quot; v-model=&quot;fullname&quot; @keyup=&quot;getFullName&quot;&gt; </span></span><br><span class="line"><span class="comment">// 在vm中定义方法</span></span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="attr">lastname</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">firstname</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">fullname</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fullname</span> = <span class="variable language_">this</span>.<span class="property">lastname</span>+<span class="string">&#x27;-&#x27;</span>+<span class="variable language_">this</span>.<span class="property">firstname</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="watch侦听器"><a href="#watch侦听器" class="headerlink" title="watch侦听器"></a>watch侦听器</h2><ul><li>专门用于监听数据变化的<br>  使用这个属性，可以监视data中指定数据的变化，然后触发这个watch中对应的function可以不用绑定事件</li></ul><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ul><li>在watch中可以对另外一个数据修改</li><li>可以对监听的数据进行固定值赋值，因为watch会新旧值对比，发现一致则不会再触发监听了</li><li>监听数据，赋值如果是递增或递减则会报错</li><li>默认只能是监听基本数据类型和数组的值</li><li>如果监听的是对象，则需要对象写法</li><li>不需要返回值</li><li>它可以执行异步操作：定时器、ajax</li></ul><h3 id="watch–监听数据变化"><a href="#watch–监听数据变化" class="headerlink" title="watch–监听数据变化"></a>watch–监听数据变化</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span> +</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> =</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fullname&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lastname</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">firstname</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fullname</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;lastname&#x27;</span>:<span class="keyword">function</span>(<span class="params">newVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fullname</span>=newVal+<span class="string">&#x27;-&#x27;</span>+<span class="variable language_">this</span>.<span class="property">firstname</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;firstname&#x27;</span>:<span class="keyword">function</span>(<span class="params">newVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">fullname</span>=newVal+<span class="string">&#x27;-&#x27;</span>+<span class="variable language_">this</span>.<span class="property">lastname</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三个选项"><a href="#三个选项" class="headerlink" title="三个选项"></a>三个选项</h3><ul><li>handler 平时的写法，就默认写的是handler</li><li>immediate<ul><li>默认false，在进入页面，第一次绑定值，不会立刻执行监听，只有数据发生改变才会执行handler中的操作</li><li>为true时，handler在第一次绑定值时就触发</li></ul></li><li>deep 用来进行深度监听，监听到对象属性的变化</li></ul><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.监听基本数据类型</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="title function_">name</span>(<span class="params">val,oldVal</span>) &#123; </span><br><span class="line">        <span class="comment">// val是新值，oldVal是旧值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 等价于</span></span><br><span class="line">    <span class="attr">name</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// 不能写箭头函数，因为箭头函数中的this值的是函数定义时所在的对象而不是函数运行时所在的对象</span></span><br><span class="line">    <span class="comment">// name: () =&gt; &#123;&#125; // error xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 监听对象</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="attr">obj</span>:&#123;</span><br><span class="line">        <span class="comment">// 深度监听</span></span><br><span class="line">        <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 执行函数</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">val</span>) &#123;&#125;,</span><br><span class="line">        <span class="comment">// 自动执行一次</span></span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只监听对象中的某一个属性值</span></span><br><span class="line"><span class="comment">// 点语法只限于对象使用，数组不可以</span></span><br><span class="line">    <span class="string">&#x27;obj.age&#x27;</span>(val,old)&#123;&#125;</span><br><span class="line">    <span class="string">&#x27;obj.age&#x27;</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch–监听路由变化"><a href="#watch–监听路由变化" class="headerlink" title="watch–监听路由变化"></a>watch–监听路由变化</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;$route.path&#x27;</span>:<span class="keyword">function</span>(<span class="params">val,oldVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(newVal===<span class="string">&#x27;/login&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;欢迎进入login&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(newVal===<span class="string">&#x27;/register&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;欢迎进入register&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// router/index.js</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>:[</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">redirect</span>:<span class="string">&#x27;/login&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">path</span>:<span class="string">&#x27;login&#x27;</span>,<span class="attr">component</span>:login&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">path</span>:<span class="string">&#x27;register&#x27;</span>,<span class="attr">component</span>:register&#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h2><ul><li>定义：监听一个值返回一个新值，且新值必须使用才能监听成功</li></ul><h3 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h3><ul><li>由于计算属性需要立即返回新值，因此不能处理异步操作</li><li>计算属性不受数据类型限制，任何数据都可以被监听</li><li>默认计算属性的值是只读的，不可以直接修改</li><li>如果要修改计算属性，则需要使用对象写法</li><li>计算属性可以监听多个值</li><li>有缓存，提高渲染性能</li><li>如果在页面上需要用到 对现有的数据进行加工得到新数据，则是要使用计算属性</li><li>想要给计算属性赋值，则需要使用set方法</li><li>计算属性和data一样，都需要设置return，当没有输出结果时，需要排查是不是return漏掉了</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span> +</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> =</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fullname&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lastname</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">firstname</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;fullname&#x27;</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastname</span>+<span class="string">&#x27;-&#x27;</span>+<span class="variable language_">this</span>.<span class="property">firstname</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[!注意]</p><ol><li>fullname没有在data中定义，在computed定义fullname后直接return出去就好</li><li>计算属性的求值结果，会被缓存起来，方便下次直接使用</li><li>不会因为页面中调用几次函数去执行几次，只会根据函数执行来调用函数(比如页面放入很多插值,例如fullname，在function中console.log(ok),刷新页面时，后台只会出现一个OK和初始就在的OK)</li></ol><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 基础使用</span></span><br><span class="line">    <span class="title function_">newStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">str</span>+<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 修改写法</span></span><br><span class="line">    <span class="attr">myData</span>:&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">my</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">my</span> = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watch-computed-methods-对比"><a href="#watch-computed-methods-对比" class="headerlink" title="watch computed methods 对比"></a>watch computed methods 对比</h2><ul><li>computed属性结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用</li><li>methods 方法表示一个具体的操作，主要书写业务逻辑</li><li>watch一个对象，键时需要观察的表达式，值对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体</li></ul><h2 id="watch-computed-区别"><a href="#watch-computed-区别" class="headerlink" title="watch computed 区别"></a>watch computed 区别</h2><ul><li>watch不支持缓存，computed有缓存</li><li>watch支持异步，computed不支持异步</li><li>watch不需要返回新值，computed需要返回新值</li><li>watch只能监听一个属性，computed能监听多个属性</li><li>watch只能监听基本数据类型和数组的值，computed不受数据类型限制</li></ul><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>扩展了vue没有的操作dom的指令，比如登录页的用户名输入框自动获取焦点，根据用户权限控制某些元素的是否可见等。</p><h2 id="组件内"><a href="#组件内" class="headerlink" title="组件内"></a>组件内</h2><p>directives</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">focus</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定的时候初始化</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bind</span>(<span class="params">el,binding</span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 元素的父集已经呈现，用于指令的操作</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">inserted</span>(<span class="params">el,binding</span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 更新：自己更新，不能保证子元素更新完</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">update</span>(<span class="params">el,binding</span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">// 等待当前组件的所有元素全部更新完毕</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">componentUpdate</span>(<span class="params">el,binding</span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 指令解绑，当组件被销毁的时候触发</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">unbind</span>(<span class="params">el,binding</span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-focus</span>=<span class="string">&#x27;show&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p>directive 每次只能声明一个。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;hidden&quot;</span>,&#123;</span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params">el,binding,vnode</span>)&#123;</span><br><span class="line">        <span class="comment">// binding.value是指令绑定入参</span></span><br><span class="line">        <span class="keyword">if</span>(binding.<span class="property">value</span>)&#123;</span><br><span class="line">            el.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            el.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;block&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作"><a href="#根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作" class="headerlink" title="根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作"></a>根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作</h2><h2 id="vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接"><a href="#vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接" class="headerlink" title="vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接"></a>vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接</h2><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用router-link组件来导航 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入`to`属性指定链接 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- router-link 默认会被渲染成一个&lt;a&gt;&lt;/a&gt;标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/news&quot;</span>&gt;</span>news<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 路由匹配到的组件渲染在这里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[1.定义路由组件]:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> <span class="title class_">Home</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;#home&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">News</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;#news&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对应的模块内容： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件home<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;news&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件news<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[2.定义路由]：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line">    <span class="keyword">const</span> routes = [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/news&#x27;</span>, <span class="attr">component</span>: <span class="title class_">News</span>&#125;, </span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>&#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    路由命名：</span></span><br><span class="line"><span class="comment">        有时候通过一个名称来标识一个路由显得更方便一些，特别是链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="attr">routes</span>:[</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,<span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">       &#125;</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure><p>[3.创建router实例]：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">    <span class="keyword">const</span> router=<span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        routes,<span class="comment">//(缩写)相当于 routes: routes</span></span><br><span class="line">        <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span><span class="comment">// 链接激活时默认使用的css类名，用到linkActiveClass来配置，在路由的构造选项里配置默认类名为active</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>[4.创建和挂载根实例]：<br>记得要通过 router 配置参数注入路由，从而让整个应用都有路由功能</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">`#my`</span>,【</span><br><span class="line">        router</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置路由导航的两种方式"><a href="#设置路由导航的两种方式" class="headerlink" title="设置路由导航的两种方式"></a>设置路由导航的两种方式</h2><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3> <router-link :to="/home"><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3><p>router.push(‘&#x2F;home’)</p><h3 id="声明式的常见方式"><a href="#声明式的常见方式" class="headerlink" title="声明式的常见方式"></a>声明式的常见方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 路由通过名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;homename&#x27;&#125;&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 直接路由带查询 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数query，地址栏变成/home?id=10 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    path:&#x27;/home&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    query:&#123;id:10&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;&quot;</span>&gt;</span></span><br><span class="line">    home</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 命名路由带参查询query，地址栏变成/home?id=10 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    name:&#x27;homename&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    query:&#123;id:10&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;&quot;</span>&gt;</span></span><br><span class="line">    home</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程式常见方法"><a href="#编程式常见方法" class="headerlink" title="编程式常见方法"></a>编程式常见方法</h3><ul><li>字符串 router.push(‘&#x2F;home’)</li><li>对象 router.push({path:’&#x2F;home’})</li><li>路由通过名称 router.push({name:’homename’})</li><li>直接路由带查询参数query,地址栏变成&#x2F;home?id&#x3D;10</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="number">10</span>&#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>命名路由带查询query，地址栏变成&#x2F;home?id&#x3D;10</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;homename&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="number">10</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="传入参数的方式"><a href="#传入参数的方式" class="headerlink" title="传入参数的方式"></a>传入参数的方式</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>例：<a href="http://localhost:8080/user/10">http://localhost:8080/user/10</a><br><router-link :to="'/user/'+id">user</router-link></p><ul><li>路由配置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes=[</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/news&#x27;</span>, <span class="attr">component</span>: <span class="title class_">News</span>&#125;, </span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>&#125;, </span><br><span class="line">    <span class="comment">//路由中定义http://localhost:8080/#/user/10 需要定义ID</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>例：<a href="http://localhost:8080/home?id=10">http://localhost:8080/home?id=10</a><br>传入参数的方式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    path:&#x27;/home&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    query: &#123;id: id&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span></span><br><span class="line">test</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>路由中定义：user?id&#x3D;10 不需要在路由配置中定义参数</p><h3 id="常见路由对象"><a href="#常见路由对象" class="headerlink" title="常见路由对象"></a>常见路由对象</h3><p>在使用vue-router的应用中，路由对象会被注入每个组件中，赋值为this.$route，并且当路由切换时，路由对象会被更新，路由对象暴露了以下属性</p><p>监听单个对象,默认开启深度监听</p>]]></content>
      
      
      <categories>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/03/17/hello-world/"/>
      <url>/2021/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
